/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Inject, forwardRef } from '@angular/core';
import { connectSortBy } from 'instantsearch.js/es/connectors';
import { BaseWidget } from '../base-widget';
import { NgAisInstantSearch } from '../instantsearch/instantsearch';
import { noop } from '../utils';
var NgAisSortBy = /** @class */ (function (_super) {
    tslib_1.__extends(NgAisSortBy, _super);
    function NgAisSortBy(instantSearchParent) {
        var _this = _super.call(this, 'SortBy') || this;
        _this.instantSearchParent = instantSearchParent;
        _this.state = {
            currentRefinement: null,
            options: [],
            refine: noop,
        };
        return _this;
    }
    /**
     * @return {?}
     */
    NgAisSortBy.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.createWidget(connectSortBy, {
            items: this.items,
            transformItems: this.transformItems,
        });
        _super.prototype.ngOnInit.call(this);
    };
    NgAisSortBy.decorators = [
        { type: Component, args: [{
                    selector: 'ais-sort-by',
                    template: "\n    <div [class]=\"cx()\">\n      <select\n        [class]=\"cx('select')\"\n        (change)=\"state.refine($event.target.value)\"\n      >\n        <option\n          [class]=\"cx('option')\"\n          *ngFor=\"let item of state.options\"\n          [value]=\"item.value\"\n          [selected]=\"item.value === state.currentRefinement\"\n        >\n          {{item.label}}\n        </option>\n      </select>\n    </div>\n  "
                }] }
    ];
    /** @nocollapse */
    NgAisSortBy.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return NgAisInstantSearch; })),] }] }
    ]; };
    NgAisSortBy.propDecorators = {
        items: [{ type: Input }],
        transformItems: [{ type: Input }]
    };
    return NgAisSortBy;
}(BaseWidget));
export { NgAisSortBy };
if (false) {
    /** @type {?} */
    NgAisSortBy.prototype.items;
    /** @type {?} */
    NgAisSortBy.prototype.transformItems;
    /** @type {?} */
    NgAisSortBy.prototype.state;
    /** @type {?} */
    NgAisSortBy.prototype.instantSearchParent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydC1ieS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC8iLCJzb3VyY2VzIjpbInNvcnQtYnkvc29ydC1ieS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQy9ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNwRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBY2hDO0lBb0JpQyx1Q0FBVTtJQVl6QyxxQkFFUyxtQkFBd0I7UUFGakMsWUFJRSxrQkFBTSxRQUFRLENBQUMsU0FDaEI7UUFIUSx5QkFBbUIsR0FBbkIsbUJBQW1CLENBQUs7UUFUMUIsV0FBSyxHQUFnQjtZQUMxQixpQkFBaUIsRUFBRSxJQUFJO1lBQ3ZCLE9BQU8sRUFBRSxFQUFFO1lBQ1gsTUFBTSxFQUFFLElBQUk7U0FFYixDQUFDOztJQU9GLENBQUM7Ozs7SUFFTSw4QkFBUTs7O0lBQWY7UUFDRSxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRTtZQUMvQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsY0FBYyxFQUFFLElBQUksQ0FBQyxjQUFjO1NBQ3BDLENBQUMsQ0FBQztRQUNILGlCQUFNLFFBQVEsV0FBRSxDQUFDO0lBQ25CLENBQUM7O2dCQTdDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGFBQWE7b0JBQ3ZCLFFBQVEsRUFBRSxpYkFnQlQ7aUJBQ0Y7Ozs7Z0RBY0ksTUFBTSxTQUFDLFVBQVU7Ozt3QkFBQyxjQUFNLE9BQUEsa0JBQWtCLEVBQWxCLENBQWtCLEVBQUM7Ozt3QkFaN0MsS0FBSztpQ0FDTCxLQUFLOztJQXdCUixrQkFBQztDQUFBLEFBOUNELENBb0JpQyxVQUFVLEdBMEIxQztTQTFCWSxXQUFXOzs7SUFDdEIsNEJBQW9DOztJQUNwQyxxQ0FDMkU7O0lBRTNFLDRCQUtFOztJQUdBLDBDQUMrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIEluamVjdCwgZm9yd2FyZFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb25uZWN0U29ydEJ5IH0gZnJvbSAnaW5zdGFudHNlYXJjaC5qcy9lcy9jb25uZWN0b3JzJztcbmltcG9ydCB7IEJhc2VXaWRnZXQgfSBmcm9tICcuLi9iYXNlLXdpZGdldCc7XG5pbXBvcnQgeyBOZ0Fpc0luc3RhbnRTZWFyY2ggfSBmcm9tICcuLi9pbnN0YW50c2VhcmNoL2luc3RhbnRzZWFyY2gnO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IHR5cGUgU29ydEJ5SXRlbSA9IHtcbiAgdmFsdWU6IHN0cmluZztcbiAgbGFiZWw6IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIFNvcnRCeVN0YXRlID0ge1xuICBjdXJyZW50UmVmaW5lbWVudDogc3RyaW5nIHwgbnVsbDtcbiAgb3B0aW9uczogU29ydEJ5SXRlbVtdO1xuICByZWZpbmU6IEZ1bmN0aW9uO1xuICAvLyBUT0RPOiBhZGQgaGFzTm9SZXN1bHRzOiBib29sZWFuO1xufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYWlzLXNvcnQtYnknLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgW2NsYXNzXT1cImN4KClcIj5cbiAgICAgIDxzZWxlY3RcbiAgICAgICAgW2NsYXNzXT1cImN4KCdzZWxlY3QnKVwiXG4gICAgICAgIChjaGFuZ2UpPVwic3RhdGUucmVmaW5lKCRldmVudC50YXJnZXQudmFsdWUpXCJcbiAgICAgID5cbiAgICAgICAgPG9wdGlvblxuICAgICAgICAgIFtjbGFzc109XCJjeCgnb3B0aW9uJylcIlxuICAgICAgICAgICpuZ0Zvcj1cImxldCBpdGVtIG9mIHN0YXRlLm9wdGlvbnNcIlxuICAgICAgICAgIFt2YWx1ZV09XCJpdGVtLnZhbHVlXCJcbiAgICAgICAgICBbc2VsZWN0ZWRdPVwiaXRlbS52YWx1ZSA9PT0gc3RhdGUuY3VycmVudFJlZmluZW1lbnRcIlxuICAgICAgICA+XG4gICAgICAgICAge3tpdGVtLmxhYmVsfX1cbiAgICAgICAgPC9vcHRpb24+XG4gICAgICA8L3NlbGVjdD5cbiAgICA8L2Rpdj5cbiAgYCxcbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNTb3J0QnkgZXh0ZW5kcyBCYXNlV2lkZ2V0IHtcbiAgQElucHV0KCkgcHVibGljIGl0ZW1zOiBTb3J0QnlJdGVtW107XG4gIEBJbnB1dCgpXG4gIHB1YmxpYyB0cmFuc2Zvcm1JdGVtcz86IDxVIGV4dGVuZHMgU29ydEJ5SXRlbT4oaXRlbXM6IFNvcnRCeUl0ZW1bXSkgPT4gVVtdO1xuXG4gIHB1YmxpYyBzdGF0ZTogU29ydEJ5U3RhdGUgPSB7XG4gICAgY3VycmVudFJlZmluZW1lbnQ6IG51bGwsXG4gICAgb3B0aW9uczogW10sXG4gICAgcmVmaW5lOiBub29wLFxuICAgIC8vIFRPRE86IEFkZCBoYXNOb1Jlc3VsdHM6IG51bGwsXG4gIH07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE5nQWlzSW5zdGFudFNlYXJjaCkpXG4gICAgcHVibGljIGluc3RhbnRTZWFyY2hQYXJlbnQ6IGFueVxuICApIHtcbiAgICBzdXBlcignU29ydEJ5Jyk7XG4gIH1cblxuICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5jcmVhdGVXaWRnZXQoY29ubmVjdFNvcnRCeSwge1xuICAgICAgaXRlbXM6IHRoaXMuaXRlbXMsXG4gICAgICB0cmFuc2Zvcm1JdGVtczogdGhpcy50cmFuc2Zvcm1JdGVtcyxcbiAgICB9KTtcbiAgICBzdXBlci5uZ09uSW5pdCgpO1xuICB9XG59XG4iXX0=