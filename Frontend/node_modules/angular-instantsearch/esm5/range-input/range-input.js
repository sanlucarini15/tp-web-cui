/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Component, Input, forwardRef } from '@angular/core';
import { connectRange } from 'instantsearch.js/es/connectors';
import { BaseWidget } from '../base-widget';
import { NgAisInstantSearch } from '../instantsearch/instantsearch';
import { parseNumberInput, noop } from '../utils';
var NgAisRangeInput = /** @class */ (function (_super) {
    tslib_1.__extends(NgAisRangeInput, _super);
    function NgAisRangeInput(instantSearchParent) {
        var _this = _super.call(this, 'RangeInput') || this;
        _this.instantSearchParent = instantSearchParent;
        // rendering options
        _this.currency = '$';
        _this.separator = 'to';
        _this.submitLabel = 'Go';
        _this.precision = 0;
        // inner state
        _this.minInputValue = '';
        _this.maxInputValue = '';
        _this.state = {
            range: { min: undefined, max: undefined },
            refine: noop,
            start: [0, 0],
        };
        return _this;
    }
    Object.defineProperty(NgAisRangeInput.prototype, "step", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var precision = parseNumberInput(this.precision);
            return 1 / Math.pow(10, precision);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgAisRangeInput.prototype, "canRefine", {
        get: /**
         * @return {?}
         */
        function () {
            return this.state.range.min !== this.state.range.max;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgAisRangeInput.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.createWidget(connectRange, {
            attribute: this.attribute,
            max: parseNumberInput(this.max),
            min: parseNumberInput(this.min),
            precision: parseNumberInput(this.precision),
        });
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * @param {?} event
     * @param {?} type
     * @return {?}
     */
    NgAisRangeInput.prototype.handleChange = /**
     * @param {?} event
     * @param {?} type
     * @return {?}
     */
    function (event, type) {
        /** @type {?} */
        var value = parseNumberInput(event.target.value);
        if (type === 'min') {
            this.minInputValue = value;
        }
        else {
            this.maxInputValue = value;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgAisRangeInput.prototype.handleSubmit = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.state.refine([this.minInputValue, this.maxInputValue]);
    };
    NgAisRangeInput.decorators = [
        { type: Component, args: [{
                    selector: 'ais-range-input',
                    template: "\n    <div [ngClass]=\"[\n        cx(), \n        !canRefine ? cx('', 'noRefinement') : ''\n      ]\">\n      <form\n        [class]=\"cx('form')\"\n        (submit)=\"handleSubmit($event)\"\n        novalidate\n      >\n        <label [class]=\"cx('label')\">\n          <span [class]=\"cx('currency')\">{{currency}}</span>\n          <input\n            [ngClass]=\"[\n              cx('input'),\n              cx('input', 'min')\n            ]\"\n            type=\"number\"\n            [min]=\"state.range.min\"\n            [max]=\"state.range.max\"\n            [placeholder]=\"state.range.min\"\n            [value]=\"minInputValue\"\n            [step]=\"step\"\n            (change)=\"handleChange($event, 'min')\"\n          />\n        </label>\n\n        <span [class]=\"cx('separator')\">{{separator}}</span>\n\n        <label [class]=\"cx('label')\">\n          <span [class]=\"cx('currency')\">{{currency}}</span>\n          <input\n            [ngClass]=\"[\n              cx('input'),\n              cx('input', 'max')\n            ]\"\n            type=\"number\"\n            [min]=\"state.range.min\"\n            [max]=\"state.range.max\"\n            [placeholder]=\"state.range.max\"\n            [value]=\"maxInputValue\"\n            [step]=\"step\"\n            (change)=\"handleChange($event, 'max')\"\n          />\n        </label>\n\n        <button\n          [class]=\"cx('submit')\"\n          (click)=\"handleSubmit($event)\"\n        >\n          {{submitLabel}}\n        </button>\n      </form>\n    </div>\n  "
                }] }
    ];
    /** @nocollapse */
    NgAisRangeInput.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return NgAisInstantSearch; })),] }] }
    ]; };
    NgAisRangeInput.propDecorators = {
        currency: [{ type: Input }],
        separator: [{ type: Input }],
        submitLabel: [{ type: Input }],
        attribute: [{ type: Input }],
        min: [{ type: Input }],
        max: [{ type: Input }],
        precision: [{ type: Input }]
    };
    return NgAisRangeInput;
}(BaseWidget));
export { NgAisRangeInput };
if (false) {
    /** @type {?} */
    NgAisRangeInput.prototype.currency;
    /** @type {?} */
    NgAisRangeInput.prototype.separator;
    /** @type {?} */
    NgAisRangeInput.prototype.submitLabel;
    /** @type {?} */
    NgAisRangeInput.prototype.attribute;
    /** @type {?} */
    NgAisRangeInput.prototype.min;
    /** @type {?} */
    NgAisRangeInput.prototype.max;
    /** @type {?} */
    NgAisRangeInput.prototype.precision;
    /** @type {?} */
    NgAisRangeInput.prototype.minInputValue;
    /** @type {?} */
    NgAisRangeInput.prototype.maxInputValue;
    /** @type {?} */
    NgAisRangeInput.prototype.state;
    /** @type {?} */
    NgAisRangeInput.prototype.instantSearchParent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZ2UtaW5wdXQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWluc3RhbnRzZWFyY2gvIiwic291cmNlcyI6WyJyYW5nZS1pbnB1dC9yYW5nZS1pbnB1dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzlELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNwRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBUWxEO0lBMERxQywyQ0FBVTtJQStCN0MseUJBRVMsbUJBQXdCO1FBRmpDLFlBSUUsa0JBQU0sWUFBWSxDQUFDLFNBQ3BCO1FBSFEseUJBQW1CLEdBQW5CLG1CQUFtQixDQUFLOztRQS9CakIsY0FBUSxHQUFXLEdBQUcsQ0FBQztRQUN2QixlQUFTLEdBQVcsSUFBSSxDQUFDO1FBQ3pCLGlCQUFXLEdBQVcsSUFBSSxDQUFDO1FBTTNCLGVBQVMsR0FBWSxDQUFDLENBQUM7O1FBR2hDLG1CQUFhLEdBQXFCLEVBQUUsQ0FBQztRQUNyQyxtQkFBYSxHQUFxQixFQUFFLENBQUM7UUFXckMsV0FBSyxHQUFzQjtZQUNoQyxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUU7WUFDekMsTUFBTSxFQUFFLElBQUk7WUFDWixLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2QsQ0FBQzs7SUFPRixDQUFDO0lBcEJELHNCQUFJLGlDQUFJOzs7O1FBQVI7O2dCQUNRLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ2xELE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3JDLENBQUM7OztPQUFBO0lBRUQsc0JBQUksc0NBQVM7Ozs7UUFBYjtZQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUN2RCxDQUFDOzs7T0FBQTs7OztJQWVNLGtDQUFROzs7SUFBZjtRQUNFLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFO1lBQzlCLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztZQUN6QixHQUFHLEVBQUUsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztZQUMvQixHQUFHLEVBQUUsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztZQUMvQixTQUFTLEVBQUUsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztTQUM1QyxDQUFDLENBQUM7UUFFSCxpQkFBTSxRQUFRLFdBQUUsQ0FBQztJQUNuQixDQUFDOzs7Ozs7SUFFTSxzQ0FBWTs7Ozs7SUFBbkIsVUFBb0IsS0FBVSxFQUFFLElBQVk7O1lBQ3BDLEtBQUssR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUVsRCxJQUFJLElBQUksS0FBSyxLQUFLLEVBQUU7WUFDbEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7U0FDNUI7YUFBTTtZQUNMLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1NBQzVCO0lBQ0gsQ0FBQzs7Ozs7SUFFTSxzQ0FBWTs7OztJQUFuQixVQUFvQixLQUFpQztRQUNuRCxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7O2dCQXhIRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtvQkFDM0IsUUFBUSxFQUFFLDhnREFzRFQ7aUJBQ0Y7Ozs7Z0RBaUNJLE1BQU0sU0FBQyxVQUFVOzs7d0JBQUMsY0FBTSxPQUFBLGtCQUFrQixFQUFsQixDQUFrQixFQUFDOzs7MkJBOUI3QyxLQUFLOzRCQUNMLEtBQUs7OEJBQ0wsS0FBSzs0QkFHTCxLQUFLO3NCQUNMLEtBQUs7c0JBQ0wsS0FBSzs0QkFDTCxLQUFLOztJQXFEUixzQkFBQztDQUFBLEFBekhELENBMERxQyxVQUFVLEdBK0Q5QztTQS9EWSxlQUFlOzs7SUFFMUIsbUNBQXVDOztJQUN2QyxvQ0FBeUM7O0lBQ3pDLHNDQUEyQzs7SUFHM0Msb0NBQWtDOztJQUNsQyw4QkFBNkI7O0lBQzdCLDhCQUE2Qjs7SUFDN0Isb0NBQXVDOztJQUd2Qyx3Q0FBNEM7O0lBQzVDLHdDQUE0Qzs7SUFXNUMsZ0NBSUU7O0lBR0EsOENBQytCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBDb21wb25lbnQsIElucHV0LCBmb3J3YXJkUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvbm5lY3RSYW5nZSB9IGZyb20gJ2luc3RhbnRzZWFyY2guanMvZXMvY29ubmVjdG9ycyc7XG5pbXBvcnQgeyBCYXNlV2lkZ2V0IH0gZnJvbSAnLi4vYmFzZS13aWRnZXQnO1xuaW1wb3J0IHsgTmdBaXNJbnN0YW50U2VhcmNoIH0gZnJvbSAnLi4vaW5zdGFudHNlYXJjaC9pbnN0YW50c2VhcmNoJztcbmltcG9ydCB7IHBhcnNlTnVtYmVySW5wdXQsIG5vb3AgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCB0eXBlIE51bWVyaWNSYW5nZVN0YXRlID0ge1xuICBzdGFydDogbnVtYmVyW107XG4gIHJhbmdlOiB7IG1pbj86IG51bWJlcjsgbWF4PzogbnVtYmVyIH07XG4gIHJlZmluZTogRnVuY3Rpb247XG59O1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhaXMtcmFuZ2UtaW5wdXQnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgW25nQ2xhc3NdPVwiW1xuICAgICAgICBjeCgpLCBcbiAgICAgICAgIWNhblJlZmluZSA/IGN4KCcnLCAnbm9SZWZpbmVtZW50JykgOiAnJ1xuICAgICAgXVwiPlxuICAgICAgPGZvcm1cbiAgICAgICAgW2NsYXNzXT1cImN4KCdmb3JtJylcIlxuICAgICAgICAoc3VibWl0KT1cImhhbmRsZVN1Ym1pdCgkZXZlbnQpXCJcbiAgICAgICAgbm92YWxpZGF0ZVxuICAgICAgPlxuICAgICAgICA8bGFiZWwgW2NsYXNzXT1cImN4KCdsYWJlbCcpXCI+XG4gICAgICAgICAgPHNwYW4gW2NsYXNzXT1cImN4KCdjdXJyZW5jeScpXCI+e3tjdXJyZW5jeX19PC9zcGFuPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgW25nQ2xhc3NdPVwiW1xuICAgICAgICAgICAgICBjeCgnaW5wdXQnKSxcbiAgICAgICAgICAgICAgY3goJ2lucHV0JywgJ21pbicpXG4gICAgICAgICAgICBdXCJcbiAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxuICAgICAgICAgICAgW21pbl09XCJzdGF0ZS5yYW5nZS5taW5cIlxuICAgICAgICAgICAgW21heF09XCJzdGF0ZS5yYW5nZS5tYXhcIlxuICAgICAgICAgICAgW3BsYWNlaG9sZGVyXT1cInN0YXRlLnJhbmdlLm1pblwiXG4gICAgICAgICAgICBbdmFsdWVdPVwibWluSW5wdXRWYWx1ZVwiXG4gICAgICAgICAgICBbc3RlcF09XCJzdGVwXCJcbiAgICAgICAgICAgIChjaGFuZ2UpPVwiaGFuZGxlQ2hhbmdlKCRldmVudCwgJ21pbicpXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L2xhYmVsPlxuXG4gICAgICAgIDxzcGFuIFtjbGFzc109XCJjeCgnc2VwYXJhdG9yJylcIj57e3NlcGFyYXRvcn19PC9zcGFuPlxuXG4gICAgICAgIDxsYWJlbCBbY2xhc3NdPVwiY3goJ2xhYmVsJylcIj5cbiAgICAgICAgICA8c3BhbiBbY2xhc3NdPVwiY3goJ2N1cnJlbmN5JylcIj57e2N1cnJlbmN5fX08L3NwYW4+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICBbbmdDbGFzc109XCJbXG4gICAgICAgICAgICAgIGN4KCdpbnB1dCcpLFxuICAgICAgICAgICAgICBjeCgnaW5wdXQnLCAnbWF4JylcbiAgICAgICAgICAgIF1cIlxuICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgICAgICBbbWluXT1cInN0YXRlLnJhbmdlLm1pblwiXG4gICAgICAgICAgICBbbWF4XT1cInN0YXRlLnJhbmdlLm1heFwiXG4gICAgICAgICAgICBbcGxhY2Vob2xkZXJdPVwic3RhdGUucmFuZ2UubWF4XCJcbiAgICAgICAgICAgIFt2YWx1ZV09XCJtYXhJbnB1dFZhbHVlXCJcbiAgICAgICAgICAgIFtzdGVwXT1cInN0ZXBcIlxuICAgICAgICAgICAgKGNoYW5nZSk9XCJoYW5kbGVDaGFuZ2UoJGV2ZW50LCAnbWF4JylcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvbGFiZWw+XG5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIFtjbGFzc109XCJjeCgnc3VibWl0JylcIlxuICAgICAgICAgIChjbGljayk9XCJoYW5kbGVTdWJtaXQoJGV2ZW50KVwiXG4gICAgICAgID5cbiAgICAgICAgICB7e3N1Ym1pdExhYmVsfX1cbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Zvcm0+XG4gICAgPC9kaXY+XG4gIGAsXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzUmFuZ2VJbnB1dCBleHRlbmRzIEJhc2VXaWRnZXQge1xuICAvLyByZW5kZXJpbmcgb3B0aW9uc1xuICBASW5wdXQoKSBwdWJsaWMgY3VycmVuY3k6IHN0cmluZyA9ICckJztcbiAgQElucHV0KCkgcHVibGljIHNlcGFyYXRvcjogc3RyaW5nID0gJ3RvJztcbiAgQElucHV0KCkgcHVibGljIHN1Ym1pdExhYmVsOiBzdHJpbmcgPSAnR28nO1xuXG4gIC8vIGluc3RhbmNlIG9wdGlvbnNcbiAgQElucHV0KCkgcHVibGljIGF0dHJpYnV0ZTogc3RyaW5nO1xuICBASW5wdXQoKSBwdWJsaWMgbWluPzogbnVtYmVyO1xuICBASW5wdXQoKSBwdWJsaWMgbWF4PzogbnVtYmVyO1xuICBASW5wdXQoKSBwdWJsaWMgcHJlY2lzaW9uPzogbnVtYmVyID0gMDtcblxuICAvLyBpbm5lciBzdGF0ZVxuICBwdWJsaWMgbWluSW5wdXRWYWx1ZT86IG51bWJlciB8IHN0cmluZyA9ICcnO1xuICBwdWJsaWMgbWF4SW5wdXRWYWx1ZT86IG51bWJlciB8IHN0cmluZyA9ICcnO1xuXG4gIGdldCBzdGVwKCkge1xuICAgIGNvbnN0IHByZWNpc2lvbiA9IHBhcnNlTnVtYmVySW5wdXQodGhpcy5wcmVjaXNpb24pO1xuICAgIHJldHVybiAxIC8gTWF0aC5wb3coMTAsIHByZWNpc2lvbik7XG4gIH1cblxuICBnZXQgY2FuUmVmaW5lKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLnJhbmdlLm1pbiAhPT0gdGhpcy5zdGF0ZS5yYW5nZS5tYXg7XG4gIH1cblxuICBwdWJsaWMgc3RhdGU6IE51bWVyaWNSYW5nZVN0YXRlID0ge1xuICAgIHJhbmdlOiB7IG1pbjogdW5kZWZpbmVkLCBtYXg6IHVuZGVmaW5lZCB9LFxuICAgIHJlZmluZTogbm9vcCxcbiAgICBzdGFydDogWzAsIDBdLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBOZ0Fpc0luc3RhbnRTZWFyY2gpKVxuICAgIHB1YmxpYyBpbnN0YW50U2VhcmNoUGFyZW50OiBhbnlcbiAgKSB7XG4gICAgc3VwZXIoJ1JhbmdlSW5wdXQnKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmNyZWF0ZVdpZGdldChjb25uZWN0UmFuZ2UsIHtcbiAgICAgIGF0dHJpYnV0ZTogdGhpcy5hdHRyaWJ1dGUsXG4gICAgICBtYXg6IHBhcnNlTnVtYmVySW5wdXQodGhpcy5tYXgpLFxuICAgICAgbWluOiBwYXJzZU51bWJlcklucHV0KHRoaXMubWluKSxcbiAgICAgIHByZWNpc2lvbjogcGFyc2VOdW1iZXJJbnB1dCh0aGlzLnByZWNpc2lvbiksXG4gICAgfSk7XG5cbiAgICBzdXBlci5uZ09uSW5pdCgpO1xuICB9XG5cbiAgcHVibGljIGhhbmRsZUNoYW5nZShldmVudDogYW55LCB0eXBlOiBzdHJpbmcpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHBhcnNlTnVtYmVySW5wdXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcblxuICAgIGlmICh0eXBlID09PSAnbWluJykge1xuICAgICAgdGhpcy5taW5JbnB1dFZhbHVlID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubWF4SW5wdXRWYWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBoYW5kbGVTdWJtaXQoZXZlbnQ6IE1vdXNlRXZlbnQgfCBLZXlib2FyZEV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnN0YXRlLnJlZmluZShbdGhpcy5taW5JbnB1dFZhbHVlLCB0aGlzLm1heElucHV0VmFsdWVdKTtcbiAgfVxufVxuIl19