/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Inject, forwardRef } from '@angular/core';
import { connectCurrentRefinements } from 'instantsearch.js/es/connectors';
import { BaseWidget } from '../base-widget';
import { NgAisInstantSearch } from '../instantsearch/instantsearch';
import { noop } from '../utils';
var NgAisCurrentRefinements = /** @class */ (function (_super) {
    tslib_1.__extends(NgAisCurrentRefinements, _super);
    function NgAisCurrentRefinements(instantSearchParent) {
        var _this = _super.call(this, 'CurrentRefinements') || this;
        _this.instantSearchParent = instantSearchParent;
        _this.state = {
            createURL: noop,
            refine: noop,
            items: [],
        };
        return _this;
    }
    Object.defineProperty(NgAisCurrentRefinements.prototype, "isHidden", {
        get: /**
         * @return {?}
         */
        function () {
            return this.state.items.length === 0 && this.autoHideContainer;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgAisCurrentRefinements.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.createWidget(connectCurrentRefinements, {
            includedAttributes: this.includedAttributes,
            excludedAttributes: this.excludedAttributes,
            transformItems: this.transformItems,
        });
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * @param {?} event
     * @param {?} refinement
     * @return {?}
     */
    NgAisCurrentRefinements.prototype.handleClick = /**
     * @param {?} event
     * @param {?} refinement
     * @return {?}
     */
    function (event, refinement) {
        event.preventDefault();
        this.state.refine(refinement);
    };
    NgAisCurrentRefinements.decorators = [
        { type: Component, args: [{
                    selector: 'ais-current-refinements',
                    template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <ul\n        [class]=\"cx('list')\"\n        *ngFor=\"let item of state.items\"\n      >\n        <li [class]=\"cx('item')\">\n          <span [class]=\"cx('label')\">{{item.label | titlecase}}:</span>\n\n          <span\n            [class]=\"cx('category')\"\n            *ngFor=\"let refinement of item.refinements\"\n          >\n            <span [class]=\"cx('categoryLabel')\">{{refinement.label}}</span>\n            <button [class]=\"cx('delete')\" (click)=\"handleClick($event, refinement)\">\u2715</button>\n          </span>\n        </li>\n      </ul>\n    </div>\n  "
                }] }
    ];
    /** @nocollapse */
    NgAisCurrentRefinements.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return NgAisInstantSearch; })),] }] }
    ]; };
    NgAisCurrentRefinements.propDecorators = {
        includedAttributes: [{ type: Input }],
        excludedAttributes: [{ type: Input }],
        transformItems: [{ type: Input }]
    };
    return NgAisCurrentRefinements;
}(BaseWidget));
export { NgAisCurrentRefinements };
if (false) {
    /** @type {?} */
    NgAisCurrentRefinements.prototype.includedAttributes;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.excludedAttributes;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.transformItems;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.state;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.instantSearchParent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VycmVudC1yZWZpbmVtZW50cy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC8iLCJzb3VyY2VzIjpbImN1cnJlbnQtcmVmaW5lbWVudHMvY3VycmVudC1yZWZpbmVtZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDM0UsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxVQUFVLENBQUM7QUF5QmhDO0lBMEI2QyxtREFBVTtJQW1CckQsaUNBRVMsbUJBQXdCO1FBRmpDLFlBSUUsa0JBQU0sb0JBQW9CLENBQUMsU0FDNUI7UUFIUSx5QkFBbUIsR0FBbkIsbUJBQW1CLENBQUs7UUFaMUIsV0FBSyxHQUE0QjtZQUN0QyxTQUFTLEVBQUUsSUFBSTtZQUNmLE1BQU0sRUFBRSxJQUFJO1lBQ1osS0FBSyxFQUFFLEVBQUU7U0FDVixDQUFDOztJQVdGLENBQUM7SUFURCxzQkFBSSw2Q0FBUTs7OztRQUFaO1lBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztRQUNqRSxDQUFDOzs7T0FBQTs7OztJQVNNLDBDQUFROzs7SUFBZjtRQUNFLElBQUksQ0FBQyxZQUFZLENBQUMseUJBQXlCLEVBQUU7WUFDM0Msa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGtCQUFrQjtZQUMzQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsa0JBQWtCO1lBQzNDLGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYztTQUNwQyxDQUFDLENBQUM7UUFDSCxpQkFBTSxRQUFRLFdBQUUsQ0FBQztJQUNuQixDQUFDOzs7Ozs7SUFFTSw2Q0FBVzs7Ozs7SUFBbEIsVUFBbUIsS0FBaUIsRUFBRSxVQUFjO1FBQ2xELEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNoQyxDQUFDOztnQkFoRUYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSx5QkFBeUI7b0JBQ25DLFFBQVEsRUFBRSxrcEJBc0JUO2lCQUNGOzs7O2dEQXFCSSxNQUFNLFNBQUMsVUFBVTs7O3dCQUFDLGNBQU0sT0FBQSxrQkFBa0IsRUFBbEIsQ0FBa0IsRUFBQzs7O3FDQWxCN0MsS0FBSztxQ0FDTCxLQUFLO2lDQUNMLEtBQUs7O0lBbUNSLDhCQUFDO0NBQUEsQUFqRUQsQ0EwQjZDLFVBQVUsR0F1Q3REO1NBdkNZLHVCQUF1Qjs7O0lBRWxDLHFEQUE4Qzs7SUFDOUMscURBQThDOztJQUM5QyxpREFHUzs7SUFFVCx3Q0FJRTs7SUFPQSxzREFDK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBJbmplY3QsIGZvcndhcmRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29ubmVjdEN1cnJlbnRSZWZpbmVtZW50cyB9IGZyb20gJ2luc3RhbnRzZWFyY2guanMvZXMvY29ubmVjdG9ycyc7XG5pbXBvcnQgeyBCYXNlV2lkZ2V0IH0gZnJvbSAnLi4vYmFzZS13aWRnZXQnO1xuaW1wb3J0IHsgTmdBaXNJbnN0YW50U2VhcmNoIH0gZnJvbSAnLi4vaW5zdGFudHNlYXJjaC9pbnN0YW50c2VhcmNoJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCB0eXBlIEN1cnJlbnRSZWZpbmVtZW50c0l0ZW0gPSB7XG4gIGF0dHJpYnV0ZTogc3RyaW5nO1xuICBsYWJlbDogc3RyaW5nO1xuICByZWZpbmU6IEZ1bmN0aW9uO1xuICByZWZpbmVtZW50czoge1xuICAgIHR5cGU6IHN0cmluZztcbiAgICAvLyBUT0RPOiBjcmVhdGUgbXVsdGlwbGUgdHlwZXMgZm9yIGVhY2ggb2YgdGhlIGF2YWlsYWJsZSByZWZpbmVtZW50XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29saWEvYW5ndWxhci1pbnN0YW50c2VhcmNoL3B1bGwvNDYzI2Rpc2N1c3Npb25fcjI1NTkxMTIzMlxuICAgIGF0dHJpYnV0ZTogc3RyaW5nO1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgdmFsdWU6IHN0cmluZztcbiAgICBvcGVyYXRvcj86IHN0cmluZztcbiAgICBleGhhdXN0aXZlPzogYm9vbGVhbjtcbiAgICBjb3VudD86IG51bWJlcjtcbiAgfVtdO1xufTtcblxuZXhwb3J0IHR5cGUgQ3VycmVudFJlZmluZW1lbnRzU3RhdGUgPSB7XG4gIGNyZWF0ZVVSTDogRnVuY3Rpb247XG4gIHJlZmluZTogRnVuY3Rpb247XG4gIGl0ZW1zOiBDdXJyZW50UmVmaW5lbWVudHNJdGVtW107XG59O1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhaXMtY3VycmVudC1yZWZpbmVtZW50cycsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdlxuICAgICAgW2NsYXNzXT1cImN4KClcIlxuICAgICAgKm5nSWY9XCIhaXNIaWRkZW5cIlxuICAgID5cbiAgICAgIDx1bFxuICAgICAgICBbY2xhc3NdPVwiY3goJ2xpc3QnKVwiXG4gICAgICAgICpuZ0Zvcj1cImxldCBpdGVtIG9mIHN0YXRlLml0ZW1zXCJcbiAgICAgID5cbiAgICAgICAgPGxpIFtjbGFzc109XCJjeCgnaXRlbScpXCI+XG4gICAgICAgICAgPHNwYW4gW2NsYXNzXT1cImN4KCdsYWJlbCcpXCI+e3tpdGVtLmxhYmVsIHwgdGl0bGVjYXNlfX06PC9zcGFuPlxuXG4gICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgIFtjbGFzc109XCJjeCgnY2F0ZWdvcnknKVwiXG4gICAgICAgICAgICAqbmdGb3I9XCJsZXQgcmVmaW5lbWVudCBvZiBpdGVtLnJlZmluZW1lbnRzXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8c3BhbiBbY2xhc3NdPVwiY3goJ2NhdGVnb3J5TGFiZWwnKVwiPnt7cmVmaW5lbWVudC5sYWJlbH19PC9zcGFuPlxuICAgICAgICAgICAgPGJ1dHRvbiBbY2xhc3NdPVwiY3goJ2RlbGV0ZScpXCIgKGNsaWNrKT1cImhhbmRsZUNsaWNrKCRldmVudCwgcmVmaW5lbWVudClcIj7inJU8L2J1dHRvbj5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvbGk+XG4gICAgICA8L3VsPlxuICAgIDwvZGl2PlxuICBgLFxufSlcbmV4cG9ydCBjbGFzcyBOZ0Fpc0N1cnJlbnRSZWZpbmVtZW50cyBleHRlbmRzIEJhc2VXaWRnZXQge1xuICAvLyBpbnN0YW5jZSBvcHRpb25zXG4gIEBJbnB1dCgpIHB1YmxpYyBpbmNsdWRlZEF0dHJpYnV0ZXM/OiBzdHJpbmdbXTtcbiAgQElucHV0KCkgcHVibGljIGV4Y2x1ZGVkQXR0cmlidXRlcz86IHN0cmluZ1tdO1xuICBASW5wdXQoKVxuICBwdWJsaWMgdHJhbnNmb3JtSXRlbXM/OiA8VSBleHRlbmRzIEN1cnJlbnRSZWZpbmVtZW50c0l0ZW0+KFxuICAgIGl0ZW1zOiBDdXJyZW50UmVmaW5lbWVudHNJdGVtW11cbiAgKSA9PiBVW107XG5cbiAgcHVibGljIHN0YXRlOiBDdXJyZW50UmVmaW5lbWVudHNTdGF0ZSA9IHtcbiAgICBjcmVhdGVVUkw6IG5vb3AsXG4gICAgcmVmaW5lOiBub29wLFxuICAgIGl0ZW1zOiBbXSxcbiAgfTtcblxuICBnZXQgaXNIaWRkZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuaXRlbXMubGVuZ3RoID09PSAwICYmIHRoaXMuYXV0b0hpZGVDb250YWluZXI7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTmdBaXNJbnN0YW50U2VhcmNoKSlcbiAgICBwdWJsaWMgaW5zdGFudFNlYXJjaFBhcmVudDogYW55XG4gICkge1xuICAgIHN1cGVyKCdDdXJyZW50UmVmaW5lbWVudHMnKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmNyZWF0ZVdpZGdldChjb25uZWN0Q3VycmVudFJlZmluZW1lbnRzLCB7XG4gICAgICBpbmNsdWRlZEF0dHJpYnV0ZXM6IHRoaXMuaW5jbHVkZWRBdHRyaWJ1dGVzLFxuICAgICAgZXhjbHVkZWRBdHRyaWJ1dGVzOiB0aGlzLmV4Y2x1ZGVkQXR0cmlidXRlcyxcbiAgICAgIHRyYW5zZm9ybUl0ZW1zOiB0aGlzLnRyYW5zZm9ybUl0ZW1zLFxuICAgIH0pO1xuICAgIHN1cGVyLm5nT25Jbml0KCk7XG4gIH1cblxuICBwdWJsaWMgaGFuZGxlQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQsIHJlZmluZW1lbnQ6IHt9KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnN0YXRlLnJlZmluZShyZWZpbmVtZW50KTtcbiAgfVxufVxuIl19