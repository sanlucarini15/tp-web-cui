/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ContentChild, Input, TemplateRef, Inject, forwardRef, } from '@angular/core';
import { connectInfiniteHitsWithInsights } from 'instantsearch.js/es/connectors';
import { BaseWidget } from '../base-widget';
import { NgAisInstantSearch } from '../instantsearch/instantsearch';
import { noop } from '../utils';
var NgAisInfiniteHits = /** @class */ (function (_super) {
    tslib_1.__extends(NgAisInfiniteHits, _super);
    function NgAisInfiniteHits(instantSearchParent) {
        var _this = _super.call(this, 'InfiniteHits') || this;
        _this.instantSearchParent = instantSearchParent;
        _this.showPrevious = false;
        _this.showPreviousLabel = 'Show previous results';
        _this.showMoreLabel = 'Show more results';
        // inner widget state returned from connector
        _this.state = {
            hits: [],
            isFirstPage: false,
            isLastPage: false,
            showMore: noop,
            showPrevious: noop,
            results: {},
        };
        _this.updateState = (/**
         * @param {?} state
         * @param {?} isFirstRendering
         * @return {?}
         */
        function (state, isFirstRendering) {
            if (isFirstRendering)
                return;
            _this.state = state;
        });
        return _this;
    }
    /**
     * @return {?}
     */
    NgAisInfiniteHits.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.createWidget(connectInfiniteHitsWithInsights, {
            escapeHTML: this.escapeHTML,
            transformItems: this.transformItems,
        });
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgAisInfiniteHits.prototype.showMoreHandler = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.state.showMore();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgAisInfiniteHits.prototype.showPreviousHandler = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.state.showPrevious();
    };
    NgAisInfiniteHits.decorators = [
        { type: Component, args: [{
                    selector: 'ais-infinite-hits',
                    template: "\n    <div [class]=\"cx()\">\n      <ng-container *ngTemplateOutlet=\"template; context: state\"></ng-container>\n\n      <!-- default rendering if no template specified -->\n      <button\n        [ngClass]=\"[cx('loadPrevious'), this.state.isFirstPage ? cx('loadPrevious', 'disabled') : '']\"\n        (click)=\"showPreviousHandler($event)\"\n        [disabled]=\"state.isFirstPage\"\n        *ngIf=\"showPrevious && !template\"\n      >\n        {{showPreviousLabel}}\n      </button>\n\n      <div *ngIf=\"!template\">\n        <ul [class]=\"cx('list')\">\n          <li\n            [class]=\"cx('item')\"\n            *ngFor=\"let hit of state.hits\"\n          >\n            <ais-highlight attribute=\"name\" [hit]=\"hit\">\n            </ais-highlight>\n          </li>\n        </ul>\n      </div>\n\n      <button\n        [ngClass]=\"[cx('loadMore'), this.state.isLastPage ? cx('loadMore', 'disabled') : '']\"\n        (click)=\"showMoreHandler($event)\"\n        [disabled]=\"state.isLastPage\"\n        *ngIf=\"!template\"\n      >\n        {{showMoreLabel}}\n      </button>\n    </div>\n  "
                }] }
    ];
    /** @nocollapse */
    NgAisInfiniteHits.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return NgAisInstantSearch; })),] }] }
    ]; };
    NgAisInfiniteHits.propDecorators = {
        template: [{ type: ContentChild, args: [TemplateRef,] }],
        escapeHTML: [{ type: Input }],
        showPrevious: [{ type: Input }],
        showPreviousLabel: [{ type: Input }],
        showMoreLabel: [{ type: Input }],
        transformItems: [{ type: Input }]
    };
    return NgAisInfiniteHits;
}(BaseWidget));
export { NgAisInfiniteHits };
if (false) {
    /** @type {?} */
    NgAisInfiniteHits.prototype.template;
    /** @type {?} */
    NgAisInfiniteHits.prototype.escapeHTML;
    /** @type {?} */
    NgAisInfiniteHits.prototype.showPrevious;
    /** @type {?} */
    NgAisInfiniteHits.prototype.showPreviousLabel;
    /** @type {?} */
    NgAisInfiniteHits.prototype.showMoreLabel;
    /** @type {?} */
    NgAisInfiniteHits.prototype.transformItems;
    /** @type {?} */
    NgAisInfiniteHits.prototype.state;
    /** @type {?} */
    NgAisInfiniteHits.prototype.updateState;
    /** @type {?} */
    NgAisInfiniteHits.prototype.instantSearchParent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5maW5pdGUtaGl0cy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC8iLCJzb3VyY2VzIjpbImluZmluaXRlLWhpdHMvaW5maW5pdGUtaGl0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsWUFBWSxFQUNaLEtBQUssRUFDTCxXQUFXLEVBQ1gsTUFBTSxFQUNOLFVBQVUsR0FDWCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNqRixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFFLGtCQUFrQixFQUFPLE1BQU0sZ0NBQWdDLENBQUM7QUFDekUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFVBQVUsQ0FBQztBQVdoQztJQXVDdUMsNkNBQVU7SUFvQi9DLDJCQUVTLG1CQUF3QjtRQUZqQyxZQUlFLGtCQUFNLGNBQWMsQ0FBQyxTQUN0QjtRQUhRLHlCQUFtQixHQUFuQixtQkFBbUIsQ0FBSztRQWpCakIsa0JBQVksR0FBWSxLQUFLLENBQUM7UUFDOUIsdUJBQWlCLEdBQVcsdUJBQXVCLENBQUM7UUFDcEQsbUJBQWEsR0FBVyxtQkFBbUIsQ0FBQzs7UUFJckQsV0FBSyxHQUFzQjtZQUNoQyxJQUFJLEVBQUUsRUFBRTtZQUNSLFdBQVcsRUFBRSxLQUFLO1lBQ2xCLFVBQVUsRUFBRSxLQUFLO1lBQ2pCLFFBQVEsRUFBRSxJQUFJO1lBQ2QsWUFBWSxFQUFFLElBQUk7WUFDbEIsT0FBTyxFQUFFLEVBQUU7U0FDWixDQUFDO1FBMkJGLGlCQUFXOzs7OztRQUFHLFVBQUMsS0FBSyxFQUFFLGdCQUF5QjtZQUM3QyxJQUFJLGdCQUFnQjtnQkFBRSxPQUFPO1lBQzdCLEtBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLENBQUMsRUFBQzs7SUF2QkYsQ0FBQzs7OztJQUVELG9DQUFROzs7SUFBUjtRQUNFLElBQUksQ0FBQyxZQUFZLENBQUMsK0JBQStCLEVBQUU7WUFDakQsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQzNCLGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYztTQUNwQyxDQUFDLENBQUM7UUFDSCxpQkFBTSxRQUFRLFdBQUUsQ0FBQztJQUNuQixDQUFDOzs7OztJQUVNLDJDQUFlOzs7O0lBQXRCLFVBQXVCLEtBQWlCO1FBQ3RDLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3hCLENBQUM7Ozs7O0lBRU0sK0NBQW1COzs7O0lBQTFCLFVBQTJCLEtBQWlCO1FBQzFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzVCLENBQUM7O2dCQWxGRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtvQkFDN0IsUUFBUSxFQUFFLG1sQ0FtQ1Q7aUJBQ0Y7Ozs7Z0RBc0JJLE1BQU0sU0FBQyxVQUFVOzs7d0JBQUMsY0FBTSxPQUFBLGtCQUFrQixFQUFsQixDQUFrQixFQUFDOzs7MkJBcEI3QyxZQUFZLFNBQUMsV0FBVzs2QkFHeEIsS0FBSzsrQkFDTCxLQUFLO29DQUNMLEtBQUs7Z0NBQ0wsS0FBSztpQ0FDTCxLQUFLOztJQXlDUix3QkFBQztDQUFBLEFBeEZELENBdUN1QyxVQUFVLEdBaURoRDtTQWpEWSxpQkFBaUI7OztJQUM1QixxQ0FBaUQ7O0lBR2pELHVDQUFvQzs7SUFDcEMseUNBQThDOztJQUM5Qyw4Q0FBb0U7O0lBQ3BFLDBDQUE0RDs7SUFDNUQsMkNBQXNFOztJQUd0RSxrQ0FPRTs7SUEyQkYsd0NBR0U7O0lBM0JBLGdEQUMrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkLFxuICBJbnB1dCxcbiAgVGVtcGxhdGVSZWYsXG4gIEluamVjdCxcbiAgZm9yd2FyZFJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvbm5lY3RJbmZpbml0ZUhpdHNXaXRoSW5zaWdodHMgfSBmcm9tICdpbnN0YW50c2VhcmNoLmpzL2VzL2Nvbm5lY3RvcnMnO1xuaW1wb3J0IHsgQmFzZVdpZGdldCB9IGZyb20gJy4uL2Jhc2Utd2lkZ2V0JztcbmltcG9ydCB7IE5nQWlzSW5zdGFudFNlYXJjaCwgSGl0IH0gZnJvbSAnLi4vaW5zdGFudHNlYXJjaC9pbnN0YW50c2VhcmNoJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCB0eXBlIEluZmluaXRlSGl0c1N0YXRlID0ge1xuICBoaXRzOiBIaXRbXTtcbiAgcmVzdWx0czogYW55O1xuICBpc0ZpcnN0UGFnZTogYm9vbGVhbjtcbiAgaXNMYXN0UGFnZTogYm9vbGVhbjtcbiAgc2hvd01vcmU6IEZ1bmN0aW9uO1xuICBzaG93UHJldmlvdXM6IEZ1bmN0aW9uO1xufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYWlzLWluZmluaXRlLWhpdHMnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgW2NsYXNzXT1cImN4KClcIj5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJ0ZW1wbGF0ZTsgY29udGV4dDogc3RhdGVcIj48L25nLWNvbnRhaW5lcj5cblxuICAgICAgPCEtLSBkZWZhdWx0IHJlbmRlcmluZyBpZiBubyB0ZW1wbGF0ZSBzcGVjaWZpZWQgLS0+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIFtuZ0NsYXNzXT1cIltjeCgnbG9hZFByZXZpb3VzJyksIHRoaXMuc3RhdGUuaXNGaXJzdFBhZ2UgPyBjeCgnbG9hZFByZXZpb3VzJywgJ2Rpc2FibGVkJykgOiAnJ11cIlxuICAgICAgICAoY2xpY2spPVwic2hvd1ByZXZpb3VzSGFuZGxlcigkZXZlbnQpXCJcbiAgICAgICAgW2Rpc2FibGVkXT1cInN0YXRlLmlzRmlyc3RQYWdlXCJcbiAgICAgICAgKm5nSWY9XCJzaG93UHJldmlvdXMgJiYgIXRlbXBsYXRlXCJcbiAgICAgID5cbiAgICAgICAge3tzaG93UHJldmlvdXNMYWJlbH19XG4gICAgICA8L2J1dHRvbj5cblxuICAgICAgPGRpdiAqbmdJZj1cIiF0ZW1wbGF0ZVwiPlxuICAgICAgICA8dWwgW2NsYXNzXT1cImN4KCdsaXN0JylcIj5cbiAgICAgICAgICA8bGlcbiAgICAgICAgICAgIFtjbGFzc109XCJjeCgnaXRlbScpXCJcbiAgICAgICAgICAgICpuZ0Zvcj1cImxldCBoaXQgb2Ygc3RhdGUuaGl0c1wiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGFpcy1oaWdobGlnaHQgYXR0cmlidXRlPVwibmFtZVwiIFtoaXRdPVwiaGl0XCI+XG4gICAgICAgICAgICA8L2Fpcy1oaWdobGlnaHQ+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgPC91bD5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8YnV0dG9uXG4gICAgICAgIFtuZ0NsYXNzXT1cIltjeCgnbG9hZE1vcmUnKSwgdGhpcy5zdGF0ZS5pc0xhc3RQYWdlID8gY3goJ2xvYWRNb3JlJywgJ2Rpc2FibGVkJykgOiAnJ11cIlxuICAgICAgICAoY2xpY2spPVwic2hvd01vcmVIYW5kbGVyKCRldmVudClcIlxuICAgICAgICBbZGlzYWJsZWRdPVwic3RhdGUuaXNMYXN0UGFnZVwiXG4gICAgICAgICpuZ0lmPVwiIXRlbXBsYXRlXCJcbiAgICAgID5cbiAgICAgICAge3tzaG93TW9yZUxhYmVsfX1cbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICBgLFxufSlcbmV4cG9ydCBjbGFzcyBOZ0Fpc0luZmluaXRlSGl0cyBleHRlbmRzIEJhc2VXaWRnZXQge1xuICBAQ29udGVudENoaWxkKFRlbXBsYXRlUmVmKSBwdWJsaWMgdGVtcGxhdGU/OiBhbnk7XG5cbiAgLy8gcmVuZGVyaW5nIG9wdGlvbnNcbiAgQElucHV0KCkgcHVibGljIGVzY2FwZUhUTUw6IGJvb2xlYW47XG4gIEBJbnB1dCgpIHB1YmxpYyBzaG93UHJldmlvdXM6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KCkgcHVibGljIHNob3dQcmV2aW91c0xhYmVsOiBzdHJpbmcgPSAnU2hvdyBwcmV2aW91cyByZXN1bHRzJztcbiAgQElucHV0KCkgcHVibGljIHNob3dNb3JlTGFiZWw6IHN0cmluZyA9ICdTaG93IG1vcmUgcmVzdWx0cyc7XG4gIEBJbnB1dCgpIHB1YmxpYyB0cmFuc2Zvcm1JdGVtcz86IDxVIGV4dGVuZHMgSGl0PihpdGVtczogSGl0W10pID0+IFVbXTtcblxuICAvLyBpbm5lciB3aWRnZXQgc3RhdGUgcmV0dXJuZWQgZnJvbSBjb25uZWN0b3JcbiAgcHVibGljIHN0YXRlOiBJbmZpbml0ZUhpdHNTdGF0ZSA9IHtcbiAgICBoaXRzOiBbXSxcbiAgICBpc0ZpcnN0UGFnZTogZmFsc2UsXG4gICAgaXNMYXN0UGFnZTogZmFsc2UsXG4gICAgc2hvd01vcmU6IG5vb3AsXG4gICAgc2hvd1ByZXZpb3VzOiBub29wLFxuICAgIHJlc3VsdHM6IHt9LFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBOZ0Fpc0luc3RhbnRTZWFyY2gpKVxuICAgIHB1YmxpYyBpbnN0YW50U2VhcmNoUGFyZW50OiBhbnlcbiAgKSB7XG4gICAgc3VwZXIoJ0luZmluaXRlSGl0cycpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5jcmVhdGVXaWRnZXQoY29ubmVjdEluZmluaXRlSGl0c1dpdGhJbnNpZ2h0cywge1xuICAgICAgZXNjYXBlSFRNTDogdGhpcy5lc2NhcGVIVE1MLFxuICAgICAgdHJhbnNmb3JtSXRlbXM6IHRoaXMudHJhbnNmb3JtSXRlbXMsXG4gICAgfSk7XG4gICAgc3VwZXIubmdPbkluaXQoKTtcbiAgfVxuXG4gIHB1YmxpYyBzaG93TW9yZUhhbmRsZXIoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuc3RhdGUuc2hvd01vcmUoKTtcbiAgfVxuXG4gIHB1YmxpYyBzaG93UHJldmlvdXNIYW5kbGVyKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnN0YXRlLnNob3dQcmV2aW91cygpO1xuICB9XG5cbiAgdXBkYXRlU3RhdGUgPSAoc3RhdGUsIGlzRmlyc3RSZW5kZXJpbmc6IGJvb2xlYW4pID0+IHtcbiAgICBpZiAoaXNGaXJzdFJlbmRlcmluZykgcmV0dXJuO1xuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgfTtcbn1cbiJdfQ==