/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as algoliasearchProxy from 'algoliasearch';
import * as encodeProxy from 'querystring-es3/encode';
import { VERSION as AngularVersion } from '@angular/core';
import { VERSION } from './version';
/** @type {?} */
var algoliasearch = algoliasearchProxy.default || algoliasearchProxy;
/** @type {?} */
var encode = encodeProxy.default || encodeProxy;
/**
 * @param {?} __0
 * @return {?}
 */
export function createSSRSearchClient(_a) {
    var appId = _a.appId, apiKey = _a.apiKey, httpClient = _a.httpClient, HttpHeaders = _a.HttpHeaders, transferState = _a.transferState, makeStateKey = _a.makeStateKey, _b = _a.options, options = _b === void 0 ? {} : _b;
    /** @type {?} */
    var searchClient = algoliasearch(appId, apiKey, options);
    searchClient.addAlgoliaAgent("angular (" + AngularVersion.full + ")");
    searchClient.addAlgoliaAgent("angular-instantsearch (" + VERSION + ")");
    searchClient.addAlgoliaAgent("angular-instantsearch-server (" + VERSION + ")");
    ((/** @type {?} */ (searchClient)))._request = (/**
     * @param {?} rawUrl
     * @param {?} options
     * @return {?}
     */
    function (rawUrl, options) {
        /** @type {?} */
        var headers = new HttpHeaders();
        headers = headers.set('content-type', options.method === 'POST'
            ? 'application/x-www-form-urlencoded'
            : 'application/json');
        headers = headers.set('accept', 'application/json');
        /** @type {?} */
        var url = rawUrl + (rawUrl.includes('?') ? '&' : '?') + encode(options.headers);
        /** @type {?} */
        var transferStateKey = makeStateKey("ngais(" + options.body + ")");
        if (transferState.hasKey(transferStateKey)) {
            /** @type {?} */
            var response = JSON.parse(transferState.get(transferStateKey, JSON.stringify({})));
            return Promise.resolve({
                statusCode: response.status,
                body: response.body,
                headers: response.headers,
            });
        }
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            httpClient
                .request(options.method, url, {
                headers: headers,
                body: options.body,
                observe: 'response',
            })
                .subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                transferState.set(transferStateKey, JSON.stringify(response));
                resolve({
                    statusCode: response.status,
                    body: response.body,
                    headers: response.headers,
                });
            }), (/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                return reject({
                    statusCode: response.status,
                    body: response.body,
                    headers: response.headers,
                });
            }));
        }));
    });
    return searchClient;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXNzci1zZWFyY2gtY2xpZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1pbnN0YW50c2VhcmNoLyIsInNvdXJjZXMiOlsiY3JlYXRlLXNzci1zZWFyY2gtY2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEtBQUssa0JBQWtCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sS0FBSyxXQUFXLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLE9BQU8sSUFBSSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHMUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQzs7SUFvQjlCLGFBQWEsR0FBRyxrQkFBa0IsQ0FBQyxPQUFPLElBQUksa0JBQWtCOztJQUNoRSxNQUFNLEdBQUcsV0FBVyxDQUFDLE9BQU8sSUFBSSxXQUFXOzs7OztBQUVqRCxNQUFNLFVBQVUscUJBQXFCLENBQUMsRUFRYjtRQVB2QixnQkFBSyxFQUNMLGtCQUFNLEVBQ04sMEJBQVUsRUFDViw0QkFBVyxFQUNYLGdDQUFhLEVBQ2IsOEJBQVksRUFDWixlQUFZLEVBQVosaUNBQVk7O1FBRU4sWUFBWSxHQUFHLGFBQWEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQztJQUUxRCxZQUFZLENBQUMsZUFBZSxDQUFDLGNBQVksY0FBYyxDQUFDLElBQUksTUFBRyxDQUFDLENBQUM7SUFDakUsWUFBWSxDQUFDLGVBQWUsQ0FBQyw0QkFBMEIsT0FBTyxNQUFHLENBQUMsQ0FBQztJQUNuRSxZQUFZLENBQUMsZUFBZSxDQUFDLG1DQUFpQyxPQUFPLE1BQUcsQ0FBQyxDQUFDO0lBRTFFLENBQUMsbUJBQUEsWUFBWSxFQUFPLENBQUMsQ0FBQyxRQUFROzs7OztJQUFHLFVBQy9CLE1BQWMsRUFDZCxPQUF1Qjs7WUFFbkIsT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFO1FBRS9CLE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUNuQixjQUFjLEVBQ2QsT0FBTyxDQUFDLE1BQU0sS0FBSyxNQUFNO1lBQ3ZCLENBQUMsQ0FBQyxtQ0FBbUM7WUFDckMsQ0FBQyxDQUFDLGtCQUFrQixDQUN2QixDQUFDO1FBRUYsT0FBTyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLGtCQUFrQixDQUFDLENBQUM7O1lBRTlDLEdBQUcsR0FDUCxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDOztZQUVqRSxnQkFBZ0IsR0FBRyxZQUFZLENBQUMsV0FBUyxPQUFPLENBQUMsSUFBSSxNQUFHLENBQUM7UUFFL0QsSUFBSSxhQUFhLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUU7O2dCQUNwQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FDekIsYUFBYSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQ3hEO1lBRUQsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDO2dCQUNyQixVQUFVLEVBQUUsUUFBUSxDQUFDLE1BQU07Z0JBQzNCLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSTtnQkFDbkIsT0FBTyxFQUFFLFFBQVEsQ0FBQyxPQUFPO2FBQzFCLENBQUMsQ0FBQztTQUNKO1FBRUQsT0FBTyxJQUFJLE9BQU87Ozs7O1FBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtZQUNqQyxVQUFVO2lCQUNQLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtnQkFDNUIsT0FBTyxTQUFBO2dCQUNQLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtnQkFDbEIsT0FBTyxFQUFFLFVBQVU7YUFDcEIsQ0FBQztpQkFDRCxTQUFTOzs7O1lBQ1IsVUFBQSxRQUFRO2dCQUNOLGFBQWEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUU5RCxPQUFPLENBQUM7b0JBQ04sVUFBVSxFQUFFLFFBQVEsQ0FBQyxNQUFNO29CQUMzQixJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUk7b0JBQ25CLE9BQU8sRUFBRSxRQUFRLENBQUMsT0FBTztpQkFDMUIsQ0FBQyxDQUFDO1lBQ0wsQ0FBQzs7OztZQUNELFVBQUEsUUFBUTtnQkFDTixPQUFBLE1BQU0sQ0FBQztvQkFDTCxVQUFVLEVBQUUsUUFBUSxDQUFDLE1BQU07b0JBQzNCLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSTtvQkFDbkIsT0FBTyxFQUFFLFFBQVEsQ0FBQyxPQUFPO2lCQUMxQixDQUFDO1lBSkYsQ0FJRSxFQUNMLENBQUM7UUFDTixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQSxDQUFDO0lBRUYsT0FBTyxZQUFZLENBQUM7QUFDdEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFsZ29saWFzZWFyY2hQcm94eSBmcm9tICdhbGdvbGlhc2VhcmNoJztcbmltcG9ydCAqIGFzIGVuY29kZVByb3h5IGZyb20gJ3F1ZXJ5c3RyaW5nLWVzMy9lbmNvZGUnO1xuaW1wb3J0IHsgVkVSU0lPTiBhcyBBbmd1bGFyVmVyc2lvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cEhlYWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBUcmFuc2ZlclN0YXRlLCBTdGF0ZUtleSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgVkVSU0lPTiB9IGZyb20gJy4vdmVyc2lvbic7XG5cbnR5cGUgU1NSU2VhcmNoQ2xpZW50T3B0aW9ucyA9IHtcbiAgYXBwSWQ6IHN0cmluZztcbiAgYXBpS2V5OiBzdHJpbmc7XG4gIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQ7XG4gIEh0dHBIZWFkZXJzOiB0eXBlb2YgSHR0cEhlYWRlcnM7XG4gIHRyYW5zZmVyU3RhdGU6IFRyYW5zZmVyU3RhdGU7XG4gIG9wdGlvbnM/OiBvYmplY3Q7XG4gIG1ha2VTdGF0ZUtleTxUID0gdm9pZD4oa2V5OiBzdHJpbmcpOiBTdGF0ZUtleTxUPjtcbn07XG5cbnR5cGUgUmVxdWVzdE9wdGlvbnMgPSB7XG4gIC8vIEFsZ29saWEgb25seSB1c2VzIEdFVCBhbmQgUE9TVCBtZXRob2RzIGZvciBzZWFyY2hpbmcuXG4gIC8vIFNlZTogaHR0cHM6Ly93d3cuYWxnb2xpYS5jb20vZG9jL3Jlc3QtYXBpL3NlYXJjaC8jc2VhcmNoLWVuZHBvaW50c1xuICBtZXRob2Q6ICdHRVQnIHwgJ1BPU1QnO1xuICBoZWFkZXJzOiBzdHJpbmc7XG4gIGJvZHk6IHN0cmluZztcbn07XG5cbmNvbnN0IGFsZ29saWFzZWFyY2ggPSBhbGdvbGlhc2VhcmNoUHJveHkuZGVmYXVsdCB8fCBhbGdvbGlhc2VhcmNoUHJveHk7XG5jb25zdCBlbmNvZGUgPSBlbmNvZGVQcm94eS5kZWZhdWx0IHx8IGVuY29kZVByb3h5O1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU1NSU2VhcmNoQ2xpZW50KHtcbiAgYXBwSWQsXG4gIGFwaUtleSxcbiAgaHR0cENsaWVudCxcbiAgSHR0cEhlYWRlcnMsXG4gIHRyYW5zZmVyU3RhdGUsXG4gIG1ha2VTdGF0ZUtleSxcbiAgb3B0aW9ucyA9IHt9LFxufTogU1NSU2VhcmNoQ2xpZW50T3B0aW9ucykge1xuICBjb25zdCBzZWFyY2hDbGllbnQgPSBhbGdvbGlhc2VhcmNoKGFwcElkLCBhcGlLZXksIG9wdGlvbnMpO1xuXG4gIHNlYXJjaENsaWVudC5hZGRBbGdvbGlhQWdlbnQoYGFuZ3VsYXIgKCR7QW5ndWxhclZlcnNpb24uZnVsbH0pYCk7XG4gIHNlYXJjaENsaWVudC5hZGRBbGdvbGlhQWdlbnQoYGFuZ3VsYXItaW5zdGFudHNlYXJjaCAoJHtWRVJTSU9OfSlgKTtcbiAgc2VhcmNoQ2xpZW50LmFkZEFsZ29saWFBZ2VudChgYW5ndWxhci1pbnN0YW50c2VhcmNoLXNlcnZlciAoJHtWRVJTSU9OfSlgKTtcblxuICAoc2VhcmNoQ2xpZW50IGFzIGFueSkuX3JlcXVlc3QgPSAoXG4gICAgcmF3VXJsOiBzdHJpbmcsXG4gICAgb3B0aW9uczogUmVxdWVzdE9wdGlvbnNcbiAgKSA9PiB7XG4gICAgbGV0IGhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKTtcblxuICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldChcbiAgICAgICdjb250ZW50LXR5cGUnLFxuICAgICAgb3B0aW9ucy5tZXRob2QgPT09ICdQT1NUJ1xuICAgICAgICA/ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG4gICAgICAgIDogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgKTtcblxuICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnYWNjZXB0JywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcblxuICAgIGNvbnN0IHVybCA9XG4gICAgICByYXdVcmwgKyAocmF3VXJsLmluY2x1ZGVzKCc/JykgPyAnJicgOiAnPycpICsgZW5jb2RlKG9wdGlvbnMuaGVhZGVycyk7XG5cbiAgICBjb25zdCB0cmFuc2ZlclN0YXRlS2V5ID0gbWFrZVN0YXRlS2V5KGBuZ2Fpcygke29wdGlvbnMuYm9keX0pYCk7XG5cbiAgICBpZiAodHJhbnNmZXJTdGF0ZS5oYXNLZXkodHJhbnNmZXJTdGF0ZUtleSkpIHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gSlNPTi5wYXJzZShcbiAgICAgICAgdHJhbnNmZXJTdGF0ZS5nZXQodHJhbnNmZXJTdGF0ZUtleSwgSlNPTi5zdHJpbmdpZnkoe30pKVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgIHN0YXR1c0NvZGU6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgYm9keTogcmVzcG9uc2UuYm9keSxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBodHRwQ2xpZW50XG4gICAgICAgIC5yZXF1ZXN0KG9wdGlvbnMubWV0aG9kLCB1cmwsIHtcbiAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgIGJvZHk6IG9wdGlvbnMuYm9keSxcbiAgICAgICAgICBvYnNlcnZlOiAncmVzcG9uc2UnLFxuICAgICAgICB9KVxuICAgICAgICAuc3Vic2NyaWJlKFxuICAgICAgICAgIHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIHRyYW5zZmVyU3RhdGUuc2V0KHRyYW5zZmVyU3RhdGVLZXksIEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlKSk7XG5cbiAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICBzdGF0dXNDb2RlOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgICAgICAgIGJvZHk6IHJlc3BvbnNlLmJvZHksXG4gICAgICAgICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlc3BvbnNlID0+XG4gICAgICAgICAgICByZWplY3Qoe1xuICAgICAgICAgICAgICBzdGF0dXNDb2RlOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgICAgICAgIGJvZHk6IHJlc3BvbnNlLmJvZHksXG4gICAgICAgICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBzZWFyY2hDbGllbnQ7XG59XG4iXX0=