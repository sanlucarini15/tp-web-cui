/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ContentChild, TemplateRef, Inject, forwardRef, Input, } from '@angular/core';
import { connectQueryRules } from 'instantsearch.js/es/connectors';
import { BaseWidget } from '../base-widget';
import { NgAisInstantSearch } from '../instantsearch/instantsearch';
var NgAisQueryRuleCustomData = /** @class */ (function (_super) {
    tslib_1.__extends(NgAisQueryRuleCustomData, _super);
    function NgAisQueryRuleCustomData(instantSearchParent) {
        var _this = _super.call(this, 'QueryRuleCustomData') || this;
        _this.instantSearchParent = instantSearchParent;
        _this.state = {
            items: [],
        };
        return _this;
    }
    Object.defineProperty(NgAisQueryRuleCustomData.prototype, "templateContext", {
        get: /**
         * @return {?}
         */
        function () {
            return {
                items: this.state.items,
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgAisQueryRuleCustomData.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.createWidget(connectQueryRules, {
            transformItems: this.transformItems,
        });
        _super.prototype.ngOnInit.call(this);
    };
    NgAisQueryRuleCustomData.decorators = [
        { type: Component, args: [{
                    selector: 'ais-query-rule-custom-data',
                    template: "\n    <div [class]=\"cx()\">\n      <ng-container *ngTemplateOutlet=\"template; context: templateContext\">\n      </ng-container>\n\n      <div *ngIf=\"!template\">\n        <div *ngFor=\"let item of state.items\">\n          <pre>{{ item | json }}</pre>\n        </div>\n      </div>\n    </div>\n  "
                }] }
    ];
    /** @nocollapse */
    NgAisQueryRuleCustomData.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return NgAisInstantSearch; })),] }] }
    ]; };
    NgAisQueryRuleCustomData.propDecorators = {
        template: [{ type: ContentChild, args: [TemplateRef,] }],
        transformItems: [{ type: Input }]
    };
    return NgAisQueryRuleCustomData;
}(BaseWidget));
export { NgAisQueryRuleCustomData };
if (false) {
    /** @type {?} */
    NgAisQueryRuleCustomData.prototype.template;
    /** @type {?} */
    NgAisQueryRuleCustomData.prototype.transformItems;
    /** @type {?} */
    NgAisQueryRuleCustomData.prototype.state;
    /** @type {?} */
    NgAisQueryRuleCustomData.prototype.instantSearchParent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnktcnVsZS1jdXN0b20tZGF0YS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC8iLCJzb3VyY2VzIjpbInF1ZXJ5LXJ1bGUtY3VzdG9tLWRhdGEvcXVlcnktcnVsZS1jdXN0b20tZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsWUFBWSxFQUNaLFdBQVcsRUFDWCxNQUFNLEVBQ04sVUFBVSxFQUNWLEtBQUssR0FDTixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUVuRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFcEU7SUFlOEMsb0RBQVU7SUFldEQsa0NBRVMsbUJBQXdCO1FBRmpDLFlBSUUsa0JBQU0scUJBQXFCLENBQUMsU0FDN0I7UUFIUSx5QkFBbUIsR0FBbkIsbUJBQW1CLENBQUs7UUFaMUIsV0FBSyxHQUFHO1lBQ2IsS0FBSyxFQUFFLEVBQUU7U0FDVixDQUFDOztJQWFGLENBQUM7SUFYRCxzQkFBSSxxREFBZTs7OztRQUFuQjtZQUNFLE9BQU87Z0JBQ0wsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSzthQUN4QixDQUFDO1FBQ0osQ0FBQzs7O09BQUE7Ozs7SUFTTSwyQ0FBUTs7O0lBQWY7UUFDRSxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixFQUFFO1lBQ25DLGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYztTQUNwQyxDQUFDLENBQUM7UUFFSCxpQkFBTSxRQUFRLFdBQUUsQ0FBQztJQUNuQixDQUFDOztnQkEzQ0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSw0QkFBNEI7b0JBQ3RDLFFBQVEsRUFBRSwrU0FXVDtpQkFDRjs7OztnREFpQkksTUFBTSxTQUFDLFVBQVU7Ozt3QkFBQyxjQUFNLE9BQUEsa0JBQWtCLEVBQWxCLENBQWtCLEVBQUM7OzsyQkFmN0MsWUFBWSxTQUFDLFdBQVc7aUNBRXhCLEtBQUs7O0lBMEJSLCtCQUFDO0NBQUEsQUE1Q0QsQ0FlOEMsVUFBVSxHQTZCdkQ7U0E3Qlksd0JBQXdCOzs7SUFDbkMsNENBQWdEOztJQUVoRCxrREFBeUQ7O0lBRXpELHlDQUVFOztJQVNBLHVEQUMrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkLFxuICBUZW1wbGF0ZVJlZixcbiAgSW5qZWN0LFxuICBmb3J3YXJkUmVmLFxuICBJbnB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvbm5lY3RRdWVyeVJ1bGVzIH0gZnJvbSAnaW5zdGFudHNlYXJjaC5qcy9lcy9jb25uZWN0b3JzJztcblxuaW1wb3J0IHsgQmFzZVdpZGdldCB9IGZyb20gJy4uL2Jhc2Utd2lkZ2V0JztcbmltcG9ydCB7IE5nQWlzSW5zdGFudFNlYXJjaCB9IGZyb20gJy4uL2luc3RhbnRzZWFyY2gvaW5zdGFudHNlYXJjaCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Fpcy1xdWVyeS1ydWxlLWN1c3RvbS1kYXRhJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IFtjbGFzc109XCJjeCgpXCI+XG4gICAgICA8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwidGVtcGxhdGU7IGNvbnRleHQ6IHRlbXBsYXRlQ29udGV4dFwiPlxuICAgICAgPC9uZy1jb250YWluZXI+XG5cbiAgICAgIDxkaXYgKm5nSWY9XCIhdGVtcGxhdGVcIj5cbiAgICAgICAgPGRpdiAqbmdGb3I9XCJsZXQgaXRlbSBvZiBzdGF0ZS5pdGVtc1wiPlxuICAgICAgICAgIDxwcmU+e3sgaXRlbSB8IGpzb24gfX08L3ByZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgYCxcbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNRdWVyeVJ1bGVDdXN0b21EYXRhIGV4dGVuZHMgQmFzZVdpZGdldCB7XG4gIEBDb250ZW50Q2hpbGQoVGVtcGxhdGVSZWYpIHB1YmxpYyB0ZW1wbGF0ZTogYW55O1xuXG4gIEBJbnB1dCgpIHB1YmxpYyB0cmFuc2Zvcm1JdGVtcz86IChpdGVtczogYW55W10pID0+IGFueVtdO1xuXG4gIHB1YmxpYyBzdGF0ZSA9IHtcbiAgICBpdGVtczogW10sXG4gIH07XG5cbiAgZ2V0IHRlbXBsYXRlQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXRlbXM6IHRoaXMuc3RhdGUuaXRlbXMsXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBOZ0Fpc0luc3RhbnRTZWFyY2gpKVxuICAgIHB1YmxpYyBpbnN0YW50U2VhcmNoUGFyZW50OiBhbnlcbiAgKSB7XG4gICAgc3VwZXIoJ1F1ZXJ5UnVsZUN1c3RvbURhdGEnKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmNyZWF0ZVdpZGdldChjb25uZWN0UXVlcnlSdWxlcywge1xuICAgICAgdHJhbnNmb3JtSXRlbXM6IHRoaXMudHJhbnNmb3JtSXRlbXMsXG4gICAgfSk7XG5cbiAgICBzdXBlci5uZ09uSW5pdCgpO1xuICB9XG59XG4iXX0=