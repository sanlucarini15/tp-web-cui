/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, Inject, PLATFORM_ID, VERSION as AngularVersion, } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import * as algoliasearchProxy from 'algoliasearch/lite';
import instantsearch from 'instantsearch.js/es';
import { VERSION } from '../version';
/** @type {?} */
var algoliasearch = algoliasearchProxy.default || algoliasearchProxy;
/**
 * @record
 */
export function SearchRequestParameters() { }
if (false) {
    /** @type {?} */
    SearchRequestParameters.prototype.query;
}
/**
 * @record
 */
export function SearchForFacetValuesRequestParameters() { }
if (false) {
    /** @type {?} */
    SearchForFacetValuesRequestParameters.prototype.facetQuery;
    /** @type {?} */
    SearchForFacetValuesRequestParameters.prototype.facetName;
}
var InstantSearchInstance = /** @class */ (function () {
    function InstantSearchInstance() {
    }
    return InstantSearchInstance;
}());
export { InstantSearchInstance };
if (false) {
    /** @type {?} */
    InstantSearchInstance.prototype.start;
    /** @type {?} */
    InstantSearchInstance.prototype.addWidget;
    /** @type {?} */
    InstantSearchInstance.prototype.addWidgets;
    /** @type {?} */
    InstantSearchInstance.prototype.removeWidget;
    /** @type {?} */
    InstantSearchInstance.prototype.removeWidgets;
    /** @type {?} */
    InstantSearchInstance.prototype.on;
    /** @type {?} */
    InstantSearchInstance.prototype.removeListener;
    /** @type {?} */
    InstantSearchInstance.prototype.helper;
    /** @type {?} */
    InstantSearchInstance.prototype.refresh;
    /** @type {?} */
    InstantSearchInstance.prototype.dispose;
}
var NgAisInstantSearch = /** @class */ (function () {
    function NgAisInstantSearch(platformId) {
        var _this = this;
        this.platformId = platformId;
        this.instanceName = 'default';
        this.change = new EventEmitter();
        this.onRender = (/**
         * @return {?}
         */
        function () {
            _this.change.emit({
                results: _this.instantSearchInstance.helper.lastResults,
                state: _this.instantSearchInstance.helper.state,
            });
        });
    }
    /**
     * @return {?}
     */
    NgAisInstantSearch.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.createInstantSearchInstance(this.config);
    };
    /**
     * @return {?}
     */
    NgAisInstantSearch.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.instantSearchInstance.start();
    };
    /**
     * @return {?}
     */
    NgAisInstantSearch.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.instantSearchInstance.removeListener('render', this.onRender);
        this.instantSearchInstance.dispose();
    };
    /**
     * @param {?} config
     * @return {?}
     */
    NgAisInstantSearch.prototype.createInstantSearchInstance = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        // add default searchParameters with highlighting config
        if (!config.searchParameters)
            config.searchParameters = {};
        Object.assign(config.searchParameters, {
            highlightPreTag: '__ais-highlight__',
            highlightPostTag: '__/ais-highlight__',
        });
        // remove URLSync widget if on SSR
        if (!isPlatformBrowser(this.platformId)) {
            if (typeof config.urlSync !== 'undefined')
                delete config.urlSync;
            if (typeof config.routing !== 'undefined')
                delete config.routing;
        }
        if (typeof config.searchClient.addAlgoliaAgent === 'function') {
            config.searchClient.addAlgoliaAgent("angular (" + AngularVersion.full + ")");
            config.searchClient.addAlgoliaAgent("angular-instantsearch (" + VERSION + ")");
        }
        this.instantSearchInstance = instantsearch(config);
        this.instantSearchInstance.on('render', this.onRender);
    };
    /**
     * @param {?} widget
     * @return {?}
     */
    NgAisInstantSearch.prototype.addWidget = /**
     * @param {?} widget
     * @return {?}
     */
    function (widget) {
        this.instantSearchInstance.addWidget(widget);
    };
    /**
     * @param {?} widget
     * @return {?}
     */
    NgAisInstantSearch.prototype.removeWidget = /**
     * @param {?} widget
     * @return {?}
     */
    function (widget) {
        this.instantSearchInstance.removeWidget(widget);
    };
    /**
     * @return {?}
     */
    NgAisInstantSearch.prototype.refresh = /**
     * @return {?}
     */
    function () {
        this.instantSearchInstance.refresh();
    };
    NgAisInstantSearch.decorators = [
        { type: Component, args: [{
                    selector: 'ais-instantsearch',
                    template: "<ng-content></ng-content>"
                }] }
    ];
    /** @nocollapse */
    NgAisInstantSearch.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    NgAisInstantSearch.propDecorators = {
        config: [{ type: Input }],
        instanceName: [{ type: Input }],
        change: [{ type: Output }]
    };
    return NgAisInstantSearch;
}());
export { NgAisInstantSearch };
if (false) {
    /** @type {?} */
    NgAisInstantSearch.prototype.config;
    /** @type {?} */
    NgAisInstantSearch.prototype.instanceName;
    /** @type {?} */
    NgAisInstantSearch.prototype.change;
    /** @type {?} */
    NgAisInstantSearch.prototype.instantSearchInstance;
    /** @type {?} */
    NgAisInstantSearch.prototype.onRender;
    /**
     * @type {?}
     * @private
     */
    NgAisInstantSearch.prototype.platformId;
}
//# sourceMappingURL=data:application/json;base64,