/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Inject, forwardRef } from '@angular/core';
import { connectMenu } from 'instantsearch.js/es/connectors';
import { BaseWidget } from '../base-widget';
import { NgAisInstantSearch, } from '../instantsearch/instantsearch';
import { noop } from '../utils';
var NgAisMenu = /** @class */ (function (_super) {
    tslib_1.__extends(NgAisMenu, _super);
    function NgAisMenu(instantSearchParent) {
        var _this = _super.call(this, 'Menu') || this;
        _this.instantSearchParent = instantSearchParent;
        // rendering options
        _this.showMoreLabel = 'Show more';
        _this.showLessLabel = 'Show less';
        _this.state = {
            items: [],
            refine: noop,
            createURL: noop,
            isShowingMore: false,
            canToggleShowMore: false,
            toggleShowMore: noop,
        };
        return _this;
    }
    Object.defineProperty(NgAisMenu.prototype, "isHidden", {
        get: /**
         * @return {?}
         */
        function () {
            return this.state.items.length === 0 && this.autoHideContainer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgAisMenu.prototype, "showMoreClass", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var className = this.cx('showMore');
            if (!this.state.canToggleShowMore) {
                className = className + " " + this.cx('showMore', 'disabled');
            }
            return className;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgAisMenu.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.createWidget(connectMenu, {
            attribute: this.attribute,
            showMore: this.showMore,
            limit: this.limit,
            showMoreLimit: this.showMoreLimit,
            sortBy: this.sortBy,
            transformItems: this.transformItems,
        });
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * @param {?} event
     * @param {?} value
     * @return {?}
     */
    NgAisMenu.prototype.handleClick = /**
     * @param {?} event
     * @param {?} value
     * @return {?}
     */
    function (event, value) {
        event.preventDefault();
        event.stopPropagation();
        this.state.refine(value);
    };
    NgAisMenu.decorators = [
        { type: Component, args: [{
                    selector: 'ais-menu',
                    template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <ul [class]=\"cx('list')\">\n        <li\n          [class]=\"getItemClass(item)\"\n          *ngFor=\"let item of state.items\"\n          (click)=\"handleClick($event, item.value)\"\n        >\n          <a\n            href=\"{{state.createURL(item.value)}}\"\n            [class]=\"cx('link')\"\n            (click)=\"handleClick($event, item.value)\"\n          >\n            <span [class]=\"cx('label')\">{{item.label}}</span>\n            <span [class]=\"cx('count')\">{{item.count}}</span>\n          </a>\n        </li>\n      </ul>\n\n      <button\n        *ngIf=\"showMore\"\n        (click)=\"state.toggleShowMore()\"\n        [class]=\"showMoreClass\"\n        [disabled]=\"!state.canToggleShowMore\"\n      >\n        {{state.isShowingMore ? showLessLabel : showMoreLabel}}\n      </button>\n    </div>\n  "
                }] }
    ];
    /** @nocollapse */
    NgAisMenu.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return NgAisInstantSearch; })),] }] }
    ]; };
    NgAisMenu.propDecorators = {
        showMoreLabel: [{ type: Input }],
        showLessLabel: [{ type: Input }],
        attribute: [{ type: Input }],
        showMore: [{ type: Input }],
        limit: [{ type: Input }],
        showMoreLimit: [{ type: Input }],
        sortBy: [{ type: Input }],
        transformItems: [{ type: Input }]
    };
    return NgAisMenu;
}(BaseWidget));
export { NgAisMenu };
if (false) {
    /** @type {?} */
    NgAisMenu.prototype.showMoreLabel;
    /** @type {?} */
    NgAisMenu.prototype.showLessLabel;
    /** @type {?} */
    NgAisMenu.prototype.attribute;
    /** @type {?} */
    NgAisMenu.prototype.showMore;
    /** @type {?} */
    NgAisMenu.prototype.limit;
    /** @type {?} */
    NgAisMenu.prototype.showMoreLimit;
    /** @type {?} */
    NgAisMenu.prototype.sortBy;
    /** @type {?} */
    NgAisMenu.prototype.transformItems;
    /** @type {?} */
    NgAisMenu.prototype.state;
    /** @type {?} */
    NgAisMenu.prototype.instantSearchParent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC8iLCJzb3VyY2VzIjpbIm1lbnUvbWVudS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzdELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQ0wsa0JBQWtCLEdBRW5CLE1BQU0sZ0NBQWdDLENBQUM7QUFDeEMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFVBQVUsQ0FBQztBQWtCaEM7SUFtQytCLHFDQUFVO0lBd0N2QyxtQkFFUyxtQkFBd0I7UUFGakMsWUFJRSxrQkFBTSxNQUFNLENBQUMsU0FDZDtRQUhRLHlCQUFtQixHQUFuQixtQkFBbUIsQ0FBSzs7UUF4Q2pCLG1CQUFhLEdBQVcsV0FBVyxDQUFDO1FBQ3BDLG1CQUFhLEdBQVcsV0FBVyxDQUFDO1FBYzdDLFdBQUssR0FBYztZQUN4QixLQUFLLEVBQUUsRUFBRTtZQUNULE1BQU0sRUFBRSxJQUFJO1lBQ1osU0FBUyxFQUFFLElBQUk7WUFDZixhQUFhLEVBQUUsS0FBSztZQUNwQixpQkFBaUIsRUFBRSxLQUFLO1lBQ3hCLGNBQWMsRUFBRSxJQUFJO1NBQ3JCLENBQUM7O0lBcUJGLENBQUM7SUFuQkQsc0JBQUksK0JBQVE7Ozs7UUFBWjtZQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUM7UUFDakUsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSxvQ0FBYTs7OztRQUFqQjs7Z0JBQ00sU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDO1lBRW5DLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixFQUFFO2dCQUNqQyxTQUFTLEdBQU0sU0FBUyxTQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBRyxDQUFDO2FBQy9EO1lBRUQsT0FBTyxTQUFTLENBQUM7UUFDbkIsQ0FBQzs7O09BQUE7Ozs7SUFTTSw0QkFBUTs7O0lBQWY7UUFDRSxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRTtZQUM3QixTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7WUFDekIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWE7WUFDakMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYztTQUNwQyxDQUFDLENBQUM7UUFFSCxpQkFBTSxRQUFRLFdBQUUsQ0FBQztJQUNuQixDQUFDOzs7Ozs7SUFFRCwrQkFBVzs7Ozs7SUFBWCxVQUFZLEtBQWlCLEVBQUUsS0FBYTtRQUMxQyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBRXhCLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNCLENBQUM7O2dCQXBHRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLFVBQVU7b0JBQ3BCLFFBQVEsRUFBRSxvNEJBK0JUO2lCQUNGOzs7O2dEQTBDSSxNQUFNLFNBQUMsVUFBVTs7O3dCQUFDLGNBQU0sT0FBQSxrQkFBa0IsRUFBbEIsQ0FBa0IsRUFBQzs7O2dDQXZDN0MsS0FBSztnQ0FDTCxLQUFLOzRCQUdMLEtBQUs7MkJBQ0wsS0FBSzt3QkFDTCxLQUFLO2dDQUNMLEtBQUs7eUJBQ0wsS0FBSztpQ0FJTCxLQUFLOztJQW9EUixnQkFBQztDQUFBLEFBckdELENBbUMrQixVQUFVLEdBa0V4QztTQWxFWSxTQUFTOzs7SUFFcEIsa0NBQW9EOztJQUNwRCxrQ0FBb0Q7O0lBR3BELDhCQUFrQzs7SUFDbEMsNkJBQW1DOztJQUNuQywwQkFBK0I7O0lBQy9CLGtDQUF1Qzs7SUFDdkMsMkJBRzJDOztJQUMzQyxtQ0FDdUU7O0lBRXZFLDBCQU9FOztJQWlCQSx3Q0FDK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBJbmplY3QsIGZvcndhcmRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29ubmVjdE1lbnUgfSBmcm9tICdpbnN0YW50c2VhcmNoLmpzL2VzL2Nvbm5lY3RvcnMnO1xuaW1wb3J0IHsgQmFzZVdpZGdldCB9IGZyb20gJy4uL2Jhc2Utd2lkZ2V0JztcbmltcG9ydCB7XG4gIE5nQWlzSW5zdGFudFNlYXJjaCxcbiAgRmFjZXRTb3J0QnlTdHJpbmdPcHRpb25zLFxufSBmcm9tICcuLi9pbnN0YW50c2VhcmNoL2luc3RhbnRzZWFyY2gnO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IHR5cGUgTWVudUl0ZW0gPSB7XG4gIHZhbHVlOiBzdHJpbmc7XG4gIGxhYmVsOiBzdHJpbmc7XG4gIGNvdW50OiBudW1iZXI7XG4gIGlzUmVmaW5lZDogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCB0eXBlIE1lbnVTdGF0ZSA9IHtcbiAgaXRlbXM6IE1lbnVJdGVtW107XG4gIHJlZmluZTogRnVuY3Rpb247XG4gIGNyZWF0ZVVSTDogRnVuY3Rpb247XG4gIGlzU2hvd2luZ01vcmU6IGJvb2xlYW47XG4gIGNhblRvZ2dsZVNob3dNb3JlOiBib29sZWFuO1xuICB0b2dnbGVTaG93TW9yZTogRnVuY3Rpb247XG59O1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhaXMtbWVudScsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdlxuICAgICAgW2NsYXNzXT1cImN4KClcIlxuICAgICAgKm5nSWY9XCIhaXNIaWRkZW5cIlxuICAgID5cbiAgICAgIDx1bCBbY2xhc3NdPVwiY3goJ2xpc3QnKVwiPlxuICAgICAgICA8bGlcbiAgICAgICAgICBbY2xhc3NdPVwiZ2V0SXRlbUNsYXNzKGl0ZW0pXCJcbiAgICAgICAgICAqbmdGb3I9XCJsZXQgaXRlbSBvZiBzdGF0ZS5pdGVtc1wiXG4gICAgICAgICAgKGNsaWNrKT1cImhhbmRsZUNsaWNrKCRldmVudCwgaXRlbS52YWx1ZSlcIlxuICAgICAgICA+XG4gICAgICAgICAgPGFcbiAgICAgICAgICAgIGhyZWY9XCJ7e3N0YXRlLmNyZWF0ZVVSTChpdGVtLnZhbHVlKX19XCJcbiAgICAgICAgICAgIFtjbGFzc109XCJjeCgnbGluaycpXCJcbiAgICAgICAgICAgIChjbGljayk9XCJoYW5kbGVDbGljaygkZXZlbnQsIGl0ZW0udmFsdWUpXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8c3BhbiBbY2xhc3NdPVwiY3goJ2xhYmVsJylcIj57e2l0ZW0ubGFiZWx9fTwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIFtjbGFzc109XCJjeCgnY291bnQnKVwiPnt7aXRlbS5jb3VudH19PC9zcGFuPlxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9saT5cbiAgICAgIDwvdWw+XG5cbiAgICAgIDxidXR0b25cbiAgICAgICAgKm5nSWY9XCJzaG93TW9yZVwiXG4gICAgICAgIChjbGljayk9XCJzdGF0ZS50b2dnbGVTaG93TW9yZSgpXCJcbiAgICAgICAgW2NsYXNzXT1cInNob3dNb3JlQ2xhc3NcIlxuICAgICAgICBbZGlzYWJsZWRdPVwiIXN0YXRlLmNhblRvZ2dsZVNob3dNb3JlXCJcbiAgICAgID5cbiAgICAgICAge3tzdGF0ZS5pc1Nob3dpbmdNb3JlID8gc2hvd0xlc3NMYWJlbCA6IHNob3dNb3JlTGFiZWx9fVxuICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG4gIGAsXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzTWVudSBleHRlbmRzIEJhc2VXaWRnZXQge1xuICAvLyByZW5kZXJpbmcgb3B0aW9uc1xuICBASW5wdXQoKSBwdWJsaWMgc2hvd01vcmVMYWJlbDogc3RyaW5nID0gJ1Nob3cgbW9yZSc7XG4gIEBJbnB1dCgpIHB1YmxpYyBzaG93TGVzc0xhYmVsOiBzdHJpbmcgPSAnU2hvdyBsZXNzJztcblxuICAvLyBpbnN0YW5jZSBvcHRpb25zXG4gIEBJbnB1dCgpIHB1YmxpYyBhdHRyaWJ1dGU6IHN0cmluZztcbiAgQElucHV0KCkgcHVibGljIHNob3dNb3JlPzogYm9vbGVhbjtcbiAgQElucHV0KCkgcHVibGljIGxpbWl0PzogbnVtYmVyO1xuICBASW5wdXQoKSBwdWJsaWMgc2hvd01vcmVMaW1pdD86IG51bWJlcjtcbiAgQElucHV0KClcbiAgcHVibGljIHNvcnRCeT86XG4gICAgfCBGYWNldFNvcnRCeVN0cmluZ09wdGlvbnNbXVxuICAgIHwgKChhOiBNZW51SXRlbSwgYjogTWVudUl0ZW0pID0+IG51bWJlcik7XG4gIEBJbnB1dCgpXG4gIHB1YmxpYyB0cmFuc2Zvcm1JdGVtcz86IDxVIGV4dGVuZHMgTWVudUl0ZW0+KGl0ZW1zOiBNZW51SXRlbVtdKSA9PiBVW107XG5cbiAgcHVibGljIHN0YXRlOiBNZW51U3RhdGUgPSB7XG4gICAgaXRlbXM6IFtdLFxuICAgIHJlZmluZTogbm9vcCxcbiAgICBjcmVhdGVVUkw6IG5vb3AsXG4gICAgaXNTaG93aW5nTW9yZTogZmFsc2UsXG4gICAgY2FuVG9nZ2xlU2hvd01vcmU6IGZhbHNlLFxuICAgIHRvZ2dsZVNob3dNb3JlOiBub29wLFxuICB9O1xuXG4gIGdldCBpc0hpZGRlbigpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5pdGVtcy5sZW5ndGggPT09IDAgJiYgdGhpcy5hdXRvSGlkZUNvbnRhaW5lcjtcbiAgfVxuXG4gIGdldCBzaG93TW9yZUNsYXNzKCkge1xuICAgIGxldCBjbGFzc05hbWUgPSB0aGlzLmN4KCdzaG93TW9yZScpO1xuXG4gICAgaWYgKCF0aGlzLnN0YXRlLmNhblRvZ2dsZVNob3dNb3JlKSB7XG4gICAgICBjbGFzc05hbWUgPSBgJHtjbGFzc05hbWV9ICR7dGhpcy5jeCgnc2hvd01vcmUnLCAnZGlzYWJsZWQnKX1gO1xuICAgIH1cblxuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTmdBaXNJbnN0YW50U2VhcmNoKSlcbiAgICBwdWJsaWMgaW5zdGFudFNlYXJjaFBhcmVudDogYW55XG4gICkge1xuICAgIHN1cGVyKCdNZW51Jyk7XG4gIH1cblxuICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5jcmVhdGVXaWRnZXQoY29ubmVjdE1lbnUsIHtcbiAgICAgIGF0dHJpYnV0ZTogdGhpcy5hdHRyaWJ1dGUsXG4gICAgICBzaG93TW9yZTogdGhpcy5zaG93TW9yZSxcbiAgICAgIGxpbWl0OiB0aGlzLmxpbWl0LFxuICAgICAgc2hvd01vcmVMaW1pdDogdGhpcy5zaG93TW9yZUxpbWl0LFxuICAgICAgc29ydEJ5OiB0aGlzLnNvcnRCeSxcbiAgICAgIHRyYW5zZm9ybUl0ZW1zOiB0aGlzLnRyYW5zZm9ybUl0ZW1zLFxuICAgIH0pO1xuXG4gICAgc3VwZXIubmdPbkluaXQoKTtcbiAgfVxuXG4gIGhhbmRsZUNsaWNrKGV2ZW50OiBNb3VzZUV2ZW50LCB2YWx1ZTogc3RyaW5nKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIHRoaXMuc3RhdGUucmVmaW5lKHZhbHVlKTtcbiAgfVxufVxuIl19