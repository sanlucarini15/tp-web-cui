/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, Inject, forwardRef } from '@angular/core';
import { connectRange } from 'instantsearch.js/es/connectors';
import * as noUiSlider from 'nouislider';
import { BaseWidget } from '../base-widget';
import { NgAisInstantSearch } from '../instantsearch/instantsearch';
import { parseNumberInput, noop } from '../utils';
var NgAisRangeSlider = /** @class */ (function (_super) {
    tslib_1.__extends(NgAisRangeSlider, _super);
    function NgAisRangeSlider(instantSearchParent) {
        var _this = _super.call(this, 'RangeSlider') || this;
        _this.instantSearchParent = instantSearchParent;
        // rendering options
        _this.pips = true;
        _this.tooltips = true;
        _this.state = {
            range: { min: 0, max: 1 },
            refine: noop,
            start: [0, 1],
        };
        _this.updateState = (/**
         * @param {?} state
         * @param {?} isFirstRendering
         * @return {?}
         */
        function (state, isFirstRendering) {
            if (isFirstRendering) {
                // create slider
                /** @type {?} */
                var config = {
                    animate: false,
                    behaviour: 'snap',
                    connect: true,
                    range: { min: 0, max: 1 },
                    start: [0, 1],
                    step: _this.step,
                    tooltips: _this.tooltips && [
                        { to: _this.formatTooltip },
                        { to: _this.formatTooltip },
                    ],
                };
                if (_this.pips === true || typeof _this.pips === 'undefined') {
                    Object.assign(config, {
                        pips: {
                            density: 3,
                            mode: 'positions',
                            stepped: true,
                            values: [0, 50, 100],
                        },
                    });
                }
                else if (_this.pips !== undefined) {
                    Object.assign(config, { pips: _this.pips });
                }
                _this.slider = noUiSlider.create(_this.sliderContainer.nativeElement, config);
                // register listen events
                _this.sliderContainer.nativeElement.noUiSlider.on('change', _this.handleChange);
            }
            // update component inner state
            _this.state = state;
            // update the slider state
            var _a = state.range, min = _a.min, max = _a.max, start = state.start;
            /** @type {?} */
            var disabled = min === max;
            /** @type {?} */
            var range = disabled ? { min: min, max: max + 0.0001 } : { min: min, max: max };
            _this.slider.updateOptions({ disabled: disabled, range: range, start: start });
        });
        _this.handleChange = (/**
         * @param {?} values
         * @return {?}
         */
        function (values) {
            _this.state.refine(values);
        });
        _this.formatTooltip = (/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return value.toFixed(parseNumberInput(_this.precision));
        });
        return _this;
    }
    Object.defineProperty(NgAisRangeSlider.prototype, "step", {
        get: /**
         * @return {?}
         */
        function () {
            // compute step from the precision value
            /** @type {?} */
            var precision = parseNumberInput(this.precision) || 2;
            return 1 / Math.pow(10, precision);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgAisRangeSlider.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.createWidget(connectRange, {
            attribute: this.attribute,
            max: parseNumberInput(this.max),
            min: parseNumberInput(this.min),
            precision: parseNumberInput(this.precision),
        });
        _super.prototype.ngOnInit.call(this);
    };
    NgAisRangeSlider.decorators = [
        { type: Component, args: [{
                    selector: 'ais-range-slider',
                    template: "\n    <div [class]=\"cx()\">\n      <div [class]=\"cx('body')\">\n        <div #sliderContainer></div>\n      </div>\n    </div>\n  "
                }] }
    ];
    /** @nocollapse */
    NgAisRangeSlider.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return NgAisInstantSearch; })),] }] }
    ]; };
    NgAisRangeSlider.propDecorators = {
        sliderContainer: [{ type: ViewChild, args: ['sliderContainer',] }],
        pips: [{ type: Input }],
        tooltips: [{ type: Input }],
        attribute: [{ type: Input }],
        min: [{ type: Input }],
        max: [{ type: Input }],
        precision: [{ type: Input }]
    };
    return NgAisRangeSlider;
}(BaseWidget));
export { NgAisRangeSlider };
if (false) {
    /** @type {?} */
    NgAisRangeSlider.prototype.sliderContainer;
    /** @type {?} */
    NgAisRangeSlider.prototype.pips;
    /** @type {?} */
    NgAisRangeSlider.prototype.tooltips;
    /** @type {?} */
    NgAisRangeSlider.prototype.attribute;
    /** @type {?} */
    NgAisRangeSlider.prototype.min;
    /** @type {?} */
    NgAisRangeSlider.prototype.max;
    /** @type {?} */
    NgAisRangeSlider.prototype.precision;
    /** @type {?} */
    NgAisRangeSlider.prototype.state;
    /**
     * @type {?}
     * @private
     */
    NgAisRangeSlider.prototype.slider;
    /** @type {?} */
    NgAisRangeSlider.prototype.updateState;
    /** @type {?} */
    NgAisRangeSlider.prototype.handleChange;
    /** @type {?} */
    NgAisRangeSlider.prototype.formatTooltip;
    /** @type {?} */
    NgAisRangeSlider.prototype.instantSearchParent;
}
//# sourceMappingURL=data:application/json;base64,