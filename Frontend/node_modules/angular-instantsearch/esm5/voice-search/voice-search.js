/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Inject, forwardRef, NgZone, ContentChild, TemplateRef, } from '@angular/core';
import { connectVoiceSearch } from 'instantsearch.js/es/connectors';
import { BaseWidget } from '../base-widget';
import { NgAisInstantSearch } from '../instantsearch/instantsearch';
import { noop } from '../utils';
var NgAisVoiceSearch = /** @class */ (function (_super) {
    tslib_1.__extends(NgAisVoiceSearch, _super);
    function NgAisVoiceSearch(instantSearchParent, zone) {
        var _this = _super.call(this, 'VoiceSearch') || this;
        _this.instantSearchParent = instantSearchParent;
        _this.zone = zone;
        _this.buttonTitle = 'Search by voice';
        _this.disabledButtonTitle = 'Search by voice (not supported on this browser)';
        _this.state = {
            isBrowserSupported: undefined,
            isListening: undefined,
            toggleListening: noop,
            voiceListeningState: {
                status: 'initial',
                transcript: '',
                isSpeechFinal: false,
                errorCode: undefined,
            },
            templateContext: {
                status: 'initial',
                errorCode: undefined,
                transcript: '',
                isSpeechFinal: false,
                isListening: false,
                isBrowserSupported: false,
            },
        };
        _this.handleClick = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            ((/** @type {?} */ (event.currentTarget))).blur();
            _this.state.toggleListening();
        });
        _this.isNotAllowedError = (/**
         * @return {?}
         */
        function () {
            return _this.state.voiceListeningState.status === 'error' &&
                _this.state.voiceListeningState.errorCode === 'not-allowed';
        });
        _this.updateState = (/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            _this.zone.run((/**
             * @return {?}
             */
            function () {
                _this.state = tslib_1.__assign({}, state, { templateContext: {
                        status: state.voiceListeningState.status,
                        errorCode: state.voiceListeningState.errorCode,
                        transcript: state.voiceListeningState.transcript,
                        isSpeechFinal: state.voiceListeningState.isSpeechFinal,
                        isListening: state.isListening,
                        isBrowserSupported: state.isBrowserSupported,
                    } });
            }));
        });
        return _this;
    }
    /**
     * @return {?}
     */
    NgAisVoiceSearch.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.createWidget(connectVoiceSearch, {
            searchAsYouSpeak: this.searchAsYouSpeak,
        });
        _super.prototype.ngOnInit.call(this);
    };
    NgAisVoiceSearch.decorators = [
        { type: Component, args: [{
                    selector: 'ais-voice-search',
                    template: "\n    <div [class]=\"cx()\">\n      <button\n        type=\"button\"\n        [class]=\"cx('button')\"\n        [title]=\"state.isBrowserSupported ? buttonTitle : disabledButtonTitle\"\n        [disabled]=\"!state.isBrowserSupported\"\n        (click)=\"handleClick($event)\"\n      >\n        <ng-container *ngTemplateOutlet=\"button ? button : defaultButton; context: state.templateContext\"></ng-container>\n      </button>\n      <div [class]=\"cx('status')\">\n        <ng-container *ngTemplateOutlet=\"status ? status : defaultStatus; context: state.templateContext\"></ng-container>\n      </div>\n    </div>\n\n    <ng-template #defaultButton let-status=\"status\" let-errorCode=\"errorCode\" let-isListening=\"isListening\">\n      <svg\n        xmlns='http://www.w3.org/2000/svg'\n        width='16'\n        height='16'\n        viewBox='0 0 24 24'\n        fill='none'\n        stroke='currentColor'\n        strokeWidth='2'\n        strokeLinecap='round'\n        strokeLinejoin='round'\n      >\n        <ng-container *ngIf=\"isNotAllowedError(); then errorSvgContent else normalSvgContent\">\n        </ng-container>\n        <ng-template #errorSvgContent>\n          <line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\"></line>\n          <path d=\"M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6\"></path>\n          <path d=\"M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23\"></path>\n          <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"23\"></line>\n          <line x1=\"8\" y1=\"23\" x2=\"16\" y2=\"23\"></line>\n        </ng-template>\n        <ng-template #normalSvgContent>\n          <path\n            d=\"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z\"\n            [attr.fill]=\"isListening ? 'currentColor' : 'none'\"\n          ></path>\n          <path d=\"M19 10v2a7 7 0 0 1-14 0v-2\"></path>\n          <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"23\"></line>\n          <line x1=\"8\" y1=\"23\" x2=\"16\" y2=\"23\"></line>\n        </ng-template>\n      </svg>\n    </ng-template>\n    <ng-template #defaultStatus let-transcript=\"transcript\">\n      <p>{{transcript}}</p>\n    </ng-template>\n  "
                }] }
    ];
    /** @nocollapse */
    NgAisVoiceSearch.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return NgAisInstantSearch; })),] }] },
        { type: NgZone }
    ]; };
    NgAisVoiceSearch.propDecorators = {
        button: [{ type: ContentChild, args: ['button',] }],
        status: [{ type: ContentChild, args: ['status',] }],
        searchAsYouSpeak: [{ type: Input }],
        buttonTitle: [{ type: Input }],
        disabledButtonTitle: [{ type: Input }]
    };
    return NgAisVoiceSearch;
}(BaseWidget));
export { NgAisVoiceSearch };
if (false) {
    /** @type {?} */
    NgAisVoiceSearch.prototype.button;
    /** @type {?} */
    NgAisVoiceSearch.prototype.status;
    /** @type {?} */
    NgAisVoiceSearch.prototype.searchAsYouSpeak;
    /** @type {?} */
    NgAisVoiceSearch.prototype.buttonTitle;
    /** @type {?} */
    NgAisVoiceSearch.prototype.disabledButtonTitle;
    /** @type {?} */
    NgAisVoiceSearch.prototype.state;
    /** @type {?} */
    NgAisVoiceSearch.prototype.handleClick;
    /** @type {?} */
    NgAisVoiceSearch.prototype.isNotAllowedError;
    /** @type {?} */
    NgAisVoiceSearch.prototype.updateState;
    /** @type {?} */
    NgAisVoiceSearch.prototype.instantSearchParent;
    /**
     * @type {?}
     * @private
     */
    NgAisVoiceSearch.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,