/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Inject, forwardRef } from '@angular/core';
import { connectHierarchicalMenu } from 'instantsearch.js/es/connectors';
import { BaseWidget } from '../base-widget';
import { NgAisInstantSearch, } from '../instantsearch/instantsearch';
import { parseNumberInput, noop } from '../utils';
var NgAisHierarchicalMenu = /** @class */ (function (_super) {
    tslib_1.__extends(NgAisHierarchicalMenu, _super);
    function NgAisHierarchicalMenu(instantSearchParent) {
        var _this = _super.call(this, 'HierarchicalMenu') || this;
        _this.instantSearchParent = instantSearchParent;
        _this.state = {
            createURL: (/**
             * @return {?}
             */
            function () { return '#'; }),
            items: [],
            refine: noop,
        };
        return _this;
    }
    Object.defineProperty(NgAisHierarchicalMenu.prototype, "isHidden", {
        get: /**
         * @return {?}
         */
        function () {
            return this.state.items.length === 0 && this.autoHideContainer;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgAisHierarchicalMenu.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.createWidget(connectHierarchicalMenu, {
            limit: parseNumberInput(this.limit),
            attributes: this.attributes,
            rootPath: this.rootPath,
            separator: this.separator,
            showParentLevel: this.showParentLevel,
            sortBy: this.sortBy,
            transformItems: this.transformItems,
        });
        _super.prototype.ngOnInit.call(this);
    };
    NgAisHierarchicalMenu.decorators = [
        { type: Component, args: [{
                    selector: 'ais-hierarchical-menu',
                    template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <ul [class]=\"cx('list') + ' ' + cx('list', 'lvl0')\">\n        <ais-hierarchical-menu-item\n          *ngFor=\"let item of state.items\"\n          [item]=\"item\"\n          [createURL]=\"state.createURL\"\n          [refine]=\"state.refine\"\n        >\n        </ais-hierarchical-menu-item>\n      </ul>\n    </div>\n  "
                }] }
    ];
    /** @nocollapse */
    NgAisHierarchicalMenu.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return NgAisInstantSearch; })),] }] }
    ]; };
    NgAisHierarchicalMenu.propDecorators = {
        attributes: [{ type: Input }],
        separator: [{ type: Input }],
        rootPath: [{ type: Input }],
        showParentLevel: [{ type: Input }],
        limit: [{ type: Input }],
        sortBy: [{ type: Input }],
        transformItems: [{ type: Input }]
    };
    return NgAisHierarchicalMenu;
}(BaseWidget));
export { NgAisHierarchicalMenu };
if (false) {
    /** @type {?} */
    NgAisHierarchicalMenu.prototype.attributes;
    /** @type {?} */
    NgAisHierarchicalMenu.prototype.separator;
    /** @type {?} */
    NgAisHierarchicalMenu.prototype.rootPath;
    /** @type {?} */
    NgAisHierarchicalMenu.prototype.showParentLevel;
    /** @type {?} */
    NgAisHierarchicalMenu.prototype.limit;
    /** @type {?} */
    NgAisHierarchicalMenu.prototype.sortBy;
    /** @type {?} */
    NgAisHierarchicalMenu.prototype.transformItems;
    /** @type {?} */
    NgAisHierarchicalMenu.prototype.state;
    /** @type {?} */
    NgAisHierarchicalMenu.prototype.instantSearchParent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGllcmFyY2hpY2FsLW1lbnUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWluc3RhbnRzZWFyY2gvIiwic291cmNlcyI6WyJoaWVyYXJjaGljYWwtbWVudS9oaWVyYXJjaGljYWwtbWVudS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDekUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVDLE9BQU8sRUFDTCxrQkFBa0IsR0FFbkIsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN4QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBZ0JsRDtJQW1CMkMsaURBQVU7SUEwQm5ELCtCQUVTLG1CQUF3QjtRQUZqQyxZQUlFLGtCQUFNLGtCQUFrQixDQUFDLFNBQzFCO1FBSFEseUJBQW1CLEdBQW5CLG1CQUFtQixDQUFLO1FBWjFCLFdBQUssR0FBMEI7WUFDcEMsU0FBUzs7O1lBQUUsY0FBTSxPQUFBLEdBQUcsRUFBSCxDQUFHLENBQUE7WUFDcEIsS0FBSyxFQUFFLEVBQUU7WUFDVCxNQUFNLEVBQUUsSUFBSTtTQUNiLENBQUM7O0lBV0YsQ0FBQztJQVRELHNCQUFJLDJDQUFROzs7O1FBQVo7WUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDO1FBQ2pFLENBQUM7OztPQUFBOzs7O0lBU00sd0NBQVE7OztJQUFmO1FBQ0UsSUFBSSxDQUFDLFlBQVksQ0FBQyx1QkFBdUIsRUFBRTtZQUN6QyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUNuQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDM0IsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztZQUN6QixlQUFlLEVBQUUsSUFBSSxDQUFDLGVBQWU7WUFDckMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYztTQUNwQyxDQUFDLENBQUM7UUFFSCxpQkFBTSxRQUFRLFdBQUUsQ0FBQztJQUNuQixDQUFDOztnQkFoRUYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLFFBQVEsRUFBRSxpWkFlVDtpQkFDRjs7OztnREE0QkksTUFBTSxTQUFDLFVBQVU7Ozt3QkFBQyxjQUFNLE9BQUEsa0JBQWtCLEVBQWxCLENBQWtCLEVBQUM7Ozs2QkExQjdDLEtBQUs7NEJBQ0wsS0FBSzsyQkFDTCxLQUFLO2tDQUNMLEtBQUs7d0JBQ0wsS0FBSzt5QkFDTCxLQUFLO2lDQUtMLEtBQUs7O0lBbUNSLDRCQUFDO0NBQUEsQUFqRUQsQ0FtQjJDLFVBQVUsR0E4Q3BEO1NBOUNZLHFCQUFxQjs7O0lBQ2hDLDJDQUFxQzs7SUFDckMsMENBQW1DOztJQUNuQyx5Q0FBa0M7O0lBQ2xDLGdEQUEwQzs7SUFDMUMsc0NBQXdDOztJQUN4Qyx1Q0FHbUU7O0lBRW5FLCtDQUdTOztJQUVULHNDQUlFOztJQU9BLG9EQUMrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIEluamVjdCwgZm9yd2FyZFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb25uZWN0SGllcmFyY2hpY2FsTWVudSB9IGZyb20gJ2luc3RhbnRzZWFyY2guanMvZXMvY29ubmVjdG9ycyc7XG5pbXBvcnQgeyBCYXNlV2lkZ2V0IH0gZnJvbSAnLi4vYmFzZS13aWRnZXQnO1xuaW1wb3J0IHtcbiAgTmdBaXNJbnN0YW50U2VhcmNoLFxuICBGYWNldFNvcnRCeVN0cmluZ09wdGlvbnMsXG59IGZyb20gJy4uL2luc3RhbnRzZWFyY2gvaW5zdGFudHNlYXJjaCc7XG5pbXBvcnQgeyBwYXJzZU51bWJlcklucHV0LCBub29wIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgdHlwZSBIaWVyYXJjaGljYWxNZW51U3RhdGUgPSB7XG4gIGNyZWF0ZVVSTDogKHZhbHVlOiBzdHJpbmcpID0+IHN0cmluZztcbiAgaXRlbXM6IEhpZXJhcmNoaWNhbE1lbnVJdGVtW107XG4gIHJlZmluZTogKHZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7XG59O1xuXG5leHBvcnQgdHlwZSBIaWVyYXJjaGljYWxNZW51SXRlbSA9IHtcbiAgdmFsdWU6IHN0cmluZztcbiAgbGFiZWw6IHN0cmluZztcbiAgY291bnQ6IG51bWJlcjtcbiAgaXNSZWZpbmVkOiBib29sZWFuO1xuICBkYXRhOiBIaWVyYXJjaGljYWxNZW51SXRlbVtdIHwgbnVsbDtcbn07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Fpcy1oaWVyYXJjaGljYWwtbWVudScsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdlxuICAgICAgW2NsYXNzXT1cImN4KClcIlxuICAgICAgKm5nSWY9XCIhaXNIaWRkZW5cIlxuICAgID5cbiAgICAgIDx1bCBbY2xhc3NdPVwiY3goJ2xpc3QnKSArICcgJyArIGN4KCdsaXN0JywgJ2x2bDAnKVwiPlxuICAgICAgICA8YWlzLWhpZXJhcmNoaWNhbC1tZW51LWl0ZW1cbiAgICAgICAgICAqbmdGb3I9XCJsZXQgaXRlbSBvZiBzdGF0ZS5pdGVtc1wiXG4gICAgICAgICAgW2l0ZW1dPVwiaXRlbVwiXG4gICAgICAgICAgW2NyZWF0ZVVSTF09XCJzdGF0ZS5jcmVhdGVVUkxcIlxuICAgICAgICAgIFtyZWZpbmVdPVwic3RhdGUucmVmaW5lXCJcbiAgICAgICAgPlxuICAgICAgICA8L2Fpcy1oaWVyYXJjaGljYWwtbWVudS1pdGVtPlxuICAgICAgPC91bD5cbiAgICA8L2Rpdj5cbiAgYCxcbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNIaWVyYXJjaGljYWxNZW51IGV4dGVuZHMgQmFzZVdpZGdldCB7XG4gIEBJbnB1dCgpIHB1YmxpYyBhdHRyaWJ1dGVzOiBzdHJpbmdbXTtcbiAgQElucHV0KCkgcHVibGljIHNlcGFyYXRvcj86IHN0cmluZztcbiAgQElucHV0KCkgcHVibGljIHJvb3RQYXRoPzogc3RyaW5nO1xuICBASW5wdXQoKSBwdWJsaWMgc2hvd1BhcmVudExldmVsPzogYm9vbGVhbjtcbiAgQElucHV0KCkgcHVibGljIGxpbWl0PzogbnVtYmVyIHwgc3RyaW5nO1xuICBASW5wdXQoKVxuICBwdWJsaWMgc29ydEJ5PzpcbiAgICB8IEZhY2V0U29ydEJ5U3RyaW5nT3B0aW9uc1tdXG4gICAgfCAoKGE6IEhpZXJhcmNoaWNhbE1lbnVJdGVtLCBiOiBIaWVyYXJjaGljYWxNZW51SXRlbSkgPT4gbnVtYmVyKTtcblxuICBASW5wdXQoKVxuICBwdWJsaWMgdHJhbnNmb3JtSXRlbXM/OiA8VSBleHRlbmRzIEhpZXJhcmNoaWNhbE1lbnVJdGVtPihcbiAgICBpdGVtczogSGllcmFyY2hpY2FsTWVudUl0ZW1bXVxuICApID0+IFVbXTtcblxuICBwdWJsaWMgc3RhdGU6IEhpZXJhcmNoaWNhbE1lbnVTdGF0ZSA9IHtcbiAgICBjcmVhdGVVUkw6ICgpID0+ICcjJyxcbiAgICBpdGVtczogW10sXG4gICAgcmVmaW5lOiBub29wLFxuICB9O1xuXG4gIGdldCBpc0hpZGRlbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5pdGVtcy5sZW5ndGggPT09IDAgJiYgdGhpcy5hdXRvSGlkZUNvbnRhaW5lcjtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBOZ0Fpc0luc3RhbnRTZWFyY2gpKVxuICAgIHB1YmxpYyBpbnN0YW50U2VhcmNoUGFyZW50OiBhbnlcbiAgKSB7XG4gICAgc3VwZXIoJ0hpZXJhcmNoaWNhbE1lbnUnKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmNyZWF0ZVdpZGdldChjb25uZWN0SGllcmFyY2hpY2FsTWVudSwge1xuICAgICAgbGltaXQ6IHBhcnNlTnVtYmVySW5wdXQodGhpcy5saW1pdCksXG4gICAgICBhdHRyaWJ1dGVzOiB0aGlzLmF0dHJpYnV0ZXMsXG4gICAgICByb290UGF0aDogdGhpcy5yb290UGF0aCxcbiAgICAgIHNlcGFyYXRvcjogdGhpcy5zZXBhcmF0b3IsXG4gICAgICBzaG93UGFyZW50TGV2ZWw6IHRoaXMuc2hvd1BhcmVudExldmVsLFxuICAgICAgc29ydEJ5OiB0aGlzLnNvcnRCeSxcbiAgICAgIHRyYW5zZm9ybUl0ZW1zOiB0aGlzLnRyYW5zZm9ybUl0ZW1zLFxuICAgIH0pO1xuXG4gICAgc3VwZXIubmdPbkluaXQoKTtcbiAgfVxufVxuIl19