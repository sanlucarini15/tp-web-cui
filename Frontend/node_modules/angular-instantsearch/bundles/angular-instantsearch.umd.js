(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('algoliasearch/lite'), require('instantsearch.js/es'), require('nouislider'), require('@angular/common'), require('instantsearch.js/es/connectors'), require('algoliasearch'), require('querystring-es3/encode'), require('@angular/core'), require('algoliasearch-helper')) :
    typeof define === 'function' && define.amd ? define('angular-instantsearch', ['exports', 'algoliasearch/lite', 'instantsearch.js/es', 'nouislider', '@angular/common', 'instantsearch.js/es/connectors', 'algoliasearch', 'querystring-es3/encode', '@angular/core', 'algoliasearch-helper'], factory) :
    (factory((global['angular-instantsearch'] = {}),global.algoliasearchProxy,global.instantsearch,global.noUiSlider,global.ng.common,global.instantsearch.connectors,global.algoliasearch,global.qs.encode,global.ng.core,global.algoliasearchHelper));
}(this, (function (exports,algoliasearchProxy,instantsearch,noUiSlider,common,connectors,algoliasearchProxy$1,encodeProxy,core,algoliasearchHelper) { 'use strict';

    var algoliasearchProxy__default = 'default' in algoliasearchProxy ? algoliasearchProxy['default'] : algoliasearchProxy;
    instantsearch = instantsearch && instantsearch.hasOwnProperty('default') ? instantsearch['default'] : instantsearch;
    var algoliasearchProxy$1__default = 'default' in algoliasearchProxy$1 ? algoliasearchProxy$1['default'] : algoliasearchProxy$1;
    var encodeProxy__default = 'default' in encodeProxy ? encodeProxy['default'] : encodeProxy;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p]; };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} widgetName
     * @return {?}
     */
    function bem(widgetName) {
        /** @type {?} */
        var cx = ( /**
         * @param {?=} element
         * @param {?=} subElement
         * @return {?}
         */function (element, subElement) {
            /** @type {?} */
            var cssClass = "ais-" + widgetName;
            if (element) {
                cssClass += "-" + element;
            }
            if (subElement) {
                cssClass += "--" + subElement;
            }
            return cssClass;
        });
        return cx;
    }
    /**
     * @param {?=} input
     * @return {?}
     */
    function parseNumberInput(input) {
        return typeof input === 'string' ? parseInt(input, 10) : input;
    }
    /**
     * @param {...?} args
     * @return {?}
     */
    function noop() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Widget = /** @class */ (function () {
        function Widget() {
        }
        return Widget;
    }());
    var BaseWidget = /** @class */ (function () {
        function BaseWidget(widgetName) {
            var _this = this;
            this.state = {};
            this.updateState = ( /**
             * @param {?} state
             * @param {?} isFirstRendering
             * @return {?}
             */function (state, isFirstRendering) {
                if (isFirstRendering) {
                    return Promise.resolve().then(( /**
                     * @return {?}
                     */function () {
                        _this.state = state;
                    }));
                }
                _this.state = state;
            });
            this.cx = bem(widgetName);
        }
        /**
         * @param {?} connector
         * @param {?=} options
         * @return {?}
         */
        BaseWidget.prototype.createWidget = /**
         * @param {?} connector
         * @param {?=} options
         * @return {?}
         */
            function (connector, options) {
                if (options === void 0) {
                    options = {};
                }
                this.widget = connector(this.updateState, noop)(options);
            };
        /**
         * @return {?}
         */
        BaseWidget.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                // add widget to the InstantSearch Instance
                this.instantSearchParent.addWidget(this.widget);
            };
        /**
         * @return {?}
         */
        BaseWidget.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (common.isPlatformBrowser(this.instantSearchParent.platformId)) {
                    this.instantSearchParent.removeWidget(this.widget);
                }
            };
        // helper method for genering item list className
        // helper method for genering item list className
        /**
         * @param {?} item
         * @return {?}
         */
        BaseWidget.prototype.getItemClass =
            // helper method for genering item list className
            /**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                /** @type {?} */
                var className = this.cx('item');
                if (item.isRefined) {
                    className = className + " " + this.cx('item', 'selected');
                }
                return className;
            };
        BaseWidget.propDecorators = {
            autoHideContainer: [{ type: core.Input }]
        };
        return BaseWidget;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var VERSION = '3.0.0-beta.5';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisInstantSearch = /** @class */ (function () {
        function NgAisInstantSearch(platformId) {
            var _this = this;
            this.platformId = platformId;
            this.instanceName = 'default';
            this.change = new core.EventEmitter();
            this.onRender = ( /**
             * @return {?}
             */function () {
                _this.change.emit({
                    results: _this.instantSearchInstance.helper.lastResults,
                    state: _this.instantSearchInstance.helper.state,
                });
            });
        }
        /**
         * @return {?}
         */
        NgAisInstantSearch.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createInstantSearchInstance(this.config);
            };
        /**
         * @return {?}
         */
        NgAisInstantSearch.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.instantSearchInstance.start();
            };
        /**
         * @return {?}
         */
        NgAisInstantSearch.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.instantSearchInstance.removeListener('render', this.onRender);
                this.instantSearchInstance.dispose();
            };
        /**
         * @param {?} config
         * @return {?}
         */
        NgAisInstantSearch.prototype.createInstantSearchInstance = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                // add default searchParameters with highlighting config
                if (!config.searchParameters)
                    config.searchParameters = {};
                Object.assign(config.searchParameters, {
                    highlightPreTag: '__ais-highlight__',
                    highlightPostTag: '__/ais-highlight__',
                });
                // remove URLSync widget if on SSR
                if (!common.isPlatformBrowser(this.platformId)) {
                    if (typeof config.urlSync !== 'undefined')
                        delete config.urlSync;
                    if (typeof config.routing !== 'undefined')
                        delete config.routing;
                }
                if (typeof config.searchClient.addAlgoliaAgent === 'function') {
                    config.searchClient.addAlgoliaAgent("angular (" + core.VERSION.full + ")");
                    config.searchClient.addAlgoliaAgent("angular-instantsearch (" + VERSION + ")");
                }
                this.instantSearchInstance = instantsearch(config);
                this.instantSearchInstance.on('render', this.onRender);
            };
        /**
         * @param {?} widget
         * @return {?}
         */
        NgAisInstantSearch.prototype.addWidget = /**
         * @param {?} widget
         * @return {?}
         */
            function (widget) {
                this.instantSearchInstance.addWidget(widget);
            };
        /**
         * @param {?} widget
         * @return {?}
         */
        NgAisInstantSearch.prototype.removeWidget = /**
         * @param {?} widget
         * @return {?}
         */
            function (widget) {
                this.instantSearchInstance.removeWidget(widget);
            };
        /**
         * @return {?}
         */
        NgAisInstantSearch.prototype.refresh = /**
         * @return {?}
         */
            function () {
                this.instantSearchInstance.refresh();
            };
        NgAisInstantSearch.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-instantsearch',
                        template: "<ng-content></ng-content>"
                    }] }
        ];
        /** @nocollapse */
        NgAisInstantSearch.ctorParameters = function () {
            return [
                { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
            ];
        };
        NgAisInstantSearch.propDecorators = {
            config: [{ type: core.Input }],
            instanceName: [{ type: core.Input }],
            change: [{ type: core.Output }]
        };
        return NgAisInstantSearch;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisBreadcrumb = /** @class */ (function (_super) {
        __extends(NgAisBreadcrumb, _super);
        function NgAisBreadcrumb(instantSearchParent) {
            var _this = _super.call(this, 'Breadcrumb') || this;
            _this.instantSearchParent = instantSearchParent;
            _this.state = {
                createURL: ( /**
                 * @return {?}
                 */function () { return '#'; }),
                items: [],
                refine: noop,
            };
            return _this;
        }
        Object.defineProperty(NgAisBreadcrumb.prototype, "isHidden", {
            get: /**
             * @return {?}
             */ function () {
                return this.state.items.length === 0 && this.autoHideContainer;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgAisBreadcrumb.prototype, "items", {
            get: /**
             * @return {?}
             */ function () {
                var _this = this;
                return this.state.items.map(( /**
                 * @param {?} item
                 * @param {?} idx
                 * @return {?}
                 */function (item, idx) { return (__assign({}, item, { separator: idx !== 0, isLast: idx === _this.state.items.length - 1 })); }));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisBreadcrumb.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectBreadcrumb, {
                    attributes: this.attributes,
                    rootPath: this.rootPath,
                    separator: this.separator,
                    transformItems: this.transformItems,
                });
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * @param {?} event
         * @param {?} item
         * @return {?}
         */
        NgAisBreadcrumb.prototype.handleClick = /**
         * @param {?} event
         * @param {?} item
         * @return {?}
         */
            function (event, item) {
                event.preventDefault();
                event.stopPropagation();
                if (item.value) {
                    this.state.refine(item.value);
                }
            };
        NgAisBreadcrumb.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-breadcrumb',
                        template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <ul [class]=\"cx('list')\">\n        <li\n          *ngFor=\"let item of items\"\n          [ngClass]=\"[cx('item'), item.isLast ? cx('item', 'selected') : '']\"\n          (click)=\"handleClick($event, item)\"\n        >\n          <span\n            *ngIf=\"item.separator\"\n            [class]=\"cx('separator')\"\n            aria-hidden=\"true\"\n          >\n            >\n          </span>\n          <a\n            [class]=\"cx('link')\"\n            href=\"{{state.createURL(item.value)}}\"\n            *ngIf=\"!item.isLast\"\n            (click)=\"handleClick($event, item)\"\n          >\n            {{item.label}}\n          </a>\n\n          <span *ngIf=\"item.isLast\">\n            {{item.label}}\n          </span>\n        </li>\n      </ul>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        NgAisBreadcrumb.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(( /**
                                                 * @return {?}
                                                 */function () { return NgAisInstantSearch; })),] }] }
            ];
        };
        NgAisBreadcrumb.propDecorators = {
            attributes: [{ type: core.Input }],
            rootPath: [{ type: core.Input }],
            separator: [{ type: core.Input }],
            transformItems: [{ type: core.Input }]
        };
        return NgAisBreadcrumb;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisBreadcrumbModule = /** @class */ (function () {
        function NgAisBreadcrumbModule() {
        }
        NgAisBreadcrumbModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisBreadcrumb],
                        entryComponents: [NgAisBreadcrumb],
                        exports: [NgAisBreadcrumb],
                        imports: [common.CommonModule],
                    },] }
        ];
        return NgAisBreadcrumbModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisClearRefinements = /** @class */ (function (_super) {
        __extends(NgAisClearRefinements, _super);
        function NgAisClearRefinements(instantSearchParent) {
            var _this = _super.call(this, 'ClearRefinements') || this;
            _this.instantSearchParent = instantSearchParent;
            // rendering options
            _this.resetLabel = 'Clear refinements';
            _this.state = {
                hasRefinements: false,
                refine: noop,
                createURL: ( /**
                 * @return {?}
                 */function () { return '#'; }),
            };
            return _this;
        }
        Object.defineProperty(NgAisClearRefinements.prototype, "isHidden", {
            get: /**
             * @return {?}
             */ function () {
                return !this.state.hasRefinements && this.autoHideContainer;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisClearRefinements.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectClearRefinements, {
                    includedAttributes: this.includedAttributes,
                    excludedAttributes: this.excludedAttributes,
                    transformItems: this.transformItems,
                });
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NgAisClearRefinements.prototype.handleClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                if (this.state.hasRefinements) {
                    this.state.refine();
                }
            };
        NgAisClearRefinements.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-clear-refinements',
                        template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <button\n        [class]=\"cx('button') + (!state.hasRefinements ? (' ' + cx('button', 'disabled')) : '')\"\n        (click)=\"handleClick($event)\"\n        [disabled]=\"!state.hasRefinements\"\n      >\n        {{resetLabel}}\n      </button>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        NgAisClearRefinements.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(( /**
                                                 * @return {?}
                                                 */function () { return NgAisInstantSearch; })),] }] }
            ];
        };
        NgAisClearRefinements.propDecorators = {
            resetLabel: [{ type: core.Input }],
            includedAttributes: [{ type: core.Input }],
            excludedAttributes: [{ type: core.Input }],
            transformItems: [{ type: core.Input }]
        };
        return NgAisClearRefinements;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisClearRefinementsModule = /** @class */ (function () {
        function NgAisClearRefinementsModule() {
        }
        NgAisClearRefinementsModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisClearRefinements],
                        entryComponents: [NgAisClearRefinements],
                        exports: [NgAisClearRefinements],
                        imports: [common.CommonModule],
                    },] }
        ];
        return NgAisClearRefinementsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisCurrentRefinements = /** @class */ (function (_super) {
        __extends(NgAisCurrentRefinements, _super);
        function NgAisCurrentRefinements(instantSearchParent) {
            var _this = _super.call(this, 'CurrentRefinements') || this;
            _this.instantSearchParent = instantSearchParent;
            _this.state = {
                createURL: noop,
                refine: noop,
                items: [],
            };
            return _this;
        }
        Object.defineProperty(NgAisCurrentRefinements.prototype, "isHidden", {
            get: /**
             * @return {?}
             */ function () {
                return this.state.items.length === 0 && this.autoHideContainer;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisCurrentRefinements.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectCurrentRefinements, {
                    includedAttributes: this.includedAttributes,
                    excludedAttributes: this.excludedAttributes,
                    transformItems: this.transformItems,
                });
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * @param {?} event
         * @param {?} refinement
         * @return {?}
         */
        NgAisCurrentRefinements.prototype.handleClick = /**
         * @param {?} event
         * @param {?} refinement
         * @return {?}
         */
            function (event, refinement) {
                event.preventDefault();
                this.state.refine(refinement);
            };
        NgAisCurrentRefinements.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-current-refinements',
                        template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <ul\n        [class]=\"cx('list')\"\n        *ngFor=\"let item of state.items\"\n      >\n        <li [class]=\"cx('item')\">\n          <span [class]=\"cx('label')\">{{item.label | titlecase}}:</span>\n\n          <span\n            [class]=\"cx('category')\"\n            *ngFor=\"let refinement of item.refinements\"\n          >\n            <span [class]=\"cx('categoryLabel')\">{{refinement.label}}</span>\n            <button [class]=\"cx('delete')\" (click)=\"handleClick($event, refinement)\">\u2715</button>\n          </span>\n        </li>\n      </ul>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        NgAisCurrentRefinements.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(( /**
                                                 * @return {?}
                                                 */function () { return NgAisInstantSearch; })),] }] }
            ];
        };
        NgAisCurrentRefinements.propDecorators = {
            includedAttributes: [{ type: core.Input }],
            excludedAttributes: [{ type: core.Input }],
            transformItems: [{ type: core.Input }]
        };
        return NgAisCurrentRefinements;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisCurrentRefinementsModule = /** @class */ (function () {
        function NgAisCurrentRefinementsModule() {
        }
        NgAisCurrentRefinementsModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisCurrentRefinements],
                        entryComponents: [NgAisCurrentRefinements],
                        exports: [NgAisCurrentRefinements],
                        imports: [common.CommonModule],
                    },] }
        ];
        return NgAisCurrentRefinementsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisHierarchicalMenu = /** @class */ (function (_super) {
        __extends(NgAisHierarchicalMenu, _super);
        function NgAisHierarchicalMenu(instantSearchParent) {
            var _this = _super.call(this, 'HierarchicalMenu') || this;
            _this.instantSearchParent = instantSearchParent;
            _this.state = {
                createURL: ( /**
                 * @return {?}
                 */function () { return '#'; }),
                items: [],
                refine: noop,
            };
            return _this;
        }
        Object.defineProperty(NgAisHierarchicalMenu.prototype, "isHidden", {
            get: /**
             * @return {?}
             */ function () {
                return this.state.items.length === 0 && this.autoHideContainer;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisHierarchicalMenu.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectHierarchicalMenu, {
                    limit: parseNumberInput(this.limit),
                    attributes: this.attributes,
                    rootPath: this.rootPath,
                    separator: this.separator,
                    showParentLevel: this.showParentLevel,
                    sortBy: this.sortBy,
                    transformItems: this.transformItems,
                });
                _super.prototype.ngOnInit.call(this);
            };
        NgAisHierarchicalMenu.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-hierarchical-menu',
                        template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <ul [class]=\"cx('list') + ' ' + cx('list', 'lvl0')\">\n        <ais-hierarchical-menu-item\n          *ngFor=\"let item of state.items\"\n          [item]=\"item\"\n          [createURL]=\"state.createURL\"\n          [refine]=\"state.refine\"\n        >\n        </ais-hierarchical-menu-item>\n      </ul>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        NgAisHierarchicalMenu.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(( /**
                                                 * @return {?}
                                                 */function () { return NgAisInstantSearch; })),] }] }
            ];
        };
        NgAisHierarchicalMenu.propDecorators = {
            attributes: [{ type: core.Input }],
            separator: [{ type: core.Input }],
            rootPath: [{ type: core.Input }],
            showParentLevel: [{ type: core.Input }],
            limit: [{ type: core.Input }],
            sortBy: [{ type: core.Input }],
            transformItems: [{ type: core.Input }]
        };
        return NgAisHierarchicalMenu;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisHierarchicalMenuItem = /** @class */ (function () {
        function NgAisHierarchicalMenuItem() {
            this.lvl = 1;
            this.cx = bem('HierarchicalMenu');
        }
        /**
         * @param {?} item
         * @return {?}
         */
        NgAisHierarchicalMenuItem.prototype.getItemClass = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                /** @type {?} */
                var className = this.cx('item');
                if (item.isRefined) {
                    className = className + " " + this.cx('item', 'selected');
                }
                if (this.isArray(item.data) && item.data.length > 0) {
                    className = className + " " + this.cx('item', 'parent');
                }
                return className;
            };
        /**
         * @return {?}
         */
        NgAisHierarchicalMenuItem.prototype.getListClass = /**
         * @return {?}
         */
            function () {
                return this.cx('list') + " " + this.cx('list', 'child') + " " + this.cx('list', "lvl" + this.lvl);
            };
        /**
         * @param {?} potentialArray
         * @return {?}
         */
        NgAisHierarchicalMenuItem.prototype.isArray = /**
         * @param {?} potentialArray
         * @return {?}
         */
            function (potentialArray) {
                return Array.isArray(potentialArray);
            };
        /**
         * @param {?} event
         * @param {?} item
         * @return {?}
         */
        NgAisHierarchicalMenuItem.prototype.handleClick = /**
         * @param {?} event
         * @param {?} item
         * @return {?}
         */
            function (event, item) {
                event.preventDefault();
                event.stopPropagation();
                this.refine(item.value);
            };
        NgAisHierarchicalMenuItem.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-hierarchical-menu-item',
                        template: "\n    <li\n      [class]=\"getItemClass(item)\"\n      (click)=\"handleClick($event, item)\"\n    >\n      <a\n        [class]=\"cx('link')\"\n        href=\"{{createURL(item.value)}}\"\n        (click)=\"handleClick($event, item)\"\n      >\n        <span [class]=\"cx('label')\">{{item.label}}</span>\n        <span [class]=\"cx('count')\">{{item.count}}</span>\n      </a>\n\n      <ul\n        [class]=\"getListClass()\"\n        *ngIf=\"item.isRefined && isArray(item.data) && item.data.length > 0\"\n      >\n        <ais-hierarchical-menu-item\n          *ngFor=\"let child of item.data\"\n          [item]=\"child\"\n          [createURL]=\"createURL\"\n          [refine]=\"refine\"\n          [lvl]=\"lvl + 1\"\n        >\n        </ais-hierarchical-menu-item>\n      </ul>\n    </li>\n  "
                    }] }
        ];
        NgAisHierarchicalMenuItem.propDecorators = {
            lvl: [{ type: core.Input }],
            refine: [{ type: core.Input }],
            createURL: [{ type: core.Input }],
            item: [{ type: core.Input }]
        };
        return NgAisHierarchicalMenuItem;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisHierarchicalMenuModule = /** @class */ (function () {
        function NgAisHierarchicalMenuModule() {
        }
        NgAisHierarchicalMenuModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisHierarchicalMenu, NgAisHierarchicalMenuItem],
                        entryComponents: [NgAisHierarchicalMenu],
                        exports: [NgAisHierarchicalMenu],
                        imports: [common.CommonModule],
                    },] }
        ];
        return NgAisHierarchicalMenuModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisHitsPerPage = /** @class */ (function (_super) {
        __extends(NgAisHitsPerPage, _super);
        function NgAisHitsPerPage(instantSearchParent) {
            var _this = _super.call(this, 'HitsPerPage') || this;
            _this.instantSearchParent = instantSearchParent;
            _this.state = {
                items: [],
                refine: noop,
            };
            return _this;
        }
        Object.defineProperty(NgAisHitsPerPage.prototype, "isHidden", {
            get: /**
             * @return {?}
             */ function () {
                return this.state.items.length === 0 && this.autoHideContainer;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisHitsPerPage.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectHitsPerPage, {
                    items: this.items,
                    transformItems: this.transformItems,
                });
                _super.prototype.ngOnInit.call(this);
            };
        NgAisHitsPerPage.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-hits-per-page',
                        template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <select\n        [class]=\"cx('select')\"\n        (change)=\"state.refine($event.target.value)\"\n      >\n        <option\n          [class]=\"cx('option')\"\n          *ngFor=\"let item of state.items\"\n          [value]=\"item.value\"\n          [selected]=\"item.isRefined\"\n        >\n          {{item.label}}\n        </option>\n      </select>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        NgAisHitsPerPage.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(( /**
                                                 * @return {?}
                                                 */function () { return NgAisInstantSearch; })),] }] }
            ];
        };
        NgAisHitsPerPage.propDecorators = {
            items: [{ type: core.Input }],
            transformItems: [{ type: core.Input }]
        };
        return NgAisHitsPerPage;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisHitsPerPageModule = /** @class */ (function () {
        function NgAisHitsPerPageModule() {
        }
        NgAisHitsPerPageModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisHitsPerPage],
                        entryComponents: [NgAisHitsPerPage],
                        exports: [NgAisHitsPerPage],
                        imports: [common.CommonModule],
                    },] }
        ];
        return NgAisHitsPerPageModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var get = require('lodash/get');
    var NgAisHighlight = /** @class */ (function () {
        function NgAisHighlight() {
            this.tagName = 'em';
            this.cx = bem('Highlight');
        }
        Object.defineProperty(NgAisHighlight.prototype, "content", {
            get: /**
             * @return {?}
             */ function () {
                if (this.attribute === 'highlighted') {
                    return this.hit.highlighted
                        ? this.replaceWithTagName(this.hit.highlighted)
                        : this.hit.label;
                }
                if (this.hit.hasOwnProperty('_highlightResult')) {
                    /** @type {?} */
                    var attributeHighlighted = get(this.hit._highlightResult, this.attribute);
                    // check that the attributeHighlighted is a string
                    if (attributeHighlighted !== undefined &&
                        typeof attributeHighlighted.value === 'string') {
                        return this.replaceWithTagName(attributeHighlighted.value);
                    }
                }
                /** @type {?} */
                var fallback = get(this.hit, this.attribute);
                if (!fallback) {
                    console.warn("Could not find attribute [" + this.attribute + "] into hit object, will display an empty string.");
                    return '';
                }
                return fallback;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} value
         * @return {?}
         */
        NgAisHighlight.prototype.replaceWithTagName = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return value
                    .replace(new RegExp('<em>', 'g'), "<" + this.tagName + " class=\"" + this.cx('highlighted') + "\">")
                    .replace(new RegExp('</em>', 'g'), "</" + this.tagName + ">");
            };
        NgAisHighlight.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-highlight',
                        template: "<span [class]=\"cx()\" [innerHtml]=\"content\"></span>"
                    }] }
        ];
        NgAisHighlight.propDecorators = {
            attribute: [{ type: core.Input }],
            hit: [{ type: core.Input }],
            tagName: [{ type: core.Input }]
        };
        return NgAisHighlight;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisHighlightModule = /** @class */ (function () {
        function NgAisHighlightModule() {
        }
        NgAisHighlightModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisHighlight],
                        entryComponents: [NgAisHighlight],
                        exports: [NgAisHighlight],
                        imports: [common.CommonModule],
                    },] }
        ];
        return NgAisHighlightModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisHits = /** @class */ (function (_super) {
        __extends(NgAisHits, _super);
        function NgAisHits(instantSearchParent) {
            var _this = _super.call(this, 'Hits') || this;
            _this.instantSearchParent = instantSearchParent;
            _this.state = {
                hits: [],
                results: {},
            };
            _this.updateState = ( /**
             * @param {?} state
             * @param {?} isFirstRendering
             * @return {?}
             */function (state, isFirstRendering) {
                if (isFirstRendering)
                    return;
                _this.state = state;
            });
            return _this;
        }
        /**
         * @return {?}
         */
        NgAisHits.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectHitsWithInsights, {
                    escapeHTML: this.escapeHTML,
                    transformItems: this.transformItems,
                });
                _super.prototype.ngOnInit.call(this);
            };
        NgAisHits.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-hits',
                        template: "\n    <div [class]=\"cx()\">\n      <ng-container *ngTemplateOutlet=\"template; context: state\"></ng-container>\n\n      <!-- default rendering if no template specified -->\n      <div *ngIf=\"!template\">\n        <ul [class]=\"cx('list')\">\n          <li\n            [class]=\"cx('item')\"\n            *ngFor=\"let hit of state.hits\"\n          >\n            <ais-highlight attribute=\"name\" [hit]=\"hit\">\n            </ais-highlight>\n          </li>\n        </ul>\n      </div>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        NgAisHits.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(( /**
                                                 * @return {?}
                                                 */function () { return NgAisInstantSearch; })),] }] }
            ];
        };
        NgAisHits.propDecorators = {
            template: [{ type: core.ContentChild, args: [core.TemplateRef,] }],
            escapeHTML: [{ type: core.Input }],
            transformItems: [{ type: core.Input }]
        };
        return NgAisHits;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisHitsModule = /** @class */ (function () {
        function NgAisHitsModule() {
        }
        NgAisHitsModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisHits],
                        entryComponents: [NgAisHits],
                        exports: [NgAisHits],
                        imports: [common.CommonModule, NgAisHighlightModule],
                    },] }
        ];
        return NgAisHitsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisInfiniteHits = /** @class */ (function (_super) {
        __extends(NgAisInfiniteHits, _super);
        function NgAisInfiniteHits(instantSearchParent) {
            var _this = _super.call(this, 'InfiniteHits') || this;
            _this.instantSearchParent = instantSearchParent;
            _this.showPrevious = false;
            _this.showPreviousLabel = 'Show previous results';
            _this.showMoreLabel = 'Show more results';
            // inner widget state returned from connector
            _this.state = {
                hits: [],
                isFirstPage: false,
                isLastPage: false,
                showMore: noop,
                showPrevious: noop,
                results: {},
            };
            _this.updateState = ( /**
             * @param {?} state
             * @param {?} isFirstRendering
             * @return {?}
             */function (state, isFirstRendering) {
                if (isFirstRendering)
                    return;
                _this.state = state;
            });
            return _this;
        }
        /**
         * @return {?}
         */
        NgAisInfiniteHits.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectInfiniteHitsWithInsights, {
                    escapeHTML: this.escapeHTML,
                    transformItems: this.transformItems,
                });
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NgAisInfiniteHits.prototype.showMoreHandler = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                this.state.showMore();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NgAisInfiniteHits.prototype.showPreviousHandler = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                this.state.showPrevious();
            };
        NgAisInfiniteHits.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-infinite-hits',
                        template: "\n    <div [class]=\"cx()\">\n      <ng-container *ngTemplateOutlet=\"template; context: state\"></ng-container>\n\n      <!-- default rendering if no template specified -->\n      <button\n        [ngClass]=\"[cx('loadPrevious'), this.state.isFirstPage ? cx('loadPrevious', 'disabled') : '']\"\n        (click)=\"showPreviousHandler($event)\"\n        [disabled]=\"state.isFirstPage\"\n        *ngIf=\"showPrevious && !template\"\n      >\n        {{showPreviousLabel}}\n      </button>\n\n      <div *ngIf=\"!template\">\n        <ul [class]=\"cx('list')\">\n          <li\n            [class]=\"cx('item')\"\n            *ngFor=\"let hit of state.hits\"\n          >\n            <ais-highlight attribute=\"name\" [hit]=\"hit\">\n            </ais-highlight>\n          </li>\n        </ul>\n      </div>\n\n      <button\n        [ngClass]=\"[cx('loadMore'), this.state.isLastPage ? cx('loadMore', 'disabled') : '']\"\n        (click)=\"showMoreHandler($event)\"\n        [disabled]=\"state.isLastPage\"\n        *ngIf=\"!template\"\n      >\n        {{showMoreLabel}}\n      </button>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        NgAisInfiniteHits.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(( /**
                                                 * @return {?}
                                                 */function () { return NgAisInstantSearch; })),] }] }
            ];
        };
        NgAisInfiniteHits.propDecorators = {
            template: [{ type: core.ContentChild, args: [core.TemplateRef,] }],
            escapeHTML: [{ type: core.Input }],
            showPrevious: [{ type: core.Input }],
            showPreviousLabel: [{ type: core.Input }],
            showMoreLabel: [{ type: core.Input }],
            transformItems: [{ type: core.Input }]
        };
        return NgAisInfiniteHits;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisInfiniteHitsModule = /** @class */ (function () {
        function NgAisInfiniteHitsModule() {
        }
        NgAisInfiniteHitsModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisInfiniteHits],
                        entryComponents: [NgAisInfiniteHits],
                        exports: [NgAisInfiniteHits],
                        imports: [common.CommonModule, NgAisHighlightModule],
                    },] }
        ];
        return NgAisInfiniteHitsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisInstantSearchModule = /** @class */ (function () {
        function NgAisInstantSearchModule() {
        }
        /**
         * @return {?}
         */
        NgAisInstantSearchModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: NgAisInstantSearchModule,
                    providers: [],
                };
            };
        NgAisInstantSearchModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisInstantSearch],
                        entryComponents: [NgAisInstantSearch],
                        exports: [NgAisInstantSearch],
                        imports: [common.CommonModule],
                    },] }
        ];
        return NgAisInstantSearchModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisMenu = /** @class */ (function (_super) {
        __extends(NgAisMenu, _super);
        function NgAisMenu(instantSearchParent) {
            var _this = _super.call(this, 'Menu') || this;
            _this.instantSearchParent = instantSearchParent;
            // rendering options
            _this.showMoreLabel = 'Show more';
            _this.showLessLabel = 'Show less';
            _this.state = {
                items: [],
                refine: noop,
                createURL: noop,
                isShowingMore: false,
                canToggleShowMore: false,
                toggleShowMore: noop,
            };
            return _this;
        }
        Object.defineProperty(NgAisMenu.prototype, "isHidden", {
            get: /**
             * @return {?}
             */ function () {
                return this.state.items.length === 0 && this.autoHideContainer;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgAisMenu.prototype, "showMoreClass", {
            get: /**
             * @return {?}
             */ function () {
                /** @type {?} */
                var className = this.cx('showMore');
                if (!this.state.canToggleShowMore) {
                    className = className + " " + this.cx('showMore', 'disabled');
                }
                return className;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisMenu.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectMenu, {
                    attribute: this.attribute,
                    showMore: this.showMore,
                    limit: this.limit,
                    showMoreLimit: this.showMoreLimit,
                    sortBy: this.sortBy,
                    transformItems: this.transformItems,
                });
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * @param {?} event
         * @param {?} value
         * @return {?}
         */
        NgAisMenu.prototype.handleClick = /**
         * @param {?} event
         * @param {?} value
         * @return {?}
         */
            function (event, value) {
                event.preventDefault();
                event.stopPropagation();
                this.state.refine(value);
            };
        NgAisMenu.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-menu',
                        template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <ul [class]=\"cx('list')\">\n        <li\n          [class]=\"getItemClass(item)\"\n          *ngFor=\"let item of state.items\"\n          (click)=\"handleClick($event, item.value)\"\n        >\n          <a\n            href=\"{{state.createURL(item.value)}}\"\n            [class]=\"cx('link')\"\n            (click)=\"handleClick($event, item.value)\"\n          >\n            <span [class]=\"cx('label')\">{{item.label}}</span>\n            <span [class]=\"cx('count')\">{{item.count}}</span>\n          </a>\n        </li>\n      </ul>\n\n      <button\n        *ngIf=\"showMore\"\n        (click)=\"state.toggleShowMore()\"\n        [class]=\"showMoreClass\"\n        [disabled]=\"!state.canToggleShowMore\"\n      >\n        {{state.isShowingMore ? showLessLabel : showMoreLabel}}\n      </button>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        NgAisMenu.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(( /**
                                                 * @return {?}
                                                 */function () { return NgAisInstantSearch; })),] }] }
            ];
        };
        NgAisMenu.propDecorators = {
            showMoreLabel: [{ type: core.Input }],
            showLessLabel: [{ type: core.Input }],
            attribute: [{ type: core.Input }],
            showMore: [{ type: core.Input }],
            limit: [{ type: core.Input }],
            showMoreLimit: [{ type: core.Input }],
            sortBy: [{ type: core.Input }],
            transformItems: [{ type: core.Input }]
        };
        return NgAisMenu;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisMenuModule = /** @class */ (function () {
        function NgAisMenuModule() {
        }
        NgAisMenuModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisMenu],
                        entryComponents: [NgAisMenu],
                        exports: [NgAisMenu],
                        imports: [common.CommonModule],
                    },] }
        ];
        return NgAisMenuModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisNumericMenu = /** @class */ (function (_super) {
        __extends(NgAisNumericMenu, _super);
        function NgAisNumericMenu(instantSearchParent) {
            var _this = _super.call(this, 'NumericMenu') || this;
            _this.instantSearchParent = instantSearchParent;
            _this.state = {
                items: [],
                refine: noop,
                createURL: noop,
            };
            return _this;
        }
        Object.defineProperty(NgAisNumericMenu.prototype, "isHidden", {
            get: /**
             * @return {?}
             */ function () {
                return this.state.items.length === 0 && this.autoHideContainer;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisNumericMenu.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectNumericMenu, {
                    attribute: this.attribute,
                    items: this.items,
                    transformItems: this.transformItems,
                });
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * @param {?} event
         * @param {?} item
         * @return {?}
         */
        NgAisNumericMenu.prototype.refine = /**
         * @param {?} event
         * @param {?} item
         * @return {?}
         */
            function (event, item) {
                event.preventDefault();
                event.stopPropagation();
                this.state.refine(item.value);
            };
        NgAisNumericMenu.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-numeric-menu',
                        template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <ul [class]=\"cx('list')\">\n        <li\n          [class]=\"getItemClass(item)\"\n          *ngFor=\"let item of state.items\"\n        >\n          <label [class]=\"cx('label')\">\n            <input\n              [class]=\"cx('radio')\"\n              type=\"radio\"\n              name=\"NumericMenu\"\n              [checked]=\"item.isRefined\"\n              (change)=\"refine($event, item)\"\n            />\n            <span [class]=\"cx('labelText')\">{{item.label}}</span>\n          </label>\n        </li>\n      </ul>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        NgAisNumericMenu.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(( /**
                                                 * @return {?}
                                                 */function () { return NgAisInstantSearch; })),] }] }
            ];
        };
        NgAisNumericMenu.propDecorators = {
            attribute: [{ type: core.Input }],
            items: [{ type: core.Input }],
            transformItems: [{ type: core.Input }]
        };
        return NgAisNumericMenu;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisNumericMenuModule = /** @class */ (function () {
        function NgAisNumericMenuModule() {
        }
        NgAisNumericMenuModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisNumericMenu],
                        entryComponents: [NgAisNumericMenu],
                        exports: [NgAisNumericMenu],
                        imports: [common.CommonModule],
                    },] }
        ];
        return NgAisNumericMenuModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var range = require('lodash/range');
    var NgAisPagination = /** @class */ (function (_super) {
        __extends(NgAisPagination, _super);
        function NgAisPagination(instantSearchParent) {
            var _this = _super.call(this, 'Pagination') || this;
            _this.instantSearchParent = instantSearchParent;
            // rendering options
            _this.showFirst = true;
            _this.showLast = true;
            _this.showPrevious = true;
            _this.showNext = true;
            _this.padding = 3;
            _this.state = {
                createURL: noop,
                currentRefinement: 0,
                nbHits: 0,
                nbPages: 0,
                refine: noop,
            };
            return _this;
        }
        Object.defineProperty(NgAisPagination.prototype, "pages", {
            get: /**
             * @return {?}
             */ function () {
                var _a = this.state, nbPages = _a.nbPages, currentRefinement = _a.currentRefinement;
                /** @type {?} */
                var pagesArray = Array.apply(null, { length: nbPages }).map(Number.call, Number);
                /** @type {?} */
                var pagesPadding = typeof this.padding === 'string'
                    ? parseInt(this.padding, 10)
                    : this.padding;
                if (pagesPadding && pagesPadding > 0) {
                    // should not display pages that does not exists
                    if (nbPages < pagesPadding * 2 + 1) {
                        return pagesArray;
                    }
                    /** @type {?} */
                    var minDelta = currentRefinement - pagesPadding - 1;
                    /** @type {?} */
                    var maxDelta = currentRefinement + pagesPadding + 1;
                    if (minDelta < 0) {
                        return range(0, currentRefinement + pagesPadding + Math.abs(minDelta));
                    }
                    if (maxDelta > nbPages) {
                        return range(currentRefinement - pagesPadding - (maxDelta - nbPages), nbPages);
                    }
                    return range(currentRefinement - pagesPadding, currentRefinement + pagesPadding + 1);
                }
                return pagesArray;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisPagination.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectPagination, {
                    maxPages: parseNumberInput(this.totalPages),
                });
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * @param {?} event
         * @param {?} page
         * @return {?}
         */
        NgAisPagination.prototype.refine = /**
         * @param {?} event
         * @param {?} page
         * @return {?}
         */
            function (event, page) {
                event.stopPropagation();
                event.preventDefault();
                if (page < 0 ||
                    page === this.state.currentRefinement ||
                    page >= this.state.nbPages) {
                    return;
                }
                this.state.refine(page);
            };
        NgAisPagination.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-pagination',
                        template: "\n    <div [ngClass]=\"[cx(), state.nbPages <= 1 ? cx('', 'noRefinement') : '']\">\n      <ul [class]=\"cx('list')\">\n        <li\n          *ngIf=\"showFirst\"\n          (click)=\"refine($event, 0)\"\n          [class]=\"\n            cx('item') +\n            ' ' +\n            cx('item', 'firstPage') +\n            (state.currentRefinement === 0 ? ' ' + cx('item', 'disabled') : '')\n          \"\n        >\n          <a\n            [href]=\"state.createURL(0)\"\n            [class]=\"cx('link')\"\n          >\n            \u2039\u2039\n          </a>\n        </li>\n\n        <li\n          *ngIf=\"showPrevious\"\n          (click)=\"refine($event, state.currentRefinement - 1)\"\n          [class]=\"\n            cx('item') +\n            ' ' +\n            cx('item', 'previousPage') +\n            (state.currentRefinement === 0 ? ' ' + cx('item', 'disabled') : '')\n          \"\n        >\n          <a\n            [href]=\"state.createURL(state.currentRefinement - 1)\"\n            [class]=\"cx('link')\"\n          >\n            \u2039\n          </a>\n        </li>\n\n        <li\n          [class]=\"\n            cx('item') +\n            ' ' +\n            cx('item', 'page') +\n            (state.currentRefinement === page ? ' ' + cx('item', 'selected') : '')\n          \"\n          *ngFor=\"let page of pages\"\n          (click)=\"refine($event, page)\"\n        >\n          <a\n            [class]=\"cx('link')\"\n            [href]=\"state.createURL(page)\"\n          >\n            {{page + 1}}\n          </a>\n        </li>\n\n        <li\n          *ngIf=\"showNext\"\n          (click)=\"refine($event, state.currentRefinement + 1)\"\n          [class]=\"\n            cx('item') +\n            ' ' +\n            cx('item', 'nextPage') +\n            (state.currentRefinement + 1 === state.nbPages ? ' ' + cx('item', 'disabled') : '')\n          \"\n        >\n          <a\n            [href]=\"state.createURL(state.currentRefinement + 1)\"\n            [class]=\"cx('link')\"\n          >\n            \u203A\n          </a>\n        </li>\n\n        <li\n          *ngIf=\"showLast\"\n          (click)=\"refine($event, state.nbPages - 1)\"\n          [class]=\"\n            cx('item') +\n            ' ' +\n            cx('item', 'lastPage') +\n            (state.currentRefinement + 1 === state.nbPages ? ' ' + cx('item', 'disabled') : '')\n          \"\n        >\n          <a\n            [href]=\"state.createURL(state.nbPages - 1)\"\n            [class]=\"cx('link')\"\n          >\n            \u203A\u203A\n          </a>\n        </li>\n      </ul>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        NgAisPagination.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(( /**
                                                 * @return {?}
                                                 */function () { return NgAisInstantSearch; })),] }] }
            ];
        };
        NgAisPagination.propDecorators = {
            showFirst: [{ type: core.Input }],
            showLast: [{ type: core.Input }],
            showPrevious: [{ type: core.Input }],
            showNext: [{ type: core.Input }],
            padding: [{ type: core.Input }],
            totalPages: [{ type: core.Input }]
        };
        return NgAisPagination;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisPaginationModule = /** @class */ (function () {
        function NgAisPaginationModule() {
        }
        NgAisPaginationModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisPagination],
                        entryComponents: [NgAisPagination],
                        exports: [NgAisPagination],
                        imports: [common.CommonModule],
                    },] }
        ];
        return NgAisPaginationModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisRangeSlider = /** @class */ (function (_super) {
        __extends(NgAisRangeSlider, _super);
        function NgAisRangeSlider(instantSearchParent) {
            var _this = _super.call(this, 'RangeSlider') || this;
            _this.instantSearchParent = instantSearchParent;
            // rendering options
            _this.pips = true;
            _this.tooltips = true;
            _this.state = {
                range: { min: 0, max: 1 },
                refine: noop,
                start: [0, 1],
            };
            _this.updateState = ( /**
             * @param {?} state
             * @param {?} isFirstRendering
             * @return {?}
             */function (state, isFirstRendering) {
                if (isFirstRendering) {
                    // create slider
                    /** @type {?} */
                    var config = {
                        animate: false,
                        behaviour: 'snap',
                        connect: true,
                        range: { min: 0, max: 1 },
                        start: [0, 1],
                        step: _this.step,
                        tooltips: _this.tooltips && [
                            { to: _this.formatTooltip },
                            { to: _this.formatTooltip },
                        ],
                    };
                    if (_this.pips === true || typeof _this.pips === 'undefined') {
                        Object.assign(config, {
                            pips: {
                                density: 3,
                                mode: 'positions',
                                stepped: true,
                                values: [0, 50, 100],
                            },
                        });
                    }
                    else if (_this.pips !== undefined) {
                        Object.assign(config, { pips: _this.pips });
                    }
                    _this.slider = noUiSlider.create(_this.sliderContainer.nativeElement, config);
                    // register listen events
                    _this.sliderContainer.nativeElement.noUiSlider.on('change', _this.handleChange);
                }
                // update component inner state
                _this.state = state;
                // update the slider state
                var _a = state.range, min = _a.min, max = _a.max, start = state.start;
                /** @type {?} */
                var disabled = min === max;
                /** @type {?} */
                var range = disabled ? { min: min, max: max + 0.0001 } : { min: min, max: max };
                _this.slider.updateOptions({ disabled: disabled, range: range, start: start });
            });
            _this.handleChange = ( /**
             * @param {?} values
             * @return {?}
             */function (values) {
                _this.state.refine(values);
            });
            _this.formatTooltip = ( /**
             * @param {?} value
             * @return {?}
             */function (value) {
                return value.toFixed(parseNumberInput(_this.precision));
            });
            return _this;
        }
        Object.defineProperty(NgAisRangeSlider.prototype, "step", {
            get: /**
             * @return {?}
             */ function () {
                // compute step from the precision value
                /** @type {?} */
                var precision = parseNumberInput(this.precision) || 2;
                return 1 / Math.pow(10, precision);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisRangeSlider.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectRange, {
                    attribute: this.attribute,
                    max: parseNumberInput(this.max),
                    min: parseNumberInput(this.min),
                    precision: parseNumberInput(this.precision),
                });
                _super.prototype.ngOnInit.call(this);
            };
        NgAisRangeSlider.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-range-slider',
                        template: "\n    <div [class]=\"cx()\">\n      <div [class]=\"cx('body')\">\n        <div #sliderContainer></div>\n      </div>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        NgAisRangeSlider.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(( /**
                                                 * @return {?}
                                                 */function () { return NgAisInstantSearch; })),] }] }
            ];
        };
        NgAisRangeSlider.propDecorators = {
            sliderContainer: [{ type: core.ViewChild, args: ['sliderContainer',] }],
            pips: [{ type: core.Input }],
            tooltips: [{ type: core.Input }],
            attribute: [{ type: core.Input }],
            min: [{ type: core.Input }],
            max: [{ type: core.Input }],
            precision: [{ type: core.Input }]
        };
        return NgAisRangeSlider;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisRangeSliderModule = /** @class */ (function () {
        function NgAisRangeSliderModule() {
        }
        NgAisRangeSliderModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisRangeSlider],
                        entryComponents: [NgAisRangeSlider],
                        exports: [NgAisRangeSlider],
                        imports: [common.CommonModule],
                    },] }
        ];
        return NgAisRangeSliderModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisRefinementList = /** @class */ (function (_super) {
        __extends(NgAisRefinementList, _super);
        function NgAisRefinementList(instantSearchParent) {
            var _this = _super.call(this, 'RefinementList') || this;
            _this.instantSearchParent = instantSearchParent;
            // rendering options
            _this.showMoreLabel = 'Show more';
            _this.showLessLabel = 'Show less';
            _this.searchPlaceholder = 'Search here...';
            _this.state = {
                canRefine: false,
                canToggleShowMore: false,
                createURL: noop,
                isShowingMore: false,
                items: [],
                refine: noop,
                toggleShowMore: noop,
                searchForItems: noop,
                isFormSearch: false,
            };
            return _this;
        }
        Object.defineProperty(NgAisRefinementList.prototype, "isHidden", {
            get: /**
             * @return {?}
             */ function () {
                return this.state.items.length === 0 && this.autoHideContainer;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisRefinementList.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectRefinementList, {
                    showMore: this.showMore,
                    limit: parseNumberInput(this.limit),
                    showMoreLimit: parseNumberInput(this.showMoreLimit),
                    attribute: this.attribute,
                    operator: this.operator,
                    sortBy: this.sortBy,
                    escapeFacetValues: true,
                    transformItems: this.transformItems,
                });
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * @param {?} event
         * @param {?} item
         * @return {?}
         */
        NgAisRefinementList.prototype.refine = /**
         * @param {?} event
         * @param {?} item
         * @return {?}
         */
            function (event, item) {
                event.preventDefault();
                event.stopPropagation();
                if (this.state.canRefine) {
                    // update UI directly, it will update the checkbox state
                    item.isRefined = !item.isRefined;
                    // refine through Algolia API
                    this.state.refine(item.value);
                }
            };
        NgAisRefinementList.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-refinement-list',
                        template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <div\n        *ngIf=\"searchable\"\n        [class]=\"cx('searchBox')\"\n      >\n        <ais-facets-search\n          [search]=\"state.searchForItems\"\n          [searchPlaceholder]=\"searchPlaceholder\"\n        >\n        </ais-facets-search>\n      </div>\n\n      <ul [class]=\"cx('list')\">\n        <li\n          [class]=\"getItemClass(item)\"\n          *ngFor=\"let item of state.items\"\n          (click)=\"refine($event, item)\"\n        >\n          <label [class]=\"cx('label')\">\n            <input\n              [class]=\"cx('checkbox')\"\n              type=\"checkbox\"\n              value=\"{{item.value}}\"\n              [checked]=\"item.isRefined\"\n            />\n            <span [class]=\"cx('labelText')\">\n              <ais-highlight attribute=\"highlighted\" [hit]=\"item\"></ais-highlight>\n            </span>\n            <span [class]=\"cx('count')\">{{item.count}}</span>\n          </label>\n        </li>\n      </ul>\n\n      <button\n        [class]=\"cx('showMore')\"\n        *ngIf=\"showMore\"\n        (click)=\"state.toggleShowMore()\"\n        [disabled]=\"!state.canToggleShowMore\"\n      >\n        {{state.isShowingMore ? showLessLabel : showMoreLabel}}\n      </button>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        NgAisRefinementList.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(( /**
                                                 * @return {?}
                                                 */function () { return NgAisInstantSearch; })),] }] }
            ];
        };
        NgAisRefinementList.propDecorators = {
            showMoreLabel: [{ type: core.Input }],
            showLessLabel: [{ type: core.Input }],
            searchable: [{ type: core.Input }],
            searchPlaceholder: [{ type: core.Input }],
            attribute: [{ type: core.Input }],
            operator: [{ type: core.Input }],
            limit: [{ type: core.Input }],
            showMore: [{ type: core.Input }],
            showMoreLimit: [{ type: core.Input }],
            sortBy: [{ type: core.Input }],
            transformItems: [{ type: core.Input }]
        };
        return NgAisRefinementList;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisFacetsSearch = /** @class */ (function () {
        function NgAisFacetsSearch() {
            this.cx = bem('SearchBox');
            this.searchQuery = '';
        }
        /**
         * @param {?} value
         * @return {?}
         */
        NgAisFacetsSearch.prototype.handleChange = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.searchQuery = value;
                this.search(value);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NgAisFacetsSearch.prototype.handleSubmit = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                this.search(this.searchQuery);
            };
        NgAisFacetsSearch.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-facets-search',
                        template: "\n    <div [class]=\"cx()\">\n      <form\n        [class]=\"cx('form')\"\n        (submit)=\"handleSubmit($event)\"\n        novalidate\n      >\n        <input\n          [class]=\"cx('input')\"\n          autocapitalize=\"off\"\n          autocorrect=\"off\"\n          placeholder=\"{{searchPlaceholder}}\"\n          role=\"textbox\"\n          spellcheck=\"false\"\n          type=\"text\"\n          [value]=\"searchQuery\"\n          (input)=\"handleChange($event.target.value)\"\n        />\n\n        <button\n          [class]=\"cx('submit')\"\n          title=\"Submit the search query.\"\n          type=\"submit\"\n        >\n          <svg\n            [ngClass]=\"cx('submitIcon')\"\n            viewBox=\"0 0 40 40\"\n            width=\"10\"\n            height=\"10\"\n          >\n            <path d=\"M26.804 29.01c-2.832 2.34-6.465 3.746-10.426 3.746C7.333 32.756 0 25.424 0 16.378 0 7.333 7.333 0 16.378 0c9.046 0 16.378 7.333 16.378 16.378 0 3.96-1.406 7.594-3.746 10.426l10.534 10.534c.607.607.61 1.59-.004 2.202-.61.61-1.597.61-2.202.004L26.804 29.01zm-10.426.627c7.323 0 13.26-5.936 13.26-13.26 0-7.32-5.937-13.257-13.26-13.257C9.056 3.12 3.12 9.056 3.12 16.378c0 7.323 5.936 13.26 13.258 13.26z\"></path>\n          </svg>\n        </button>\n\n        <button\n          [class]=\"cx('reset')\"\n          type=\"reset\"\n          title=\"Clear the search query.\"\n          hidden\n        >\n          <svg\n            [ngClass]=\"cx('resetIcon')\"\n            viewBox=\"0 0 20 20\"\n            width=\"10\"\n            height=\"10\"\n          >\n            <path d=\"M8.114 10L.944 2.83 0 1.885 1.886 0l.943.943L10 8.113l7.17-7.17.944-.943L20 1.886l-.943.943-7.17 7.17 7.17 7.17.943.944L18.114 20l-.943-.943-7.17-7.17-7.17 7.17-.944.943L0 18.114l.943-.943L8.113 10z\"></path>\n          </svg>\n        </button>\n      </form>\n    </div>\n  "
                    }] }
        ];
        NgAisFacetsSearch.propDecorators = {
            searchPlaceholder: [{ type: core.Input }],
            search: [{ type: core.Input }]
        };
        return NgAisFacetsSearch;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisRefinementListModule = /** @class */ (function () {
        function NgAisRefinementListModule() {
        }
        NgAisRefinementListModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisRefinementList, NgAisFacetsSearch],
                        entryComponents: [NgAisRefinementList],
                        exports: [NgAisRefinementList],
                        imports: [common.CommonModule, NgAisHighlightModule],
                    },] }
        ];
        return NgAisRefinementListModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisSearchBox = /** @class */ (function (_super) {
        __extends(NgAisSearchBox, _super);
        function NgAisSearchBox(instantSearchParent) {
            var _this = _super.call(this, 'SearchBox') || this;
            _this.instantSearchParent = instantSearchParent;
            _this.placeholder = 'Search';
            _this.submitTitle = 'Submit';
            _this.resetTitle = 'Reset';
            _this.searchAsYouType = true;
            _this.autofocus = false;
            // Output events
            // form
            _this.submit = new core.EventEmitter();
            _this.reset = new core.EventEmitter();
            // input
            _this.change = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            _this.blur = new core.EventEmitter();
            _this.state = {
                query: '',
                refine: noop,
            };
            _this.createWidget(connectors.connectSearchBox);
            return _this;
        }
        /**
         * @return {?}
         */
        NgAisSearchBox.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                if (this.autofocus) {
                    this.searchBox.nativeElement.focus();
                }
            };
        /**
         * @param {?} query
         * @return {?}
         */
        NgAisSearchBox.prototype.handleChange = /**
         * @param {?} query
         * @return {?}
         */
            function (query) {
                this.change.emit(query);
                if (this.searchAsYouType) {
                    this.state.refine(query);
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NgAisSearchBox.prototype.handleSubmit = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                // send submit event to parent component
                this.submit.emit(event);
                event.preventDefault();
                if (!this.searchAsYouType) {
                    this.state.refine(this.searchBox.nativeElement.value);
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NgAisSearchBox.prototype.handleReset = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                // send reset event to parent component
                this.reset.emit(event);
                // reset search
                this.state.refine('');
            };
        NgAisSearchBox.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-search-box',
                        template: "\n    <div [class]=\"cx()\">\n      <form\n        [class]=\"cx('form')\"\n        novalidate\n        (submit)=\"handleSubmit($event)\"\n      >\n        <input\n          [class]=\"cx('input')\"\n          autocapitalize=\"off\"\n          autocorrect=\"off\"\n          placeholder=\"{{placeholder}}\"\n          role=\"textbox\"\n          spellcheck=\"false\"\n          type=\"text\"\n          [value]=\"state.query\"\n          (input)=\"handleChange($event.target.value)\"\n          (focus)=\"focus.emit($event)\"\n          (blur)=\"blur.emit($event)\"\n          #searchBox\n        />\n\n        <button\n          [class]=\"cx('submit')\"\n          type=\"submit\"\n          title=\"{{submitTitle}}\"\n        >\n          <svg\n            [ngClass]=\"cx('submitIcon')\"\n            viewBox=\"0 0 40 40\"\n            width=\"40\"\n            height=\"40\"\n          >\n            <path d=\"M26.804 29.01c-2.832 2.34-6.465 3.746-10.426 3.746C7.333 32.756 0 25.424 0 16.378 0 7.333 7.333 0 16.378 0c9.046 0 16.378 7.333 16.378 16.378 0 3.96-1.406 7.594-3.746 10.426l10.534 10.534c.607.607.61 1.59-.004 2.202-.61.61-1.597.61-2.202.004L26.804 29.01zm-10.426.627c7.323 0 13.26-5.936 13.26-13.26 0-7.32-5.937-13.257-13.26-13.257C9.056 3.12 3.12 9.056 3.12 16.378c0 7.323 5.936 13.26 13.258 13.26z\"></path>\n          </svg>\n        </button>\n\n        <button\n          [class]=\"cx('reset')\"\n          type=\"reset\"\n          title=\"{{resetTitle}}\"\n          (click)=\"handleReset($event)\"\n          [hidden]=\"!state.query || (state.query && !state.query.trim())\">\n          <svg\n            [ngClass]=\"cx('resetIcon')\"\n            viewBox=\"0 0 20 20\"\n            width=\"20\"\n            height=\"20\"\n          >\n            <path d=\"M8.114 10L.944 2.83 0 1.885 1.886 0l.943.943L10 8.113l7.17-7.17.944-.943L20 1.886l-.943.943-7.17 7.17 7.17 7.17.943.944L18.114 20l-.943-.943-7.17-7.17-7.17 7.17-.944.943L0 18.114l.943-.943L8.113 10z\"></path>\n          </svg>\n        </button>\n      </form>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        NgAisSearchBox.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(( /**
                                                 * @return {?}
                                                 */function () { return NgAisInstantSearch; })),] }] }
            ];
        };
        NgAisSearchBox.propDecorators = {
            searchBox: [{ type: core.ViewChild, args: ['searchBox',] }],
            placeholder: [{ type: core.Input }],
            submitTitle: [{ type: core.Input }],
            resetTitle: [{ type: core.Input }],
            searchAsYouType: [{ type: core.Input }],
            autofocus: [{ type: core.Input }],
            submit: [{ type: core.Output }],
            reset: [{ type: core.Output }],
            change: [{ type: core.Output }],
            focus: [{ type: core.Output }],
            blur: [{ type: core.Output }]
        };
        return NgAisSearchBox;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisSearchBoxModule = /** @class */ (function () {
        function NgAisSearchBoxModule() {
        }
        NgAisSearchBoxModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisSearchBox],
                        entryComponents: [NgAisSearchBox],
                        exports: [NgAisSearchBox],
                        imports: [common.CommonModule],
                    },] }
        ];
        return NgAisSearchBoxModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisSortBy = /** @class */ (function (_super) {
        __extends(NgAisSortBy, _super);
        function NgAisSortBy(instantSearchParent) {
            var _this = _super.call(this, 'SortBy') || this;
            _this.instantSearchParent = instantSearchParent;
            _this.state = {
                currentRefinement: null,
                options: [],
                refine: noop,
            };
            return _this;
        }
        /**
         * @return {?}
         */
        NgAisSortBy.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectSortBy, {
                    items: this.items,
                    transformItems: this.transformItems,
                });
                _super.prototype.ngOnInit.call(this);
            };
        NgAisSortBy.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-sort-by',
                        template: "\n    <div [class]=\"cx()\">\n      <select\n        [class]=\"cx('select')\"\n        (change)=\"state.refine($event.target.value)\"\n      >\n        <option\n          [class]=\"cx('option')\"\n          *ngFor=\"let item of state.options\"\n          [value]=\"item.value\"\n          [selected]=\"item.value === state.currentRefinement\"\n        >\n          {{item.label}}\n        </option>\n      </select>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        NgAisSortBy.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(( /**
                                                 * @return {?}
                                                 */function () { return NgAisInstantSearch; })),] }] }
            ];
        };
        NgAisSortBy.propDecorators = {
            items: [{ type: core.Input }],
            transformItems: [{ type: core.Input }]
        };
        return NgAisSortBy;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisSortByModule = /** @class */ (function () {
        function NgAisSortByModule() {
        }
        NgAisSortByModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisSortBy],
                        entryComponents: [NgAisSortBy],
                        exports: [NgAisSortBy],
                        imports: [common.CommonModule],
                    },] }
        ];
        return NgAisSortByModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisRatingMenu = /** @class */ (function (_super) {
        __extends(NgAisRatingMenu, _super);
        function NgAisRatingMenu(instantSearchParent) {
            var _this = _super.call(this, 'RatingMenu') || this;
            _this.instantSearchParent = instantSearchParent;
            // rendering options
            _this.andUpLabel = '& Up';
            _this.state = {
                createURL: noop,
                hasNoResults: false,
                items: [],
                refine: noop,
            };
            return _this;
        }
        Object.defineProperty(NgAisRatingMenu.prototype, "isHidden", {
            get: /**
             * @return {?}
             */ function () {
                return this.state.items.length === 0 && this.autoHideContainer;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisRatingMenu.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectRatingMenu, {
                    attribute: this.attribute,
                    max: parseNumberInput(this.max),
                });
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * @param {?} event
         * @param {?} value
         * @return {?}
         */
        NgAisRatingMenu.prototype.handleClick = /**
         * @param {?} event
         * @param {?} value
         * @return {?}
         */
            function (event, value) {
                event.preventDefault();
                event.stopPropagation();
                this.state.refine(value);
            };
        NgAisRatingMenu.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-rating-menu',
                        template: "\n    <div\n      [ngClass]=\"[\n        cx(),\n        state.items.length === 0 ? cx('', 'noRefinement') : ''\n      ]\"\n      *ngIf=\"!isHidden\"\n    >\n      <svg style=\"display:none;\">\n        <symbol\n          id=\"ais-StarRating-starSymbol\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path d=\"M12 .288l2.833 8.718h9.167l-7.417 5.389 2.833 8.718-7.416-5.388-7.417 5.388 2.833-8.718-7.416-5.389h9.167z\"/>\n        </symbol>\n        <symbol\n          id=\"ais-StarRating-starEmptySymbol\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path d=\"M12 6.76l1.379 4.246h4.465l-3.612 2.625 1.379 4.246-3.611-2.625-3.612 2.625 1.379-4.246-3.612-2.625h4.465l1.38-4.246zm0-6.472l-2.833 8.718h-9.167l7.416 5.389-2.833 8.718 7.417-5.388 7.416 5.388-2.833-8.718 7.417-5.389h-9.167l-2.833-8.718z\"/>\n        </symbol>\n      </svg>\n\n      <ul [class]=\"cx('list')\">\n        <li\n          *ngFor=\"let item of state.items\"\n          [class]=\"getItemClass(item)\"\n          (click)=\"handleClick($event, item.value)\"\n        >\n          <a\n            href=\"{{state.createURL(item.value)}}\"\n            [class]=\"cx('link')\"\n            (click)=\"handleClick($event, item.value)\"\n          >\n            <svg\n              width=\"24\"\n              height=\"24\"\n              *ngFor=\"let star of item.stars\"\n              [ngClass]=\"cx('starIcon') + ' ' + (star ? cx('starIcon', 'full') : cx('starIcon', 'empty'))\"\n              aria-hidden=\"true\"\n            >\n              <use\n                *ngIf=\"star\"\n                xlink:href=\"#ais-StarRating-starSymbol\"\n              >\n              </use>\n\n              <use\n                *ngIf=\"!star\"\n                xlink:href=\"#ais-StarRating-starEmptySymbol\"\n              >\n              </use>\n            </svg>\n\n            <span [class]=\"cx('label')\" aria-hidden=\"true\">{{andUpLabel}}</span>\n            <span [class]=\"cx('count')\">{{item.count}}</span>\n          </a>\n        </li>\n      </ul>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        NgAisRatingMenu.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(( /**
                                                 * @return {?}
                                                 */function () { return NgAisInstantSearch; })),] }] }
            ];
        };
        NgAisRatingMenu.propDecorators = {
            andUpLabel: [{ type: core.Input }],
            attribute: [{ type: core.Input }],
            max: [{ type: core.Input }]
        };
        return NgAisRatingMenu;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisRatingMenuModule = /** @class */ (function () {
        function NgAisRatingMenuModule() {
        }
        NgAisRatingMenuModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisRatingMenu],
                        entryComponents: [NgAisRatingMenu],
                        exports: [NgAisRatingMenu],
                        imports: [common.CommonModule],
                    },] }
        ];
        return NgAisRatingMenuModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisStats = /** @class */ (function (_super) {
        __extends(NgAisStats, _super);
        function NgAisStats(instantSearchParent) {
            var _this = _super.call(this, 'Stats') || this;
            _this.instantSearchParent = instantSearchParent;
            _this.state = {
                hitPerPage: 0,
                nbHits: 0,
                nbPages: 0,
                page: 0,
                processingTimeMS: 0,
                query: '',
            };
            _this.createWidget(connectors.connectStats);
            return _this;
        }
        Object.defineProperty(NgAisStats.prototype, "templateContext", {
            get: /**
             * @return {?}
             */ function () {
                return { state: this.state };
            },
            enumerable: true,
            configurable: true
        });
        NgAisStats.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-stats',
                        template: "\n    <div [class]=\"cx()\">\n      <ng-container *ngTemplateOutlet=\"template; context: templateContext\">\n      </ng-container>\n\n      <span *ngIf=\"!template\" [class]=\"cx('text')\">\n        {{state.nbHits}} results found in {{state.processingTimeMS}}ms.\n      </span>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        NgAisStats.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(( /**
                                                 * @return {?}
                                                 */function () { return NgAisInstantSearch; })),] }] }
            ];
        };
        NgAisStats.propDecorators = {
            template: [{ type: core.ContentChild, args: [core.TemplateRef,] }]
        };
        return NgAisStats;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisStatsModule = /** @class */ (function () {
        function NgAisStatsModule() {
        }
        NgAisStatsModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisStats],
                        entryComponents: [NgAisStats],
                        exports: [NgAisStats],
                        imports: [common.CommonModule],
                    },] }
        ];
        return NgAisStatsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisToggle = /** @class */ (function (_super) {
        __extends(NgAisToggle, _super);
        function NgAisToggle(instantSearchParent) {
            var _this = _super.call(this, 'ToggleRefinement') || this;
            _this.instantSearchParent = instantSearchParent;
            _this.state = {
                createURL: noop,
                refine: noop,
                value: {},
            };
            return _this;
        }
        /**
         * @return {?}
         */
        NgAisToggle.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectToggleRefinement, {
                    attribute: this.attribute,
                    on: this.on,
                    off: this.off,
                });
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NgAisToggle.prototype.handleChange = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                event.stopPropagation();
                this.state.refine(this.state.value);
            };
        NgAisToggle.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-toggle',
                        template: "\n    <div [class]=\"cx()\">\n      <label [class]=\"cx('label')\">\n        <input\n          [class]=\"cx('checkbox')\"\n          type=\"checkbox\"\n          value=\"{{state.value.name}}\"\n          [checked]=\"state.value.isRefined\"\n          (change)=\"handleChange($event)\"\n        />\n\n        <span [class]=\"cx('labelText')\">\n          {{label || state.value.name}}\n        </span>\n\n        <span [class]=\"cx('count')\">{{state.value.count}}</span>\n      </label>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        NgAisToggle.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(( /**
                                                 * @return {?}
                                                 */function () { return NgAisInstantSearch; })),] }] }
            ];
        };
        NgAisToggle.propDecorators = {
            label: [{ type: core.Input }],
            attribute: [{ type: core.Input }],
            on: [{ type: core.Input }],
            off: [{ type: core.Input }]
        };
        return NgAisToggle;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisToggleModule = /** @class */ (function () {
        function NgAisToggleModule() {
        }
        NgAisToggleModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisToggle],
                        entryComponents: [NgAisToggle],
                        exports: [NgAisToggle],
                        imports: [common.CommonModule],
                    },] }
        ];
        return NgAisToggleModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisRangeInput = /** @class */ (function (_super) {
        __extends(NgAisRangeInput, _super);
        function NgAisRangeInput(instantSearchParent) {
            var _this = _super.call(this, 'RangeInput') || this;
            _this.instantSearchParent = instantSearchParent;
            // rendering options
            _this.currency = '$';
            _this.separator = 'to';
            _this.submitLabel = 'Go';
            _this.precision = 0;
            // inner state
            _this.minInputValue = '';
            _this.maxInputValue = '';
            _this.state = {
                range: { min: undefined, max: undefined },
                refine: noop,
                start: [0, 0],
            };
            return _this;
        }
        Object.defineProperty(NgAisRangeInput.prototype, "step", {
            get: /**
             * @return {?}
             */ function () {
                /** @type {?} */
                var precision = parseNumberInput(this.precision);
                return 1 / Math.pow(10, precision);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgAisRangeInput.prototype, "canRefine", {
            get: /**
             * @return {?}
             */ function () {
                return this.state.range.min !== this.state.range.max;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisRangeInput.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectRange, {
                    attribute: this.attribute,
                    max: parseNumberInput(this.max),
                    min: parseNumberInput(this.min),
                    precision: parseNumberInput(this.precision),
                });
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * @param {?} event
         * @param {?} type
         * @return {?}
         */
        NgAisRangeInput.prototype.handleChange = /**
         * @param {?} event
         * @param {?} type
         * @return {?}
         */
            function (event, type) {
                /** @type {?} */
                var value = parseNumberInput(event.target.value);
                if (type === 'min') {
                    this.minInputValue = value;
                }
                else {
                    this.maxInputValue = value;
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NgAisRangeInput.prototype.handleSubmit = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                this.state.refine([this.minInputValue, this.maxInputValue]);
            };
        NgAisRangeInput.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-range-input',
                        template: "\n    <div [ngClass]=\"[\n        cx(), \n        !canRefine ? cx('', 'noRefinement') : ''\n      ]\">\n      <form\n        [class]=\"cx('form')\"\n        (submit)=\"handleSubmit($event)\"\n        novalidate\n      >\n        <label [class]=\"cx('label')\">\n          <span [class]=\"cx('currency')\">{{currency}}</span>\n          <input\n            [ngClass]=\"[\n              cx('input'),\n              cx('input', 'min')\n            ]\"\n            type=\"number\"\n            [min]=\"state.range.min\"\n            [max]=\"state.range.max\"\n            [placeholder]=\"state.range.min\"\n            [value]=\"minInputValue\"\n            [step]=\"step\"\n            (change)=\"handleChange($event, 'min')\"\n          />\n        </label>\n\n        <span [class]=\"cx('separator')\">{{separator}}</span>\n\n        <label [class]=\"cx('label')\">\n          <span [class]=\"cx('currency')\">{{currency}}</span>\n          <input\n            [ngClass]=\"[\n              cx('input'),\n              cx('input', 'max')\n            ]\"\n            type=\"number\"\n            [min]=\"state.range.min\"\n            [max]=\"state.range.max\"\n            [placeholder]=\"state.range.max\"\n            [value]=\"maxInputValue\"\n            [step]=\"step\"\n            (change)=\"handleChange($event, 'max')\"\n          />\n        </label>\n\n        <button\n          [class]=\"cx('submit')\"\n          (click)=\"handleSubmit($event)\"\n        >\n          {{submitLabel}}\n        </button>\n      </form>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        NgAisRangeInput.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(( /**
                                                 * @return {?}
                                                 */function () { return NgAisInstantSearch; })),] }] }
            ];
        };
        NgAisRangeInput.propDecorators = {
            currency: [{ type: core.Input }],
            separator: [{ type: core.Input }],
            submitLabel: [{ type: core.Input }],
            attribute: [{ type: core.Input }],
            min: [{ type: core.Input }],
            max: [{ type: core.Input }],
            precision: [{ type: core.Input }]
        };
        return NgAisRangeInput;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisRangeInputModule = /** @class */ (function () {
        function NgAisRangeInputModule() {
        }
        NgAisRangeInputModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisRangeInput],
                        entryComponents: [NgAisRangeInput],
                        exports: [NgAisRangeInput],
                        imports: [common.CommonModule],
                    },] }
        ];
        return NgAisRangeInputModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisPanel = /** @class */ (function () {
        function NgAisPanel() {
        }
        NgAisPanel.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-panel',
                        template: "\n    <div class=\"ais-Panel\">\n      <div *ngIf=\"header\" class=\"ais-Panel-header\">\n        {{header}}\n      </div>\n\n      <div class=\"ais-Panel-body\">\n        <ng-content></ng-content>\n      </div>\n\n      <div *ngIf=\"footer\" class=\"ais-Panel-footer\">\n        {{footer}}\n      </div>\n    </div>\n  "
                    }] }
        ];
        NgAisPanel.propDecorators = {
            header: [{ type: core.Input }],
            footer: [{ type: core.Input }]
        };
        return NgAisPanel;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisPanelModule = /** @class */ (function () {
        function NgAisPanelModule() {
        }
        NgAisPanelModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisPanel],
                        entryComponents: [NgAisPanel],
                        exports: [NgAisPanel],
                        imports: [common.CommonModule],
                    },] }
        ];
        return NgAisPanelModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisConfigure = /** @class */ (function (_super) {
        __extends(NgAisConfigure, _super);
        function NgAisConfigure(differs, instantSearchParent) {
            var _this = _super.call(this, 'Configure') || this;
            _this.differs = differs;
            _this.instantSearchParent = instantSearchParent;
            // SearchParameters (I don't know how to get the values of the type)
            _this.state = {
                refine: noop,
            };
            return _this;
        }
        Object.defineProperty(NgAisConfigure.prototype, "searchParameters", {
            set: /**
             * @param {?} values
             * @return {?}
             */ function (values) {
                this.internalSearchParameters = values;
                if (!this.differ && values) {
                    this.differ = this.differs.find(values).create();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisConfigure.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectConfigure, {
                    searchParameters: this.internalSearchParameters,
                });
                _super.prototype.ngOnInit.call(this);
            };
        /**
         * @return {?}
         */
        NgAisConfigure.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () {
                if (this.differ) {
                    /** @type {?} */
                    var changes = this.differ.diff(this.internalSearchParameters);
                    if (changes) {
                        this.state.refine(this.internalSearchParameters);
                    }
                }
            };
        NgAisConfigure.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-configure',
                        template: ''
                    }] }
        ];
        /** @nocollapse */
        NgAisConfigure.ctorParameters = function () {
            return [
                { type: core.KeyValueDiffers },
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(( /**
                                                 * @return {?}
                                                 */function () { return NgAisInstantSearch; })),] }] }
            ];
        };
        NgAisConfigure.propDecorators = {
            searchParameters: [{ type: core.Input }]
        };
        return NgAisConfigure;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisConfigureModule = /** @class */ (function () {
        function NgAisConfigureModule() {
        }
        NgAisConfigureModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisConfigure],
                        entryComponents: [NgAisConfigure],
                        exports: [NgAisConfigure],
                        imports: [common.CommonModule],
                    },] }
        ];
        return NgAisConfigureModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisQueryRuleCustomData = /** @class */ (function (_super) {
        __extends(NgAisQueryRuleCustomData, _super);
        function NgAisQueryRuleCustomData(instantSearchParent) {
            var _this = _super.call(this, 'QueryRuleCustomData') || this;
            _this.instantSearchParent = instantSearchParent;
            _this.state = {
                items: [],
            };
            return _this;
        }
        Object.defineProperty(NgAisQueryRuleCustomData.prototype, "templateContext", {
            get: /**
             * @return {?}
             */ function () {
                return {
                    items: this.state.items,
                };
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgAisQueryRuleCustomData.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectQueryRules, {
                    transformItems: this.transformItems,
                });
                _super.prototype.ngOnInit.call(this);
            };
        NgAisQueryRuleCustomData.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-query-rule-custom-data',
                        template: "\n    <div [class]=\"cx()\">\n      <ng-container *ngTemplateOutlet=\"template; context: templateContext\">\n      </ng-container>\n\n      <div *ngIf=\"!template\">\n        <div *ngFor=\"let item of state.items\">\n          <pre>{{ item | json }}</pre>\n        </div>\n      </div>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        NgAisQueryRuleCustomData.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(( /**
                                                 * @return {?}
                                                 */function () { return NgAisInstantSearch; })),] }] }
            ];
        };
        NgAisQueryRuleCustomData.propDecorators = {
            template: [{ type: core.ContentChild, args: [core.TemplateRef,] }],
            transformItems: [{ type: core.Input }]
        };
        return NgAisQueryRuleCustomData;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisQueryRuleCustomDataModule = /** @class */ (function () {
        function NgAisQueryRuleCustomDataModule() {
        }
        NgAisQueryRuleCustomDataModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisQueryRuleCustomData],
                        entryComponents: [NgAisQueryRuleCustomData],
                        exports: [NgAisQueryRuleCustomData],
                        imports: [common.CommonModule],
                    },] }
        ];
        return NgAisQueryRuleCustomDataModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisQueryRuleContext = /** @class */ (function (_super) {
        __extends(NgAisQueryRuleContext, _super);
        function NgAisQueryRuleContext(instantSearchParent) {
            var _this = _super.call(this, 'QueryRuleContext') || this;
            _this.instantSearchParent = instantSearchParent;
            return _this;
        }
        /**
         * @return {?}
         */
        NgAisQueryRuleContext.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectQueryRules, {
                    trackedFilters: this.trackedFilters,
                    transformRuleContexts: this.transformRuleContexts,
                });
                _super.prototype.ngOnInit.call(this);
            };
        NgAisQueryRuleContext.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-query-rule-context',
                        template: ''
                    }] }
        ];
        /** @nocollapse */
        NgAisQueryRuleContext.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(( /**
                                                 * @return {?}
                                                 */function () { return NgAisInstantSearch; })),] }] }
            ];
        };
        NgAisQueryRuleContext.propDecorators = {
            trackedFilters: [{ type: core.Input }],
            transformRuleContexts: [{ type: core.Input }]
        };
        return NgAisQueryRuleContext;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisQueryRuleContextModule = /** @class */ (function () {
        function NgAisQueryRuleContextModule() {
        }
        NgAisQueryRuleContextModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisQueryRuleContext],
                        entryComponents: [NgAisQueryRuleContext],
                        exports: [NgAisQueryRuleContext],
                        imports: [common.CommonModule],
                    },] }
        ];
        return NgAisQueryRuleContextModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisVoiceSearch = /** @class */ (function (_super) {
        __extends(NgAisVoiceSearch, _super);
        function NgAisVoiceSearch(instantSearchParent, zone) {
            var _this = _super.call(this, 'VoiceSearch') || this;
            _this.instantSearchParent = instantSearchParent;
            _this.zone = zone;
            _this.buttonTitle = 'Search by voice';
            _this.disabledButtonTitle = 'Search by voice (not supported on this browser)';
            _this.state = {
                isBrowserSupported: undefined,
                isListening: undefined,
                toggleListening: noop,
                voiceListeningState: {
                    status: 'initial',
                    transcript: '',
                    isSpeechFinal: false,
                    errorCode: undefined,
                },
                templateContext: {
                    status: 'initial',
                    errorCode: undefined,
                    transcript: '',
                    isSpeechFinal: false,
                    isListening: false,
                    isBrowserSupported: false,
                },
            };
            _this.handleClick = ( /**
             * @param {?} event
             * @return {?}
             */function (event) {
                (( /** @type {?} */(event.currentTarget))).blur();
                _this.state.toggleListening();
            });
            _this.isNotAllowedError = ( /**
             * @return {?}
             */function () {
                return _this.state.voiceListeningState.status === 'error' &&
                    _this.state.voiceListeningState.errorCode === 'not-allowed';
            });
            _this.updateState = ( /**
             * @param {?} state
             * @return {?}
             */function (state) {
                _this.zone.run(( /**
                 * @return {?}
                 */function () {
                    _this.state = __assign({}, state, { templateContext: {
                            status: state.voiceListeningState.status,
                            errorCode: state.voiceListeningState.errorCode,
                            transcript: state.voiceListeningState.transcript,
                            isSpeechFinal: state.voiceListeningState.isSpeechFinal,
                            isListening: state.isListening,
                            isBrowserSupported: state.isBrowserSupported,
                        } });
                }));
            });
            return _this;
        }
        /**
         * @return {?}
         */
        NgAisVoiceSearch.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.createWidget(connectors.connectVoiceSearch, {
                    searchAsYouSpeak: this.searchAsYouSpeak,
                });
                _super.prototype.ngOnInit.call(this);
            };
        NgAisVoiceSearch.decorators = [
            { type: core.Component, args: [{
                        selector: 'ais-voice-search',
                        template: "\n    <div [class]=\"cx()\">\n      <button\n        type=\"button\"\n        [class]=\"cx('button')\"\n        [title]=\"state.isBrowserSupported ? buttonTitle : disabledButtonTitle\"\n        [disabled]=\"!state.isBrowserSupported\"\n        (click)=\"handleClick($event)\"\n      >\n        <ng-container *ngTemplateOutlet=\"button ? button : defaultButton; context: state.templateContext\"></ng-container>\n      </button>\n      <div [class]=\"cx('status')\">\n        <ng-container *ngTemplateOutlet=\"status ? status : defaultStatus; context: state.templateContext\"></ng-container>\n      </div>\n    </div>\n\n    <ng-template #defaultButton let-status=\"status\" let-errorCode=\"errorCode\" let-isListening=\"isListening\">\n      <svg\n        xmlns='http://www.w3.org/2000/svg'\n        width='16'\n        height='16'\n        viewBox='0 0 24 24'\n        fill='none'\n        stroke='currentColor'\n        strokeWidth='2'\n        strokeLinecap='round'\n        strokeLinejoin='round'\n      >\n        <ng-container *ngIf=\"isNotAllowedError(); then errorSvgContent else normalSvgContent\">\n        </ng-container>\n        <ng-template #errorSvgContent>\n          <line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\"></line>\n          <path d=\"M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6\"></path>\n          <path d=\"M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23\"></path>\n          <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"23\"></line>\n          <line x1=\"8\" y1=\"23\" x2=\"16\" y2=\"23\"></line>\n        </ng-template>\n        <ng-template #normalSvgContent>\n          <path\n            d=\"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z\"\n            [attr.fill]=\"isListening ? 'currentColor' : 'none'\"\n          ></path>\n          <path d=\"M19 10v2a7 7 0 0 1-14 0v-2\"></path>\n          <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"23\"></line>\n          <line x1=\"8\" y1=\"23\" x2=\"16\" y2=\"23\"></line>\n        </ng-template>\n      </svg>\n    </ng-template>\n    <ng-template #defaultStatus let-transcript=\"transcript\">\n      <p>{{transcript}}</p>\n    </ng-template>\n  "
                    }] }
        ];
        /** @nocollapse */
        NgAisVoiceSearch.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.forwardRef(( /**
                                                 * @return {?}
                                                 */function () { return NgAisInstantSearch; })),] }] },
                { type: core.NgZone }
            ];
        };
        NgAisVoiceSearch.propDecorators = {
            button: [{ type: core.ContentChild, args: ['button',] }],
            status: [{ type: core.ContentChild, args: ['status',] }],
            searchAsYouSpeak: [{ type: core.Input }],
            buttonTitle: [{ type: core.Input }],
            disabledButtonTitle: [{ type: core.Input }]
        };
        return NgAisVoiceSearch;
    }(BaseWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAisVoiceSearchModule = /** @class */ (function () {
        function NgAisVoiceSearchModule() {
        }
        NgAisVoiceSearchModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgAisVoiceSearch],
                        entryComponents: [NgAisVoiceSearch],
                        exports: [NgAisVoiceSearch],
                        imports: [common.CommonModule],
                    },] }
        ];
        return NgAisVoiceSearchModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var algoliasearch$1 = algoliasearchProxy$1__default || algoliasearchProxy$1;
    /** @type {?} */
    var encode = encodeProxy__default || encodeProxy;
    /**
     * @param {?} __0
     * @return {?}
     */
    function createSSRSearchClient(_a) {
        var appId = _a.appId, apiKey = _a.apiKey, httpClient = _a.httpClient, HttpHeaders = _a.HttpHeaders, transferState = _a.transferState, makeStateKey = _a.makeStateKey, _b = _a.options, options = _b === void 0 ? {} : _b;
        /** @type {?} */
        var searchClient = algoliasearch$1(appId, apiKey, options);
        searchClient.addAlgoliaAgent("angular (" + core.VERSION.full + ")");
        searchClient.addAlgoliaAgent("angular-instantsearch (" + VERSION + ")");
        searchClient.addAlgoliaAgent("angular-instantsearch-server (" + VERSION + ")");
        (( /** @type {?} */(searchClient)))._request = ( /**
         * @param {?} rawUrl
         * @param {?} options
         * @return {?}
         */function (rawUrl, options) {
            /** @type {?} */
            var headers = new HttpHeaders();
            headers = headers.set('content-type', options.method === 'POST'
                ? 'application/x-www-form-urlencoded'
                : 'application/json');
            headers = headers.set('accept', 'application/json');
            /** @type {?} */
            var url = rawUrl + (rawUrl.includes('?') ? '&' : '?') + encode(options.headers);
            /** @type {?} */
            var transferStateKey = makeStateKey("ngais(" + options.body + ")");
            if (transferState.hasKey(transferStateKey)) {
                /** @type {?} */
                var response = JSON.parse(transferState.get(transferStateKey, JSON.stringify({})));
                return Promise.resolve({
                    statusCode: response.status,
                    body: response.body,
                    headers: response.headers,
                });
            }
            return new Promise(( /**
             * @param {?} resolve
             * @param {?} reject
             * @return {?}
             */function (resolve, reject) {
                httpClient
                    .request(options.method, url, {
                    headers: headers,
                    body: options.body,
                    observe: 'response',
                })
                    .subscribe(( /**
             * @param {?} response
             * @return {?}
             */function (response) {
                    transferState.set(transferStateKey, JSON.stringify(response));
                    resolve({
                        statusCode: response.status,
                        body: response.body,
                        headers: response.headers,
                    });
                }), ( /**
                 * @param {?} response
                 * @return {?}
                 */function (response) {
                    return reject({
                        statusCode: response.status,
                        body: response.body,
                        headers: response.headers,
                    });
                }));
            }));
        });
        return searchClient;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // Transforms url query to SearchParameters
    /**
     * @param {?} req
     * @return {?}
     */
    function parseServerRequest(req) {
        if (req && req.url && req.url.includes('?')) {
            /** @type {?} */
            var query = req.url.split('?')[1];
            return algoliasearchHelper.AlgoliaSearchHelper.getConfigurationFromQueryString(query);
        }
        return {};
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var NGIS_MODULES = [
        NgAisInstantSearchModule,
        NgAisHitsModule,
        NgAisSearchBoxModule,
        NgAisClearRefinementsModule,
        NgAisMenuModule,
        NgAisPaginationModule,
        NgAisRefinementListModule,
        NgAisHitsPerPageModule,
        NgAisSortByModule,
        NgAisNumericMenuModule,
        NgAisStatsModule,
        NgAisToggleModule,
        NgAisInfiniteHitsModule,
        NgAisCurrentRefinementsModule,
        NgAisHierarchicalMenuModule,
        NgAisRatingMenuModule,
        NgAisRangeSliderModule,
        NgAisBreadcrumbModule,
        NgAisHighlightModule,
        NgAisRangeInputModule,
        NgAisPanelModule,
        NgAisConfigureModule,
        NgAisQueryRuleCustomDataModule,
        NgAisQueryRuleContextModule,
        NgAisVoiceSearchModule,
    ];
    var NgAisRootModule = /** @class */ (function () {
        function NgAisRootModule() {
        }
        NgAisRootModule.decorators = [
            { type: core.NgModule, args: [{
                        exports: NGIS_MODULES,
                        imports: [NgAisInstantSearchModule.forRoot()],
                    },] }
        ];
        return NgAisRootModule;
    }());
    var NgAisModule = /** @class */ (function () {
        function NgAisModule() {
        }
        /**
         * @return {?}
         */
        NgAisModule.forRoot = /**
         * @return {?}
         */
            function () {
                return { ngModule: NgAisRootModule };
            };
        NgAisModule.decorators = [
            { type: core.NgModule, args: [{ imports: NGIS_MODULES, exports: NGIS_MODULES },] }
        ];
        return NgAisModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NgAisBreadcrumbModule = NgAisBreadcrumbModule;
    exports.NgAisClearRefinementsModule = NgAisClearRefinementsModule;
    exports.NgAisCurrentRefinementsModule = NgAisCurrentRefinementsModule;
    exports.NgAisHierarchicalMenuModule = NgAisHierarchicalMenuModule;
    exports.NgAisHitsPerPageModule = NgAisHitsPerPageModule;
    exports.NgAisHitsModule = NgAisHitsModule;
    exports.NgAisInfiniteHitsModule = NgAisInfiniteHitsModule;
    exports.NgAisInstantSearchModule = NgAisInstantSearchModule;
    exports.NgAisMenuModule = NgAisMenuModule;
    exports.NgAisNumericMenuModule = NgAisNumericMenuModule;
    exports.NgAisPaginationModule = NgAisPaginationModule;
    exports.NgAisRangeSliderModule = NgAisRangeSliderModule;
    exports.NgAisRefinementListModule = NgAisRefinementListModule;
    exports.NgAisSearchBoxModule = NgAisSearchBoxModule;
    exports.NgAisSortByModule = NgAisSortByModule;
    exports.NgAisRatingMenuModule = NgAisRatingMenuModule;
    exports.NgAisStatsModule = NgAisStatsModule;
    exports.NgAisToggleModule = NgAisToggleModule;
    exports.NgAisHighlightModule = NgAisHighlightModule;
    exports.NgAisRangeInputModule = NgAisRangeInputModule;
    exports.NgAisPanelModule = NgAisPanelModule;
    exports.NgAisConfigureModule = NgAisConfigureModule;
    exports.NgAisQueryRuleCustomDataModule = NgAisQueryRuleCustomDataModule;
    exports.NgAisQueryRuleContextModule = NgAisQueryRuleContextModule;
    exports.NgAisVoiceSearchModule = NgAisVoiceSearchModule;
    exports.createSSRSearchClient = createSSRSearchClient;
    exports.parseServerRequest = parseServerRequest;
    exports.BaseWidget = BaseWidget;
    exports.Widget = Widget;
    exports.NgAisInstantSearch = NgAisInstantSearch;
    exports.NgAisRootModule = NgAisRootModule;
    exports.NgAisModule = NgAisModule;
    exports.ɵb = NgAisBreadcrumb;
    exports.ɵc = NgAisClearRefinements;
    exports.ɵw = NgAisConfigure;
    exports.ɵd = NgAisCurrentRefinements;
    exports.ɵe = NgAisHierarchicalMenu;
    exports.ɵf = NgAisHierarchicalMenuItem;
    exports.ɵi = NgAisHighlight;
    exports.ɵg = NgAisHitsPerPage;
    exports.ɵh = NgAisHits;
    exports.ɵj = NgAisInfiniteHits;
    exports.ɵk = NgAisMenu;
    exports.ɵl = NgAisNumericMenu;
    exports.ɵm = NgAisPagination;
    exports.ɵa = NgAisPanel;
    exports.ɵy = NgAisQueryRuleContext;
    exports.ɵx = NgAisQueryRuleCustomData;
    exports.ɵv = NgAisRangeInput;
    exports.ɵn = NgAisRangeSlider;
    exports.ɵs = NgAisRatingMenu;
    exports.ɵp = NgAisFacetsSearch;
    exports.ɵo = NgAisRefinementList;
    exports.ɵq = NgAisSearchBox;
    exports.ɵr = NgAisSortBy;
    exports.ɵt = NgAisStats;
    exports.ɵu = NgAisToggle;
    exports.ɵz = NgAisVoiceSearch;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=angular-instantsearch.umd.js.map