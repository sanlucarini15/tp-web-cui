/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChild, TemplateRef, Inject, forwardRef, Input, } from '@angular/core';
import { connectQueryRules } from 'instantsearch.js/es/connectors';
import { BaseWidget } from '../base-widget';
import { NgAisInstantSearch } from '../instantsearch/instantsearch';
export class NgAisQueryRuleCustomData extends BaseWidget {
    /**
     * @param {?} instantSearchParent
     */
    constructor(instantSearchParent) {
        super('QueryRuleCustomData');
        this.instantSearchParent = instantSearchParent;
        this.state = {
            items: [],
        };
    }
    /**
     * @return {?}
     */
    get templateContext() {
        return {
            items: this.state.items,
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.createWidget(connectQueryRules, {
            transformItems: this.transformItems,
        });
        super.ngOnInit();
    }
}
NgAisQueryRuleCustomData.decorators = [
    { type: Component, args: [{
                selector: 'ais-query-rule-custom-data',
                template: `
    <div [class]="cx()">
      <ng-container *ngTemplateOutlet="template; context: templateContext">
      </ng-container>

      <div *ngIf="!template">
        <div *ngFor="let item of state.items">
          <pre>{{ item | json }}</pre>
        </div>
      </div>
    </div>
  `
            }] }
];
/** @nocollapse */
NgAisQueryRuleCustomData.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => NgAisInstantSearch)),] }] }
];
NgAisQueryRuleCustomData.propDecorators = {
    template: [{ type: ContentChild, args: [TemplateRef,] }],
    transformItems: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgAisQueryRuleCustomData.prototype.template;
    /** @type {?} */
    NgAisQueryRuleCustomData.prototype.transformItems;
    /** @type {?} */
    NgAisQueryRuleCustomData.prototype.state;
    /** @type {?} */
    NgAisQueryRuleCustomData.prototype.instantSearchParent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnktcnVsZS1jdXN0b20tZGF0YS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC8iLCJzb3VyY2VzIjpbInF1ZXJ5LXJ1bGUtY3VzdG9tLWRhdGEvcXVlcnktcnVsZS1jdXN0b20tZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxZQUFZLEVBQ1osV0FBVyxFQUNYLE1BQU0sRUFDTixVQUFVLEVBQ1YsS0FBSyxHQUNOLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRW5FLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQWlCcEUsTUFBTSxPQUFPLHdCQUF5QixTQUFRLFVBQVU7Ozs7SUFldEQsWUFFUyxtQkFBd0I7UUFFL0IsS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFGdEIsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFLO1FBWjFCLFVBQUssR0FBRztZQUNiLEtBQUssRUFBRSxFQUFFO1NBQ1YsQ0FBQztJQWFGLENBQUM7Ozs7SUFYRCxJQUFJLGVBQWU7UUFDakIsT0FBTztZQUNMLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUs7U0FDeEIsQ0FBQztJQUNKLENBQUM7Ozs7SUFTTSxRQUFRO1FBQ2IsSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRTtZQUNuQyxjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7U0FDcEMsQ0FBQyxDQUFDO1FBRUgsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ25CLENBQUM7OztZQTNDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDRCQUE0QjtnQkFDdEMsUUFBUSxFQUFFOzs7Ozs7Ozs7OztHQVdUO2FBQ0Y7Ozs7NENBaUJJLE1BQU0sU0FBQyxVQUFVOzs7b0JBQUMsR0FBRyxFQUFFLENBQUMsa0JBQWtCLEVBQUM7Ozt1QkFmN0MsWUFBWSxTQUFDLFdBQVc7NkJBRXhCLEtBQUs7Ozs7SUFGTiw0Q0FBZ0Q7O0lBRWhELGtEQUF5RDs7SUFFekQseUNBRUU7O0lBU0EsdURBQytCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBDb250ZW50Q2hpbGQsXG4gIFRlbXBsYXRlUmVmLFxuICBJbmplY3QsXG4gIGZvcndhcmRSZWYsXG4gIElucHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29ubmVjdFF1ZXJ5UnVsZXMgfSBmcm9tICdpbnN0YW50c2VhcmNoLmpzL2VzL2Nvbm5lY3RvcnMnO1xuXG5pbXBvcnQgeyBCYXNlV2lkZ2V0IH0gZnJvbSAnLi4vYmFzZS13aWRnZXQnO1xuaW1wb3J0IHsgTmdBaXNJbnN0YW50U2VhcmNoIH0gZnJvbSAnLi4vaW5zdGFudHNlYXJjaC9pbnN0YW50c2VhcmNoJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYWlzLXF1ZXJ5LXJ1bGUtY3VzdG9tLWRhdGEnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgW2NsYXNzXT1cImN4KClcIj5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJ0ZW1wbGF0ZTsgY29udGV4dDogdGVtcGxhdGVDb250ZXh0XCI+XG4gICAgICA8L25nLWNvbnRhaW5lcj5cblxuICAgICAgPGRpdiAqbmdJZj1cIiF0ZW1wbGF0ZVwiPlxuICAgICAgICA8ZGl2ICpuZ0Zvcj1cImxldCBpdGVtIG9mIHN0YXRlLml0ZW1zXCI+XG4gICAgICAgICAgPHByZT57eyBpdGVtIHwganNvbiB9fTwvcHJlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICBgLFxufSlcbmV4cG9ydCBjbGFzcyBOZ0Fpc1F1ZXJ5UnVsZUN1c3RvbURhdGEgZXh0ZW5kcyBCYXNlV2lkZ2V0IHtcbiAgQENvbnRlbnRDaGlsZChUZW1wbGF0ZVJlZikgcHVibGljIHRlbXBsYXRlOiBhbnk7XG5cbiAgQElucHV0KCkgcHVibGljIHRyYW5zZm9ybUl0ZW1zPzogKGl0ZW1zOiBhbnlbXSkgPT4gYW55W107XG5cbiAgcHVibGljIHN0YXRlID0ge1xuICAgIGl0ZW1zOiBbXSxcbiAgfTtcblxuICBnZXQgdGVtcGxhdGVDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICBpdGVtczogdGhpcy5zdGF0ZS5pdGVtcyxcbiAgICB9O1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE5nQWlzSW5zdGFudFNlYXJjaCkpXG4gICAgcHVibGljIGluc3RhbnRTZWFyY2hQYXJlbnQ6IGFueVxuICApIHtcbiAgICBzdXBlcignUXVlcnlSdWxlQ3VzdG9tRGF0YScpO1xuICB9XG5cbiAgcHVibGljIG5nT25Jbml0KCkge1xuICAgIHRoaXMuY3JlYXRlV2lkZ2V0KGNvbm5lY3RRdWVyeVJ1bGVzLCB7XG4gICAgICB0cmFuc2Zvcm1JdGVtczogdGhpcy50cmFuc2Zvcm1JdGVtcyxcbiAgICB9KTtcblxuICAgIHN1cGVyLm5nT25Jbml0KCk7XG4gIH1cbn1cbiJdfQ==