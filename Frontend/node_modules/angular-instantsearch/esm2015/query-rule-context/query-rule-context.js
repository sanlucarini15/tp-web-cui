/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Inject, forwardRef } from '@angular/core';
import { connectQueryRules } from 'instantsearch.js/es/connectors';
import { BaseWidget } from '../base-widget';
import { NgAisInstantSearch } from '../instantsearch/instantsearch';
export class NgAisQueryRuleContext extends BaseWidget {
    /**
     * @param {?} instantSearchParent
     */
    constructor(instantSearchParent) {
        super('QueryRuleContext');
        this.instantSearchParent = instantSearchParent;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.createWidget(connectQueryRules, {
            trackedFilters: this.trackedFilters,
            transformRuleContexts: this.transformRuleContexts,
        });
        super.ngOnInit();
    }
}
NgAisQueryRuleContext.decorators = [
    { type: Component, args: [{
                selector: 'ais-query-rule-context',
                template: ''
            }] }
];
/** @nocollapse */
NgAisQueryRuleContext.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => NgAisInstantSearch)),] }] }
];
NgAisQueryRuleContext.propDecorators = {
    trackedFilters: [{ type: Input }],
    transformRuleContexts: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgAisQueryRuleContext.prototype.trackedFilters;
    /** @type {?} */
    NgAisQueryRuleContext.prototype.transformRuleContexts;
    /** @type {?} */
    NgAisQueryRuleContext.prototype.instantSearchParent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnktcnVsZS1jb250ZXh0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1pbnN0YW50c2VhcmNoLyIsInNvdXJjZXMiOlsicXVlcnktcnVsZS1jb250ZXh0L3F1ZXJ5LXJ1bGUtY29udGV4dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVyRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNuRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFRcEUsTUFBTSxPQUFPLHFCQUFzQixTQUFRLFVBQVU7Ozs7SUFPbkQsWUFFUyxtQkFBd0I7UUFFL0IsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFGbkIsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFLO0lBR2pDLENBQUM7Ozs7SUFFTSxRQUFRO1FBQ2IsSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRTtZQUNuQyxjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7WUFDbkMscUJBQXFCLEVBQUUsSUFBSSxDQUFDLHFCQUFxQjtTQUNsRCxDQUFDLENBQUM7UUFFSCxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbkIsQ0FBQzs7O1lBekJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsd0JBQXdCO2dCQUNsQyxRQUFRLEVBQUUsRUFBRTthQUNiOzs7OzRDQVNJLE1BQU0sU0FBQyxVQUFVOzs7b0JBQUMsR0FBRyxFQUFFLENBQUMsa0JBQWtCLEVBQUM7Ozs2QkFQN0MsS0FBSztvQ0FJTCxLQUFLOzs7O0lBSk4sK0NBR0U7O0lBQ0Ysc0RBQXNFOztJQUdwRSxvREFDK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBJbmplY3QsIGZvcndhcmRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29ubmVjdFF1ZXJ5UnVsZXMgfSBmcm9tICdpbnN0YW50c2VhcmNoLmpzL2VzL2Nvbm5lY3RvcnMnO1xuaW1wb3J0IHsgQmFzZVdpZGdldCB9IGZyb20gJy4uL2Jhc2Utd2lkZ2V0JztcbmltcG9ydCB7IE5nQWlzSW5zdGFudFNlYXJjaCB9IGZyb20gJy4uL2luc3RhbnRzZWFyY2gvaW5zdGFudHNlYXJjaCc7XG5cbnR5cGUgRmFjZXRWYWx1ZSA9IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW47XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Fpcy1xdWVyeS1ydWxlLWNvbnRleHQnLFxuICB0ZW1wbGF0ZTogJycsXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzUXVlcnlSdWxlQ29udGV4dCBleHRlbmRzIEJhc2VXaWRnZXQge1xuICBASW5wdXQoKVxuICBwdWJsaWMgdHJhY2tlZEZpbHRlcnM6IHtcbiAgICBbZmFjZXROYW1lOiBzdHJpbmddOiAoZmFjZXRWYWx1ZXM6IEZhY2V0VmFsdWVbXSkgPT4gRmFjZXRWYWx1ZVtdO1xuICB9O1xuICBASW5wdXQoKSBwdWJsaWMgdHJhbnNmb3JtUnVsZUNvbnRleHRzPzogKGl0ZW1zOiBzdHJpbmdbXSkgPT4gc3RyaW5nW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE5nQWlzSW5zdGFudFNlYXJjaCkpXG4gICAgcHVibGljIGluc3RhbnRTZWFyY2hQYXJlbnQ6IGFueVxuICApIHtcbiAgICBzdXBlcignUXVlcnlSdWxlQ29udGV4dCcpO1xuICB9XG5cbiAgcHVibGljIG5nT25Jbml0KCkge1xuICAgIHRoaXMuY3JlYXRlV2lkZ2V0KGNvbm5lY3RRdWVyeVJ1bGVzLCB7XG4gICAgICB0cmFja2VkRmlsdGVyczogdGhpcy50cmFja2VkRmlsdGVycyxcbiAgICAgIHRyYW5zZm9ybVJ1bGVDb250ZXh0czogdGhpcy50cmFuc2Zvcm1SdWxlQ29udGV4dHMsXG4gICAgfSk7XG5cbiAgICBzdXBlci5uZ09uSW5pdCgpO1xuICB9XG59XG4iXX0=