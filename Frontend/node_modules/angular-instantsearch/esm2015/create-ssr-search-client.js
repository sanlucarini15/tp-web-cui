/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as algoliasearchProxy from 'algoliasearch';
import * as encodeProxy from 'querystring-es3/encode';
import { VERSION as AngularVersion } from '@angular/core';
import { VERSION } from './version';
/** @type {?} */
const algoliasearch = algoliasearchProxy.default || algoliasearchProxy;
/** @type {?} */
const encode = encodeProxy.default || encodeProxy;
/**
 * @param {?} __0
 * @return {?}
 */
export function createSSRSearchClient({ appId, apiKey, httpClient, HttpHeaders, transferState, makeStateKey, options = {}, }) {
    /** @type {?} */
    const searchClient = algoliasearch(appId, apiKey, options);
    searchClient.addAlgoliaAgent(`angular (${AngularVersion.full})`);
    searchClient.addAlgoliaAgent(`angular-instantsearch (${VERSION})`);
    searchClient.addAlgoliaAgent(`angular-instantsearch-server (${VERSION})`);
    ((/** @type {?} */ (searchClient)))._request = (/**
     * @param {?} rawUrl
     * @param {?} options
     * @return {?}
     */
    (rawUrl, options) => {
        /** @type {?} */
        let headers = new HttpHeaders();
        headers = headers.set('content-type', options.method === 'POST'
            ? 'application/x-www-form-urlencoded'
            : 'application/json');
        headers = headers.set('accept', 'application/json');
        /** @type {?} */
        const url = rawUrl + (rawUrl.includes('?') ? '&' : '?') + encode(options.headers);
        /** @type {?} */
        const transferStateKey = makeStateKey(`ngais(${options.body})`);
        if (transferState.hasKey(transferStateKey)) {
            /** @type {?} */
            const response = JSON.parse(transferState.get(transferStateKey, JSON.stringify({})));
            return Promise.resolve({
                statusCode: response.status,
                body: response.body,
                headers: response.headers,
            });
        }
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            httpClient
                .request(options.method, url, {
                headers,
                body: options.body,
                observe: 'response',
            })
                .subscribe((/**
             * @param {?} response
             * @return {?}
             */
            response => {
                transferState.set(transferStateKey, JSON.stringify(response));
                resolve({
                    statusCode: response.status,
                    body: response.body,
                    headers: response.headers,
                });
            }), (/**
             * @param {?} response
             * @return {?}
             */
            response => reject({
                statusCode: response.status,
                body: response.body,
                headers: response.headers,
            })));
        }));
    });
    return searchClient;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXNzci1zZWFyY2gtY2xpZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1pbnN0YW50c2VhcmNoLyIsInNvdXJjZXMiOlsiY3JlYXRlLXNzci1zZWFyY2gtY2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEtBQUssa0JBQWtCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sS0FBSyxXQUFXLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLE9BQU8sSUFBSSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHMUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQzs7TUFvQjlCLGFBQWEsR0FBRyxrQkFBa0IsQ0FBQyxPQUFPLElBQUksa0JBQWtCOztNQUNoRSxNQUFNLEdBQUcsV0FBVyxDQUFDLE9BQU8sSUFBSSxXQUFXOzs7OztBQUVqRCxNQUFNLFVBQVUscUJBQXFCLENBQUMsRUFDcEMsS0FBSyxFQUNMLE1BQU0sRUFDTixVQUFVLEVBQ1YsV0FBVyxFQUNYLGFBQWEsRUFDYixZQUFZLEVBQ1osT0FBTyxHQUFHLEVBQUUsR0FDVzs7VUFDakIsWUFBWSxHQUFHLGFBQWEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQztJQUUxRCxZQUFZLENBQUMsZUFBZSxDQUFDLFlBQVksY0FBYyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7SUFDakUsWUFBWSxDQUFDLGVBQWUsQ0FBQywwQkFBMEIsT0FBTyxHQUFHLENBQUMsQ0FBQztJQUNuRSxZQUFZLENBQUMsZUFBZSxDQUFDLGlDQUFpQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO0lBRTFFLENBQUMsbUJBQUEsWUFBWSxFQUFPLENBQUMsQ0FBQyxRQUFROzs7OztJQUFHLENBQy9CLE1BQWMsRUFDZCxPQUF1QixFQUN2QixFQUFFOztZQUNFLE9BQU8sR0FBRyxJQUFJLFdBQVcsRUFBRTtRQUUvQixPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FDbkIsY0FBYyxFQUNkLE9BQU8sQ0FBQyxNQUFNLEtBQUssTUFBTTtZQUN2QixDQUFDLENBQUMsbUNBQW1DO1lBQ3JDLENBQUMsQ0FBQyxrQkFBa0IsQ0FDdkIsQ0FBQztRQUVGLE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDOztjQUU5QyxHQUFHLEdBQ1AsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQzs7Y0FFakUsZ0JBQWdCLEdBQUcsWUFBWSxDQUFDLFNBQVMsT0FBTyxDQUFDLElBQUksR0FBRyxDQUFDO1FBRS9ELElBQUksYUFBYSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFOztrQkFDcEMsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQ3pCLGFBQWEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUN4RDtZQUVELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQztnQkFDckIsVUFBVSxFQUFFLFFBQVEsQ0FBQyxNQUFNO2dCQUMzQixJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUk7Z0JBQ25CLE9BQU8sRUFBRSxRQUFRLENBQUMsT0FBTzthQUMxQixDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sSUFBSSxPQUFPOzs7OztRQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLFVBQVU7aUJBQ1AsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO2dCQUM1QixPQUFPO2dCQUNQLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtnQkFDbEIsT0FBTyxFQUFFLFVBQVU7YUFDcEIsQ0FBQztpQkFDRCxTQUFTOzs7O1lBQ1IsUUFBUSxDQUFDLEVBQUU7Z0JBQ1QsYUFBYSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBRTlELE9BQU8sQ0FBQztvQkFDTixVQUFVLEVBQUUsUUFBUSxDQUFDLE1BQU07b0JBQzNCLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSTtvQkFDbkIsT0FBTyxFQUFFLFFBQVEsQ0FBQyxPQUFPO2lCQUMxQixDQUFDLENBQUM7WUFDTCxDQUFDOzs7O1lBQ0QsUUFBUSxDQUFDLEVBQUUsQ0FDVCxNQUFNLENBQUM7Z0JBQ0wsVUFBVSxFQUFFLFFBQVEsQ0FBQyxNQUFNO2dCQUMzQixJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUk7Z0JBQ25CLE9BQU8sRUFBRSxRQUFRLENBQUMsT0FBTzthQUMxQixDQUFDLEVBQ0wsQ0FBQztRQUNOLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFBLENBQUM7SUFFRixPQUFPLFlBQVksQ0FBQztBQUN0QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYWxnb2xpYXNlYXJjaFByb3h5IGZyb20gJ2FsZ29saWFzZWFyY2gnO1xuaW1wb3J0ICogYXMgZW5jb2RlUHJveHkgZnJvbSAncXVlcnlzdHJpbmctZXMzL2VuY29kZSc7XG5pbXBvcnQgeyBWRVJTSU9OIGFzIEFuZ3VsYXJWZXJzaW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IFRyYW5zZmVyU3RhdGUsIFN0YXRlS2V5IH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBWRVJTSU9OIH0gZnJvbSAnLi92ZXJzaW9uJztcblxudHlwZSBTU1JTZWFyY2hDbGllbnRPcHRpb25zID0ge1xuICBhcHBJZDogc3RyaW5nO1xuICBhcGlLZXk6IHN0cmluZztcbiAgaHR0cENsaWVudDogSHR0cENsaWVudDtcbiAgSHR0cEhlYWRlcnM6IHR5cGVvZiBIdHRwSGVhZGVycztcbiAgdHJhbnNmZXJTdGF0ZTogVHJhbnNmZXJTdGF0ZTtcbiAgb3B0aW9ucz86IG9iamVjdDtcbiAgbWFrZVN0YXRlS2V5PFQgPSB2b2lkPihrZXk6IHN0cmluZyk6IFN0YXRlS2V5PFQ+O1xufTtcblxudHlwZSBSZXF1ZXN0T3B0aW9ucyA9IHtcbiAgLy8gQWxnb2xpYSBvbmx5IHVzZXMgR0VUIGFuZCBQT1NUIG1ldGhvZHMgZm9yIHNlYXJjaGluZy5cbiAgLy8gU2VlOiBodHRwczovL3d3dy5hbGdvbGlhLmNvbS9kb2MvcmVzdC1hcGkvc2VhcmNoLyNzZWFyY2gtZW5kcG9pbnRzXG4gIG1ldGhvZDogJ0dFVCcgfCAnUE9TVCc7XG4gIGhlYWRlcnM6IHN0cmluZztcbiAgYm9keTogc3RyaW5nO1xufTtcblxuY29uc3QgYWxnb2xpYXNlYXJjaCA9IGFsZ29saWFzZWFyY2hQcm94eS5kZWZhdWx0IHx8IGFsZ29saWFzZWFyY2hQcm94eTtcbmNvbnN0IGVuY29kZSA9IGVuY29kZVByb3h5LmRlZmF1bHQgfHwgZW5jb2RlUHJveHk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTU1JTZWFyY2hDbGllbnQoe1xuICBhcHBJZCxcbiAgYXBpS2V5LFxuICBodHRwQ2xpZW50LFxuICBIdHRwSGVhZGVycyxcbiAgdHJhbnNmZXJTdGF0ZSxcbiAgbWFrZVN0YXRlS2V5LFxuICBvcHRpb25zID0ge30sXG59OiBTU1JTZWFyY2hDbGllbnRPcHRpb25zKSB7XG4gIGNvbnN0IHNlYXJjaENsaWVudCA9IGFsZ29saWFzZWFyY2goYXBwSWQsIGFwaUtleSwgb3B0aW9ucyk7XG5cbiAgc2VhcmNoQ2xpZW50LmFkZEFsZ29saWFBZ2VudChgYW5ndWxhciAoJHtBbmd1bGFyVmVyc2lvbi5mdWxsfSlgKTtcbiAgc2VhcmNoQ2xpZW50LmFkZEFsZ29saWFBZ2VudChgYW5ndWxhci1pbnN0YW50c2VhcmNoICgke1ZFUlNJT059KWApO1xuICBzZWFyY2hDbGllbnQuYWRkQWxnb2xpYUFnZW50KGBhbmd1bGFyLWluc3RhbnRzZWFyY2gtc2VydmVyICgke1ZFUlNJT059KWApO1xuXG4gIChzZWFyY2hDbGllbnQgYXMgYW55KS5fcmVxdWVzdCA9IChcbiAgICByYXdVcmw6IHN0cmluZyxcbiAgICBvcHRpb25zOiBSZXF1ZXN0T3B0aW9uc1xuICApID0+IHtcbiAgICBsZXQgaGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycygpO1xuXG4gICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KFxuICAgICAgJ2NvbnRlbnQtdHlwZScsXG4gICAgICBvcHRpb25zLm1ldGhvZCA9PT0gJ1BPU1QnXG4gICAgICAgID8gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbiAgICAgICAgOiAnYXBwbGljYXRpb24vanNvbidcbiAgICApO1xuXG4gICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdhY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpO1xuXG4gICAgY29uc3QgdXJsID1cbiAgICAgIHJhd1VybCArIChyYXdVcmwuaW5jbHVkZXMoJz8nKSA/ICcmJyA6ICc/JykgKyBlbmNvZGUob3B0aW9ucy5oZWFkZXJzKTtcblxuICAgIGNvbnN0IHRyYW5zZmVyU3RhdGVLZXkgPSBtYWtlU3RhdGVLZXkoYG5nYWlzKCR7b3B0aW9ucy5ib2R5fSlgKTtcblxuICAgIGlmICh0cmFuc2ZlclN0YXRlLmhhc0tleSh0cmFuc2ZlclN0YXRlS2V5KSkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBKU09OLnBhcnNlKFxuICAgICAgICB0cmFuc2ZlclN0YXRlLmdldCh0cmFuc2ZlclN0YXRlS2V5LCBKU09OLnN0cmluZ2lmeSh7fSkpXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgc3RhdHVzQ29kZTogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICBib2R5OiByZXNwb25zZS5ib2R5LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGh0dHBDbGllbnRcbiAgICAgICAgLnJlcXVlc3Qob3B0aW9ucy5tZXRob2QsIHVybCwge1xuICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgYm9keTogb3B0aW9ucy5ib2R5LFxuICAgICAgICAgIG9ic2VydmU6ICdyZXNwb25zZScsXG4gICAgICAgIH0pXG4gICAgICAgIC5zdWJzY3JpYmUoXG4gICAgICAgICAgcmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgdHJhbnNmZXJTdGF0ZS5zZXQodHJhbnNmZXJTdGF0ZUtleSwgSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UpKTtcblxuICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgIHN0YXR1c0NvZGU6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgICAgICAgYm9keTogcmVzcG9uc2UuYm9keSxcbiAgICAgICAgICAgICAgaGVhZGVyczogcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVzcG9uc2UgPT5cbiAgICAgICAgICAgIHJlamVjdCh7XG4gICAgICAgICAgICAgIHN0YXR1c0NvZGU6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgICAgICAgYm9keTogcmVzcG9uc2UuYm9keSxcbiAgICAgICAgICAgICAgaGVhZGVyczogcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHNlYXJjaENsaWVudDtcbn1cbiJdfQ==