/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Inject, forwardRef } from '@angular/core';
import { connectSortBy } from 'instantsearch.js/es/connectors';
import { BaseWidget } from '../base-widget';
import { NgAisInstantSearch } from '../instantsearch/instantsearch';
import { noop } from '../utils';
export class NgAisSortBy extends BaseWidget {
    /**
     * @param {?} instantSearchParent
     */
    constructor(instantSearchParent) {
        super('SortBy');
        this.instantSearchParent = instantSearchParent;
        this.state = {
            currentRefinement: null,
            options: [],
            refine: noop,
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.createWidget(connectSortBy, {
            items: this.items,
            transformItems: this.transformItems,
        });
        super.ngOnInit();
    }
}
NgAisSortBy.decorators = [
    { type: Component, args: [{
                selector: 'ais-sort-by',
                template: `
    <div [class]="cx()">
      <select
        [class]="cx('select')"
        (change)="state.refine($event.target.value)"
      >
        <option
          [class]="cx('option')"
          *ngFor="let item of state.options"
          [value]="item.value"
          [selected]="item.value === state.currentRefinement"
        >
          {{item.label}}
        </option>
      </select>
    </div>
  `
            }] }
];
/** @nocollapse */
NgAisSortBy.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => NgAisInstantSearch)),] }] }
];
NgAisSortBy.propDecorators = {
    items: [{ type: Input }],
    transformItems: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgAisSortBy.prototype.items;
    /** @type {?} */
    NgAisSortBy.prototype.transformItems;
    /** @type {?} */
    NgAisSortBy.prototype.state;
    /** @type {?} */
    NgAisSortBy.prototype.instantSearchParent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydC1ieS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC8iLCJzb3VyY2VzIjpbInNvcnQtYnkvc29ydC1ieS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVyRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDL0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFrQ2hDLE1BQU0sT0FBTyxXQUFZLFNBQVEsVUFBVTs7OztJQVl6QyxZQUVTLG1CQUF3QjtRQUUvQixLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFGVCx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQUs7UUFUMUIsVUFBSyxHQUFnQjtZQUMxQixpQkFBaUIsRUFBRSxJQUFJO1lBQ3ZCLE9BQU8sRUFBRSxFQUFFO1lBQ1gsTUFBTSxFQUFFLElBQUk7U0FFYixDQUFDO0lBT0YsQ0FBQzs7OztJQUVNLFFBQVE7UUFDYixJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRTtZQUMvQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsY0FBYyxFQUFFLElBQUksQ0FBQyxjQUFjO1NBQ3BDLENBQUMsQ0FBQztRQUNILEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNuQixDQUFDOzs7WUE3Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxhQUFhO2dCQUN2QixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQlQ7YUFDRjs7Ozs0Q0FjSSxNQUFNLFNBQUMsVUFBVTs7O29CQUFDLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixFQUFDOzs7b0JBWjdDLEtBQUs7NkJBQ0wsS0FBSzs7OztJQUROLDRCQUFvQzs7SUFDcEMscUNBQzJFOztJQUUzRSw0QkFLRTs7SUFHQSwwQ0FDK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBJbmplY3QsIGZvcndhcmRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29ubmVjdFNvcnRCeSB9IGZyb20gJ2luc3RhbnRzZWFyY2guanMvZXMvY29ubmVjdG9ycyc7XG5pbXBvcnQgeyBCYXNlV2lkZ2V0IH0gZnJvbSAnLi4vYmFzZS13aWRnZXQnO1xuaW1wb3J0IHsgTmdBaXNJbnN0YW50U2VhcmNoIH0gZnJvbSAnLi4vaW5zdGFudHNlYXJjaC9pbnN0YW50c2VhcmNoJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCB0eXBlIFNvcnRCeUl0ZW0gPSB7XG4gIHZhbHVlOiBzdHJpbmc7XG4gIGxhYmVsOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBTb3J0QnlTdGF0ZSA9IHtcbiAgY3VycmVudFJlZmluZW1lbnQ6IHN0cmluZyB8IG51bGw7XG4gIG9wdGlvbnM6IFNvcnRCeUl0ZW1bXTtcbiAgcmVmaW5lOiBGdW5jdGlvbjtcbiAgLy8gVE9ETzogYWRkIGhhc05vUmVzdWx0czogYm9vbGVhbjtcbn07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Fpcy1zb3J0LWJ5JyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IFtjbGFzc109XCJjeCgpXCI+XG4gICAgICA8c2VsZWN0XG4gICAgICAgIFtjbGFzc109XCJjeCgnc2VsZWN0JylcIlxuICAgICAgICAoY2hhbmdlKT1cInN0YXRlLnJlZmluZSgkZXZlbnQudGFyZ2V0LnZhbHVlKVwiXG4gICAgICA+XG4gICAgICAgIDxvcHRpb25cbiAgICAgICAgICBbY2xhc3NdPVwiY3goJ29wdGlvbicpXCJcbiAgICAgICAgICAqbmdGb3I9XCJsZXQgaXRlbSBvZiBzdGF0ZS5vcHRpb25zXCJcbiAgICAgICAgICBbdmFsdWVdPVwiaXRlbS52YWx1ZVwiXG4gICAgICAgICAgW3NlbGVjdGVkXT1cIml0ZW0udmFsdWUgPT09IHN0YXRlLmN1cnJlbnRSZWZpbmVtZW50XCJcbiAgICAgICAgPlxuICAgICAgICAgIHt7aXRlbS5sYWJlbH19XG4gICAgICAgIDwvb3B0aW9uPlxuICAgICAgPC9zZWxlY3Q+XG4gICAgPC9kaXY+XG4gIGAsXG59KVxuZXhwb3J0IGNsYXNzIE5nQWlzU29ydEJ5IGV4dGVuZHMgQmFzZVdpZGdldCB7XG4gIEBJbnB1dCgpIHB1YmxpYyBpdGVtczogU29ydEJ5SXRlbVtdO1xuICBASW5wdXQoKVxuICBwdWJsaWMgdHJhbnNmb3JtSXRlbXM/OiA8VSBleHRlbmRzIFNvcnRCeUl0ZW0+KGl0ZW1zOiBTb3J0QnlJdGVtW10pID0+IFVbXTtcblxuICBwdWJsaWMgc3RhdGU6IFNvcnRCeVN0YXRlID0ge1xuICAgIGN1cnJlbnRSZWZpbmVtZW50OiBudWxsLFxuICAgIG9wdGlvbnM6IFtdLFxuICAgIHJlZmluZTogbm9vcCxcbiAgICAvLyBUT0RPOiBBZGQgaGFzTm9SZXN1bHRzOiBudWxsLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBOZ0Fpc0luc3RhbnRTZWFyY2gpKVxuICAgIHB1YmxpYyBpbnN0YW50U2VhcmNoUGFyZW50OiBhbnlcbiAgKSB7XG4gICAgc3VwZXIoJ1NvcnRCeScpO1xuICB9XG5cbiAgcHVibGljIG5nT25Jbml0KCkge1xuICAgIHRoaXMuY3JlYXRlV2lkZ2V0KGNvbm5lY3RTb3J0QnksIHtcbiAgICAgIGl0ZW1zOiB0aGlzLml0ZW1zLFxuICAgICAgdHJhbnNmb3JtSXRlbXM6IHRoaXMudHJhbnNmb3JtSXRlbXMsXG4gICAgfSk7XG4gICAgc3VwZXIubmdPbkluaXQoKTtcbiAgfVxufVxuIl19