/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Inject, forwardRef } from '@angular/core';
import { connectCurrentRefinements } from 'instantsearch.js/es/connectors';
import { BaseWidget } from '../base-widget';
import { NgAisInstantSearch } from '../instantsearch/instantsearch';
import { noop } from '../utils';
export class NgAisCurrentRefinements extends BaseWidget {
    /**
     * @param {?} instantSearchParent
     */
    constructor(instantSearchParent) {
        super('CurrentRefinements');
        this.instantSearchParent = instantSearchParent;
        this.state = {
            createURL: noop,
            refine: noop,
            items: [],
        };
    }
    /**
     * @return {?}
     */
    get isHidden() {
        return this.state.items.length === 0 && this.autoHideContainer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.createWidget(connectCurrentRefinements, {
            includedAttributes: this.includedAttributes,
            excludedAttributes: this.excludedAttributes,
            transformItems: this.transformItems,
        });
        super.ngOnInit();
    }
    /**
     * @param {?} event
     * @param {?} refinement
     * @return {?}
     */
    handleClick(event, refinement) {
        event.preventDefault();
        this.state.refine(refinement);
    }
}
NgAisCurrentRefinements.decorators = [
    { type: Component, args: [{
                selector: 'ais-current-refinements',
                template: `
    <div
      [class]="cx()"
      *ngIf="!isHidden"
    >
      <ul
        [class]="cx('list')"
        *ngFor="let item of state.items"
      >
        <li [class]="cx('item')">
          <span [class]="cx('label')">{{item.label | titlecase}}:</span>

          <span
            [class]="cx('category')"
            *ngFor="let refinement of item.refinements"
          >
            <span [class]="cx('categoryLabel')">{{refinement.label}}</span>
            <button [class]="cx('delete')" (click)="handleClick($event, refinement)">âœ•</button>
          </span>
        </li>
      </ul>
    </div>
  `
            }] }
];
/** @nocollapse */
NgAisCurrentRefinements.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => NgAisInstantSearch)),] }] }
];
NgAisCurrentRefinements.propDecorators = {
    includedAttributes: [{ type: Input }],
    excludedAttributes: [{ type: Input }],
    transformItems: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgAisCurrentRefinements.prototype.includedAttributes;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.excludedAttributes;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.transformItems;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.state;
    /** @type {?} */
    NgAisCurrentRefinements.prototype.instantSearchParent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VycmVudC1yZWZpbmVtZW50cy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItaW5zdGFudHNlYXJjaC8iLCJzb3VyY2VzIjpbImN1cnJlbnQtcmVmaW5lbWVudHMvY3VycmVudC1yZWZpbmVtZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVyRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUMzRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDcEUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFVBQVUsQ0FBQztBQW1EaEMsTUFBTSxPQUFPLHVCQUF3QixTQUFRLFVBQVU7Ozs7SUFtQnJELFlBRVMsbUJBQXdCO1FBRS9CLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBRnJCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBSztRQVoxQixVQUFLLEdBQTRCO1lBQ3RDLFNBQVMsRUFBRSxJQUFJO1lBQ2YsTUFBTSxFQUFFLElBQUk7WUFDWixLQUFLLEVBQUUsRUFBRTtTQUNWLENBQUM7SUFXRixDQUFDOzs7O0lBVEQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztJQUNqRSxDQUFDOzs7O0lBU00sUUFBUTtRQUNiLElBQUksQ0FBQyxZQUFZLENBQUMseUJBQXlCLEVBQUU7WUFDM0Msa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGtCQUFrQjtZQUMzQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsa0JBQWtCO1lBQzNDLGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYztTQUNwQyxDQUFDLENBQUM7UUFDSCxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbkIsQ0FBQzs7Ozs7O0lBRU0sV0FBVyxDQUFDLEtBQWlCLEVBQUUsVUFBYztRQUNsRCxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7O1lBaEVGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUseUJBQXlCO2dCQUNuQyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FzQlQ7YUFDRjs7Ozs0Q0FxQkksTUFBTSxTQUFDLFVBQVU7OztvQkFBQyxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsRUFBQzs7O2lDQWxCN0MsS0FBSztpQ0FDTCxLQUFLOzZCQUNMLEtBQUs7Ozs7SUFGTixxREFBOEM7O0lBQzlDLHFEQUE4Qzs7SUFDOUMsaURBR1M7O0lBRVQsd0NBSUU7O0lBT0Esc0RBQytCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgSW5qZWN0LCBmb3J3YXJkUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvbm5lY3RDdXJyZW50UmVmaW5lbWVudHMgfSBmcm9tICdpbnN0YW50c2VhcmNoLmpzL2VzL2Nvbm5lY3RvcnMnO1xuaW1wb3J0IHsgQmFzZVdpZGdldCB9IGZyb20gJy4uL2Jhc2Utd2lkZ2V0JztcbmltcG9ydCB7IE5nQWlzSW5zdGFudFNlYXJjaCB9IGZyb20gJy4uL2luc3RhbnRzZWFyY2gvaW5zdGFudHNlYXJjaCc7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgdHlwZSBDdXJyZW50UmVmaW5lbWVudHNJdGVtID0ge1xuICBhdHRyaWJ1dGU6IHN0cmluZztcbiAgbGFiZWw6IHN0cmluZztcbiAgcmVmaW5lOiBGdW5jdGlvbjtcbiAgcmVmaW5lbWVudHM6IHtcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgLy8gVE9ETzogY3JlYXRlIG11bHRpcGxlIHR5cGVzIGZvciBlYWNoIG9mIHRoZSBhdmFpbGFibGUgcmVmaW5lbWVudFxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGdvbGlhL2FuZ3VsYXItaW5zdGFudHNlYXJjaC9wdWxsLzQ2MyNkaXNjdXNzaW9uX3IyNTU5MTEyMzJcbiAgICBhdHRyaWJ1dGU6IHN0cmluZztcbiAgICBsYWJlbDogc3RyaW5nO1xuICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgb3BlcmF0b3I/OiBzdHJpbmc7XG4gICAgZXhoYXVzdGl2ZT86IGJvb2xlYW47XG4gICAgY291bnQ/OiBudW1iZXI7XG4gIH1bXTtcbn07XG5cbmV4cG9ydCB0eXBlIEN1cnJlbnRSZWZpbmVtZW50c1N0YXRlID0ge1xuICBjcmVhdGVVUkw6IEZ1bmN0aW9uO1xuICByZWZpbmU6IEZ1bmN0aW9uO1xuICBpdGVtczogQ3VycmVudFJlZmluZW1lbnRzSXRlbVtdO1xufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYWlzLWN1cnJlbnQtcmVmaW5lbWVudHMnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXZcbiAgICAgIFtjbGFzc109XCJjeCgpXCJcbiAgICAgICpuZ0lmPVwiIWlzSGlkZGVuXCJcbiAgICA+XG4gICAgICA8dWxcbiAgICAgICAgW2NsYXNzXT1cImN4KCdsaXN0JylcIlxuICAgICAgICAqbmdGb3I9XCJsZXQgaXRlbSBvZiBzdGF0ZS5pdGVtc1wiXG4gICAgICA+XG4gICAgICAgIDxsaSBbY2xhc3NdPVwiY3goJ2l0ZW0nKVwiPlxuICAgICAgICAgIDxzcGFuIFtjbGFzc109XCJjeCgnbGFiZWwnKVwiPnt7aXRlbS5sYWJlbCB8IHRpdGxlY2FzZX19Ojwvc3Bhbj5cblxuICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICBbY2xhc3NdPVwiY3goJ2NhdGVnb3J5JylcIlxuICAgICAgICAgICAgKm5nRm9yPVwibGV0IHJlZmluZW1lbnQgb2YgaXRlbS5yZWZpbmVtZW50c1wiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHNwYW4gW2NsYXNzXT1cImN4KCdjYXRlZ29yeUxhYmVsJylcIj57e3JlZmluZW1lbnQubGFiZWx9fTwvc3Bhbj5cbiAgICAgICAgICAgIDxidXR0b24gW2NsYXNzXT1cImN4KCdkZWxldGUnKVwiIChjbGljayk9XCJoYW5kbGVDbGljaygkZXZlbnQsIHJlZmluZW1lbnQpXCI+4pyVPC9idXR0b24+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2xpPlxuICAgICAgPC91bD5cbiAgICA8L2Rpdj5cbiAgYCxcbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNDdXJyZW50UmVmaW5lbWVudHMgZXh0ZW5kcyBCYXNlV2lkZ2V0IHtcbiAgLy8gaW5zdGFuY2Ugb3B0aW9uc1xuICBASW5wdXQoKSBwdWJsaWMgaW5jbHVkZWRBdHRyaWJ1dGVzPzogc3RyaW5nW107XG4gIEBJbnB1dCgpIHB1YmxpYyBleGNsdWRlZEF0dHJpYnV0ZXM/OiBzdHJpbmdbXTtcbiAgQElucHV0KClcbiAgcHVibGljIHRyYW5zZm9ybUl0ZW1zPzogPFUgZXh0ZW5kcyBDdXJyZW50UmVmaW5lbWVudHNJdGVtPihcbiAgICBpdGVtczogQ3VycmVudFJlZmluZW1lbnRzSXRlbVtdXG4gICkgPT4gVVtdO1xuXG4gIHB1YmxpYyBzdGF0ZTogQ3VycmVudFJlZmluZW1lbnRzU3RhdGUgPSB7XG4gICAgY3JlYXRlVVJMOiBub29wLFxuICAgIHJlZmluZTogbm9vcCxcbiAgICBpdGVtczogW10sXG4gIH07XG5cbiAgZ2V0IGlzSGlkZGVuKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLml0ZW1zLmxlbmd0aCA9PT0gMCAmJiB0aGlzLmF1dG9IaWRlQ29udGFpbmVyO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE5nQWlzSW5zdGFudFNlYXJjaCkpXG4gICAgcHVibGljIGluc3RhbnRTZWFyY2hQYXJlbnQ6IGFueVxuICApIHtcbiAgICBzdXBlcignQ3VycmVudFJlZmluZW1lbnRzJyk7XG4gIH1cblxuICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5jcmVhdGVXaWRnZXQoY29ubmVjdEN1cnJlbnRSZWZpbmVtZW50cywge1xuICAgICAgaW5jbHVkZWRBdHRyaWJ1dGVzOiB0aGlzLmluY2x1ZGVkQXR0cmlidXRlcyxcbiAgICAgIGV4Y2x1ZGVkQXR0cmlidXRlczogdGhpcy5leGNsdWRlZEF0dHJpYnV0ZXMsXG4gICAgICB0cmFuc2Zvcm1JdGVtczogdGhpcy50cmFuc2Zvcm1JdGVtcyxcbiAgICB9KTtcbiAgICBzdXBlci5uZ09uSW5pdCgpO1xuICB9XG5cbiAgcHVibGljIGhhbmRsZUNsaWNrKGV2ZW50OiBNb3VzZUV2ZW50LCByZWZpbmVtZW50OiB7fSkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5zdGF0ZS5yZWZpbmUocmVmaW5lbWVudCk7XG4gIH1cbn1cbiJdfQ==