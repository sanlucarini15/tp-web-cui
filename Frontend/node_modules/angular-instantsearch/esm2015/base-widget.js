/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { bem, noop } from './utils';
export class Widget {
}
if (false) {
    /** @type {?} */
    Widget.prototype.init;
    /** @type {?} */
    Widget.prototype.getConfiguration;
    /** @type {?} */
    Widget.prototype.render;
    /** @type {?} */
    Widget.prototype.dispose;
}
export class BaseWidget {
    /**
     * @param {?} widgetName
     */
    constructor(widgetName) {
        this.state = {};
        this.updateState = (/**
         * @param {?} state
         * @param {?} isFirstRendering
         * @return {?}
         */
        (state, isFirstRendering) => {
            if (isFirstRendering) {
                return Promise.resolve().then((/**
                 * @return {?}
                 */
                () => {
                    this.state = state;
                }));
            }
            this.state = state;
        });
        this.cx = bem(widgetName);
    }
    /**
     * @param {?} connector
     * @param {?=} options
     * @return {?}
     */
    createWidget(connector, options = {}) {
        this.widget = connector(this.updateState, noop)(options);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // add widget to the InstantSearch Instance
        this.instantSearchParent.addWidget(this.widget);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (isPlatformBrowser(this.instantSearchParent.platformId)) {
            this.instantSearchParent.removeWidget(this.widget);
        }
    }
    // helper method for genering item list className
    /**
     * @param {?} item
     * @return {?}
     */
    getItemClass(item) {
        /** @type {?} */
        let className = this.cx('item');
        if (item.isRefined) {
            className = `${className} ${this.cx('item', 'selected')}`;
        }
        return className;
    }
}
BaseWidget.propDecorators = {
    autoHideContainer: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    BaseWidget.prototype.instantSearchParent;
    /** @type {?} */
    BaseWidget.prototype.autoHideContainer;
    /** @type {?} */
    BaseWidget.prototype.widget;
    /** @type {?} */
    BaseWidget.prototype.state;
    /** @type {?} */
    BaseWidget.prototype.cx;
    /** @type {?} */
    BaseWidget.prototype.updateState;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS13aWRnZXQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWluc3RhbnRzZWFyY2gvIiwic291cmNlcyI6WyJiYXNlLXdpZGdldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLEtBQUssRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFcEMsTUFBTSxPQUFPLE1BQU07Q0EwQmxCOzs7SUF6QkMsc0JBUVU7O0lBQ1Ysa0NBQXVDOztJQUN2Qyx3QkFRVTs7SUFDVix5QkFLbUI7O0FBUXJCLE1BQU0sT0FBTyxVQUFVOzs7O0lBU3JCLFlBQVksVUFBa0I7UUFIdkIsVUFBSyxHQUFZLEVBQUUsQ0FBQztRQXNCcEIsZ0JBQVc7Ozs7O1FBQUcsQ0FDbkIsS0FBUyxFQUNULGdCQUF5QixFQUNILEVBQUU7WUFDeEIsSUFBSSxnQkFBZ0IsRUFBRTtnQkFDcEIsT0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSTs7O2dCQUFDLEdBQUcsRUFBRTtvQkFDakMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7Z0JBQ3JCLENBQUMsRUFBQyxDQUFDO2FBQ0o7WUFFRCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNyQixDQUFDLEVBQUM7UUE3QkEsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDNUIsQ0FBQzs7Ozs7O0lBRU0sWUFBWSxDQUFDLFNBQW9CLEVBQUUsVUFBa0IsRUFBRTtRQUM1RCxJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzNELENBQUM7Ozs7SUFFTSxRQUFRO1FBQ2IsMkNBQTJDO1FBQzNDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xELENBQUM7Ozs7SUFFTSxXQUFXO1FBQ2hCLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQzFELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3BEO0lBQ0gsQ0FBQzs7Ozs7O0lBZ0JNLFlBQVksQ0FBQyxJQUE2Qjs7WUFDM0MsU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDO1FBRS9CLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixTQUFTLEdBQUcsR0FBRyxTQUFTLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLEVBQUUsQ0FBQztTQUMzRDtRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7OztnQ0EvQ0EsS0FBSzs7OztJQUZOLHlDQUFnQzs7SUFFaEMsdUNBQTRDOztJQUU1Qyw0QkFBdUI7O0lBQ3ZCLDJCQUEyQjs7SUFDM0Isd0JBQW9COztJQXFCcEIsaUNBV0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IGJlbSwgbm9vcCB9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgY2xhc3MgV2lkZ2V0IHtcbiAgcHVibGljIGluaXQ6IChcbiAgICBwYXJhbXM6IHtcbiAgICAgIHRlbXBsYXRlc0NvbmZpZzogb2JqZWN0O1xuICAgICAgc3RhdGU6IG9iamVjdDtcbiAgICAgIHJlc3VsdHM6IG9iamVjdFtdO1xuICAgICAgY3JlYXRlVVJMOiAodmFsdWU6IGFueSkgPT4gc3RyaW5nO1xuICAgICAgaW5zdGFudFNlYXJjaEluc3RhbmNlOiBvYmplY3Q7XG4gICAgfVxuICApID0+IHZvaWQ7XG4gIHB1YmxpYyBnZXRDb25maWd1cmF0aW9uPzogKCkgPT4gb2JqZWN0O1xuICBwdWJsaWMgcmVuZGVyOiAoXG4gICAgcGFyYW1zOiB7XG4gICAgICB0ZW1wbGF0ZXNDb25maWc6IG9iamVjdDtcbiAgICAgIHN0YXRlOiBvYmplY3Q7XG4gICAgICByZXN1bHRzOiB7fVtdO1xuICAgICAgY3JlYXRlVVJMOiAodmFsdWU6IGFueSkgPT4gc3RyaW5nO1xuICAgICAgaW5zdGFudFNlYXJjaEluc3RhbmNlOiBvYmplY3Q7XG4gICAgfVxuICApID0+IHZvaWQ7XG4gIHB1YmxpYyBkaXNwb3NlOiAoXG4gICAgcGFyYW1zOiB7XG4gICAgICBoZWxwZXI6IG9iamVjdDtcbiAgICAgIHN0YXRlOiBvYmplY3Q7XG4gICAgfVxuICApID0+IG9iamVjdCB8IHZvaWQ7XG59XG5cbmV4cG9ydCB0eXBlIENvbm5lY3RvciA9IChcbiAgcmVuZGVyRm46IChzdGF0ZTogb2JqZWN0LCBpc0ZpcnN0UmVuZGVyaW5nOiBib29sZWFuKSA9PiB2b2lkLFxuICB1bm1vdW50Rm46ICgpID0+IHZvaWRcbikgPT4gKHdpZGdldE9wdGlvbnM/OiBvYmplY3QpID0+IFdpZGdldDtcblxuZXhwb3J0IGNsYXNzIEJhc2VXaWRnZXQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIHB1YmxpYyBpbnN0YW50U2VhcmNoUGFyZW50OiBhbnk7XG5cbiAgQElucHV0KCkgcHVibGljIGF1dG9IaWRlQ29udGFpbmVyPzogYm9vbGVhbjtcblxuICBwdWJsaWMgd2lkZ2V0PzogV2lkZ2V0O1xuICBwdWJsaWMgc3RhdGU/OiBvYmplY3QgPSB7fTtcbiAgcHVibGljIGN4OiBGdW5jdGlvbjtcblxuICBjb25zdHJ1Y3Rvcih3aWRnZXROYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLmN4ID0gYmVtKHdpZGdldE5hbWUpO1xuICB9XG5cbiAgcHVibGljIGNyZWF0ZVdpZGdldChjb25uZWN0b3I6IENvbm5lY3Rvciwgb3B0aW9uczogb2JqZWN0ID0ge30pIHtcbiAgICB0aGlzLndpZGdldCA9IGNvbm5lY3Rvcih0aGlzLnVwZGF0ZVN0YXRlLCBub29wKShvcHRpb25zKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICAvLyBhZGQgd2lkZ2V0IHRvIHRoZSBJbnN0YW50U2VhcmNoIEluc3RhbmNlXG4gICAgdGhpcy5pbnN0YW50U2VhcmNoUGFyZW50LmFkZFdpZGdldCh0aGlzLndpZGdldCk7XG4gIH1cblxuICBwdWJsaWMgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMuaW5zdGFudFNlYXJjaFBhcmVudC5wbGF0Zm9ybUlkKSkge1xuICAgICAgdGhpcy5pbnN0YW50U2VhcmNoUGFyZW50LnJlbW92ZVdpZGdldCh0aGlzLndpZGdldCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHVwZGF0ZVN0YXRlID0gKFxuICAgIHN0YXRlOiB7fSxcbiAgICBpc0ZpcnN0UmVuZGVyaW5nOiBib29sZWFuXG4gICk6IFByb21pc2U8dm9pZD4gfCB2b2lkID0+IHtcbiAgICBpZiAoaXNGaXJzdFJlbmRlcmluZykge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gIH07XG5cbiAgLy8gaGVscGVyIG1ldGhvZCBmb3IgZ2VuZXJpbmcgaXRlbSBsaXN0IGNsYXNzTmFtZVxuICBwdWJsaWMgZ2V0SXRlbUNsYXNzKGl0ZW06IHsgaXNSZWZpbmVkPzogYm9vbGVhbiB9KSB7XG4gICAgbGV0IGNsYXNzTmFtZSA9IHRoaXMuY3goJ2l0ZW0nKTtcblxuICAgIGlmIChpdGVtLmlzUmVmaW5lZCkge1xuICAgICAgY2xhc3NOYW1lID0gYCR7Y2xhc3NOYW1lfSAke3RoaXMuY3goJ2l0ZW0nLCAnc2VsZWN0ZWQnKX1gO1xuICAgIH1cblxuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cbn1cbiJdfQ==