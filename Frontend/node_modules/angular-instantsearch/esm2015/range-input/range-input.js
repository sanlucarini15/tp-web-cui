/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Component, Input, forwardRef } from '@angular/core';
import { connectRange } from 'instantsearch.js/es/connectors';
import { BaseWidget } from '../base-widget';
import { NgAisInstantSearch } from '../instantsearch/instantsearch';
import { parseNumberInput, noop } from '../utils';
export class NgAisRangeInput extends BaseWidget {
    /**
     * @param {?} instantSearchParent
     */
    constructor(instantSearchParent) {
        super('RangeInput');
        this.instantSearchParent = instantSearchParent;
        // rendering options
        this.currency = '$';
        this.separator = 'to';
        this.submitLabel = 'Go';
        this.precision = 0;
        // inner state
        this.minInputValue = '';
        this.maxInputValue = '';
        this.state = {
            range: { min: undefined, max: undefined },
            refine: noop,
            start: [0, 0],
        };
    }
    /**
     * @return {?}
     */
    get step() {
        /** @type {?} */
        const precision = parseNumberInput(this.precision);
        return 1 / Math.pow(10, precision);
    }
    /**
     * @return {?}
     */
    get canRefine() {
        return this.state.range.min !== this.state.range.max;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.createWidget(connectRange, {
            attribute: this.attribute,
            max: parseNumberInput(this.max),
            min: parseNumberInput(this.min),
            precision: parseNumberInput(this.precision),
        });
        super.ngOnInit();
    }
    /**
     * @param {?} event
     * @param {?} type
     * @return {?}
     */
    handleChange(event, type) {
        /** @type {?} */
        const value = parseNumberInput(event.target.value);
        if (type === 'min') {
            this.minInputValue = value;
        }
        else {
            this.maxInputValue = value;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleSubmit(event) {
        event.preventDefault();
        this.state.refine([this.minInputValue, this.maxInputValue]);
    }
}
NgAisRangeInput.decorators = [
    { type: Component, args: [{
                selector: 'ais-range-input',
                template: `
    <div [ngClass]="[
        cx(), 
        !canRefine ? cx('', 'noRefinement') : ''
      ]">
      <form
        [class]="cx('form')"
        (submit)="handleSubmit($event)"
        novalidate
      >
        <label [class]="cx('label')">
          <span [class]="cx('currency')">{{currency}}</span>
          <input
            [ngClass]="[
              cx('input'),
              cx('input', 'min')
            ]"
            type="number"
            [min]="state.range.min"
            [max]="state.range.max"
            [placeholder]="state.range.min"
            [value]="minInputValue"
            [step]="step"
            (change)="handleChange($event, 'min')"
          />
        </label>

        <span [class]="cx('separator')">{{separator}}</span>

        <label [class]="cx('label')">
          <span [class]="cx('currency')">{{currency}}</span>
          <input
            [ngClass]="[
              cx('input'),
              cx('input', 'max')
            ]"
            type="number"
            [min]="state.range.min"
            [max]="state.range.max"
            [placeholder]="state.range.max"
            [value]="maxInputValue"
            [step]="step"
            (change)="handleChange($event, 'max')"
          />
        </label>

        <button
          [class]="cx('submit')"
          (click)="handleSubmit($event)"
        >
          {{submitLabel}}
        </button>
      </form>
    </div>
  `
            }] }
];
/** @nocollapse */
NgAisRangeInput.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => NgAisInstantSearch)),] }] }
];
NgAisRangeInput.propDecorators = {
    currency: [{ type: Input }],
    separator: [{ type: Input }],
    submitLabel: [{ type: Input }],
    attribute: [{ type: Input }],
    min: [{ type: Input }],
    max: [{ type: Input }],
    precision: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgAisRangeInput.prototype.currency;
    /** @type {?} */
    NgAisRangeInput.prototype.separator;
    /** @type {?} */
    NgAisRangeInput.prototype.submitLabel;
    /** @type {?} */
    NgAisRangeInput.prototype.attribute;
    /** @type {?} */
    NgAisRangeInput.prototype.min;
    /** @type {?} */
    NgAisRangeInput.prototype.max;
    /** @type {?} */
    NgAisRangeInput.prototype.precision;
    /** @type {?} */
    NgAisRangeInput.prototype.minInputValue;
    /** @type {?} */
    NgAisRangeInput.prototype.maxInputValue;
    /** @type {?} */
    NgAisRangeInput.prototype.state;
    /** @type {?} */
    NgAisRangeInput.prototype.instantSearchParent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZ2UtaW5wdXQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWluc3RhbnRzZWFyY2gvIiwic291cmNlcyI6WyJyYW5nZS1pbnB1dC9yYW5nZS1pbnB1dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVyRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDOUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFrRWxELE1BQU0sT0FBTyxlQUFnQixTQUFRLFVBQVU7Ozs7SUErQjdDLFlBRVMsbUJBQXdCO1FBRS9CLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUZiLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBSzs7UUEvQmpCLGFBQVEsR0FBVyxHQUFHLENBQUM7UUFDdkIsY0FBUyxHQUFXLElBQUksQ0FBQztRQUN6QixnQkFBVyxHQUFXLElBQUksQ0FBQztRQU0zQixjQUFTLEdBQVksQ0FBQyxDQUFDOztRQUdoQyxrQkFBYSxHQUFxQixFQUFFLENBQUM7UUFDckMsa0JBQWEsR0FBcUIsRUFBRSxDQUFDO1FBV3JDLFVBQUssR0FBc0I7WUFDaEMsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFO1lBQ3pDLE1BQU0sRUFBRSxJQUFJO1lBQ1osS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNkLENBQUM7SUFPRixDQUFDOzs7O0lBcEJELElBQUksSUFBSTs7Y0FDQSxTQUFTLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUNsRCxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNyQyxDQUFDOzs7O0lBRUQsSUFBSSxTQUFTO1FBQ1gsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQ3ZELENBQUM7Ozs7SUFlTSxRQUFRO1FBQ2IsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUU7WUFDOUIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQy9CLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQy9CLFNBQVMsRUFBRSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1NBQzVDLENBQUMsQ0FBQztRQUVILEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNuQixDQUFDOzs7Ozs7SUFFTSxZQUFZLENBQUMsS0FBVSxFQUFFLElBQVk7O2NBQ3BDLEtBQUssR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUVsRCxJQUFJLElBQUksS0FBSyxLQUFLLEVBQUU7WUFDbEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7U0FDNUI7YUFBTTtZQUNMLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1NBQzVCO0lBQ0gsQ0FBQzs7Ozs7SUFFTSxZQUFZLENBQUMsS0FBaUM7UUFDbkQsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUM5RCxDQUFDOzs7WUF4SEYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQkFBaUI7Z0JBQzNCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBc0RUO2FBQ0Y7Ozs7NENBaUNJLE1BQU0sU0FBQyxVQUFVOzs7b0JBQUMsR0FBRyxFQUFFLENBQUMsa0JBQWtCLEVBQUM7Ozt1QkE5QjdDLEtBQUs7d0JBQ0wsS0FBSzswQkFDTCxLQUFLO3dCQUdMLEtBQUs7a0JBQ0wsS0FBSztrQkFDTCxLQUFLO3dCQUNMLEtBQUs7Ozs7SUFSTixtQ0FBdUM7O0lBQ3ZDLG9DQUF5Qzs7SUFDekMsc0NBQTJDOztJQUczQyxvQ0FBa0M7O0lBQ2xDLDhCQUE2Qjs7SUFDN0IsOEJBQTZCOztJQUM3QixvQ0FBdUM7O0lBR3ZDLHdDQUE0Qzs7SUFDNUMsd0NBQTRDOztJQVc1QyxnQ0FJRTs7SUFHQSw4Q0FDK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIENvbXBvbmVudCwgSW5wdXQsIGZvcndhcmRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29ubmVjdFJhbmdlIH0gZnJvbSAnaW5zdGFudHNlYXJjaC5qcy9lcy9jb25uZWN0b3JzJztcbmltcG9ydCB7IEJhc2VXaWRnZXQgfSBmcm9tICcuLi9iYXNlLXdpZGdldCc7XG5pbXBvcnQgeyBOZ0Fpc0luc3RhbnRTZWFyY2ggfSBmcm9tICcuLi9pbnN0YW50c2VhcmNoL2luc3RhbnRzZWFyY2gnO1xuaW1wb3J0IHsgcGFyc2VOdW1iZXJJbnB1dCwgbm9vcCB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IHR5cGUgTnVtZXJpY1JhbmdlU3RhdGUgPSB7XG4gIHN0YXJ0OiBudW1iZXJbXTtcbiAgcmFuZ2U6IHsgbWluPzogbnVtYmVyOyBtYXg/OiBudW1iZXIgfTtcbiAgcmVmaW5lOiBGdW5jdGlvbjtcbn07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Fpcy1yYW5nZS1pbnB1dCcsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBbbmdDbGFzc109XCJbXG4gICAgICAgIGN4KCksIFxuICAgICAgICAhY2FuUmVmaW5lID8gY3goJycsICdub1JlZmluZW1lbnQnKSA6ICcnXG4gICAgICBdXCI+XG4gICAgICA8Zm9ybVxuICAgICAgICBbY2xhc3NdPVwiY3goJ2Zvcm0nKVwiXG4gICAgICAgIChzdWJtaXQpPVwiaGFuZGxlU3VibWl0KCRldmVudClcIlxuICAgICAgICBub3ZhbGlkYXRlXG4gICAgICA+XG4gICAgICAgIDxsYWJlbCBbY2xhc3NdPVwiY3goJ2xhYmVsJylcIj5cbiAgICAgICAgICA8c3BhbiBbY2xhc3NdPVwiY3goJ2N1cnJlbmN5JylcIj57e2N1cnJlbmN5fX08L3NwYW4+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICBbbmdDbGFzc109XCJbXG4gICAgICAgICAgICAgIGN4KCdpbnB1dCcpLFxuICAgICAgICAgICAgICBjeCgnaW5wdXQnLCAnbWluJylcbiAgICAgICAgICAgIF1cIlxuICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgICAgICBbbWluXT1cInN0YXRlLnJhbmdlLm1pblwiXG4gICAgICAgICAgICBbbWF4XT1cInN0YXRlLnJhbmdlLm1heFwiXG4gICAgICAgICAgICBbcGxhY2Vob2xkZXJdPVwic3RhdGUucmFuZ2UubWluXCJcbiAgICAgICAgICAgIFt2YWx1ZV09XCJtaW5JbnB1dFZhbHVlXCJcbiAgICAgICAgICAgIFtzdGVwXT1cInN0ZXBcIlxuICAgICAgICAgICAgKGNoYW5nZSk9XCJoYW5kbGVDaGFuZ2UoJGV2ZW50LCAnbWluJylcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvbGFiZWw+XG5cbiAgICAgICAgPHNwYW4gW2NsYXNzXT1cImN4KCdzZXBhcmF0b3InKVwiPnt7c2VwYXJhdG9yfX08L3NwYW4+XG5cbiAgICAgICAgPGxhYmVsIFtjbGFzc109XCJjeCgnbGFiZWwnKVwiPlxuICAgICAgICAgIDxzcGFuIFtjbGFzc109XCJjeCgnY3VycmVuY3knKVwiPnt7Y3VycmVuY3l9fTwvc3Bhbj5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIFtuZ0NsYXNzXT1cIltcbiAgICAgICAgICAgICAgY3goJ2lucHV0JyksXG4gICAgICAgICAgICAgIGN4KCdpbnB1dCcsICdtYXgnKVxuICAgICAgICAgICAgXVwiXG4gICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcbiAgICAgICAgICAgIFttaW5dPVwic3RhdGUucmFuZ2UubWluXCJcbiAgICAgICAgICAgIFttYXhdPVwic3RhdGUucmFuZ2UubWF4XCJcbiAgICAgICAgICAgIFtwbGFjZWhvbGRlcl09XCJzdGF0ZS5yYW5nZS5tYXhcIlxuICAgICAgICAgICAgW3ZhbHVlXT1cIm1heElucHV0VmFsdWVcIlxuICAgICAgICAgICAgW3N0ZXBdPVwic3RlcFwiXG4gICAgICAgICAgICAoY2hhbmdlKT1cImhhbmRsZUNoYW5nZSgkZXZlbnQsICdtYXgnKVwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9sYWJlbD5cblxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgW2NsYXNzXT1cImN4KCdzdWJtaXQnKVwiXG4gICAgICAgICAgKGNsaWNrKT1cImhhbmRsZVN1Ym1pdCgkZXZlbnQpXCJcbiAgICAgICAgPlxuICAgICAgICAgIHt7c3VibWl0TGFiZWx9fVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvZm9ybT5cbiAgICA8L2Rpdj5cbiAgYCxcbn0pXG5leHBvcnQgY2xhc3MgTmdBaXNSYW5nZUlucHV0IGV4dGVuZHMgQmFzZVdpZGdldCB7XG4gIC8vIHJlbmRlcmluZyBvcHRpb25zXG4gIEBJbnB1dCgpIHB1YmxpYyBjdXJyZW5jeTogc3RyaW5nID0gJyQnO1xuICBASW5wdXQoKSBwdWJsaWMgc2VwYXJhdG9yOiBzdHJpbmcgPSAndG8nO1xuICBASW5wdXQoKSBwdWJsaWMgc3VibWl0TGFiZWw6IHN0cmluZyA9ICdHbyc7XG5cbiAgLy8gaW5zdGFuY2Ugb3B0aW9uc1xuICBASW5wdXQoKSBwdWJsaWMgYXR0cmlidXRlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyBtaW4/OiBudW1iZXI7XG4gIEBJbnB1dCgpIHB1YmxpYyBtYXg/OiBudW1iZXI7XG4gIEBJbnB1dCgpIHB1YmxpYyBwcmVjaXNpb24/OiBudW1iZXIgPSAwO1xuXG4gIC8vIGlubmVyIHN0YXRlXG4gIHB1YmxpYyBtaW5JbnB1dFZhbHVlPzogbnVtYmVyIHwgc3RyaW5nID0gJyc7XG4gIHB1YmxpYyBtYXhJbnB1dFZhbHVlPzogbnVtYmVyIHwgc3RyaW5nID0gJyc7XG5cbiAgZ2V0IHN0ZXAoKSB7XG4gICAgY29uc3QgcHJlY2lzaW9uID0gcGFyc2VOdW1iZXJJbnB1dCh0aGlzLnByZWNpc2lvbik7XG4gICAgcmV0dXJuIDEgLyBNYXRoLnBvdygxMCwgcHJlY2lzaW9uKTtcbiAgfVxuXG4gIGdldCBjYW5SZWZpbmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUucmFuZ2UubWluICE9PSB0aGlzLnN0YXRlLnJhbmdlLm1heDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0ZTogTnVtZXJpY1JhbmdlU3RhdGUgPSB7XG4gICAgcmFuZ2U6IHsgbWluOiB1bmRlZmluZWQsIG1heDogdW5kZWZpbmVkIH0sXG4gICAgcmVmaW5lOiBub29wLFxuICAgIHN0YXJ0OiBbMCwgMF0sXG4gIH07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE5nQWlzSW5zdGFudFNlYXJjaCkpXG4gICAgcHVibGljIGluc3RhbnRTZWFyY2hQYXJlbnQ6IGFueVxuICApIHtcbiAgICBzdXBlcignUmFuZ2VJbnB1dCcpO1xuICB9XG5cbiAgcHVibGljIG5nT25Jbml0KCkge1xuICAgIHRoaXMuY3JlYXRlV2lkZ2V0KGNvbm5lY3RSYW5nZSwge1xuICAgICAgYXR0cmlidXRlOiB0aGlzLmF0dHJpYnV0ZSxcbiAgICAgIG1heDogcGFyc2VOdW1iZXJJbnB1dCh0aGlzLm1heCksXG4gICAgICBtaW46IHBhcnNlTnVtYmVySW5wdXQodGhpcy5taW4pLFxuICAgICAgcHJlY2lzaW9uOiBwYXJzZU51bWJlcklucHV0KHRoaXMucHJlY2lzaW9uKSxcbiAgICB9KTtcblxuICAgIHN1cGVyLm5nT25Jbml0KCk7XG4gIH1cblxuICBwdWJsaWMgaGFuZGxlQ2hhbmdlKGV2ZW50OiBhbnksIHR5cGU6IHN0cmluZykge1xuICAgIGNvbnN0IHZhbHVlID0gcGFyc2VOdW1iZXJJbnB1dChldmVudC50YXJnZXQudmFsdWUpO1xuXG4gICAgaWYgKHR5cGUgPT09ICdtaW4nKSB7XG4gICAgICB0aGlzLm1pbklucHV0VmFsdWUgPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tYXhJbnB1dFZhbHVlID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGhhbmRsZVN1Ym1pdChldmVudDogTW91c2VFdmVudCB8IEtleWJvYXJkRXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuc3RhdGUucmVmaW5lKFt0aGlzLm1pbklucHV0VmFsdWUsIHRoaXMubWF4SW5wdXRWYWx1ZV0pO1xuICB9XG59XG4iXX0=