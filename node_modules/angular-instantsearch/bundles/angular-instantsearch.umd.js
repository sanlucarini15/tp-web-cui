(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('instantsearch.js/es/connectors'), require('algoliasearch/lite'), require('instantsearch.js/es'), require('instantsearch.js/es/widgets/index/index'), require('instantsearch.js/es/helpers'), require('instantsearch.js/es/lib/utils'), require('nouislider'), require('querystring-es3/encode')) :
    typeof define === 'function' && define.amd ? define('angular-instantsearch', ['exports', '@angular/core', '@angular/common', 'instantsearch.js/es/connectors', 'algoliasearch/lite', 'instantsearch.js/es', 'instantsearch.js/es/widgets/index/index', 'instantsearch.js/es/helpers', 'instantsearch.js/es/lib/utils', 'nouislider', 'querystring-es3/encode'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['angular-instantsearch'] = {}, global.ng.core, global.ng.common, global.instantsearch.connectors, global.algoliasearch, global.instantsearch, global.instantsearch.widgets.index, global.instantsearch.helpers, global.instantsearch.lib.utils, global.noUiSlider, global.qs.encode));
}(this, (function (exports, core, common, connectors, algoliasearchProxy, instantsearch, indexWidget, helpers, utils, noUiSlider, encodeProxy) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var algoliasearchProxy__namespace = /*#__PURE__*/_interopNamespace(algoliasearchProxy);
    var instantsearch__default = /*#__PURE__*/_interopDefaultLegacy(instantsearch);
    var indexWidget__default = /*#__PURE__*/_interopDefaultLegacy(indexWidget);
    var noUiSlider__namespace = /*#__PURE__*/_interopNamespace(noUiSlider);
    var encodeProxy__namespace = /*#__PURE__*/_interopNamespace(encodeProxy);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    function bem(widgetName) {
        var cx = function (element, subElement) {
            var cssClass = "ais-" + widgetName;
            if (element) {
                cssClass += "-" + element;
            }
            if (subElement) {
                cssClass += "--" + subElement;
            }
            return cssClass;
        };
        return cx;
    }
    function parseNumberInput(input) {
        return typeof input === 'string' ? parseInt(input, 10) : input;
    }
    function noop() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
    }
    function capitalize(s) {
        return s.charAt(0).toUpperCase() + s.slice(1);
    }
    // See https://github.com/algolia/instantsearch.js/blob/9296022fecadfbf82f15e837c215a1356eac4bc5/src/lib/utils/range.ts
    function range(_a) {
        var _b = _a.start, start = _b === void 0 ? 0 : _b, end = _a.end, _c = _a.step, step = _c === void 0 ? 1 : _c;
        // We can't divide by 0 so we re-assign the step to 1 if it happens.
        var limitStep = step === 0 ? 1 : step;
        // In some cases the array to create has a decimal length.
        // We therefore need to round the value.
        // Example:
        //   { start: 1, end: 5000, step: 500 }
        //   => Array length = (5000 - 1) / 500 = 9.998
        var arrayLength = Math.round((end - start) / limitStep);
        return __spreadArray([], __read(Array(arrayLength))).map(function (_, current) { return start + current * limitStep; });
    }
    // See https://github.com/algolia/react-instantsearch/blob/86dfe8674d566124af55a8f044051d0062786c1a/packages/react-instantsearch-core/src/core/utils.ts#L138-L142
    function getPropertyByPath(object, path) {
        return path
            .replace(/\[(\d+)]/g, '.$1')
            .split('.')
            .reduce(function (current, key) { return (current ? current[key] : undefined); }, object);
    }

    var TypedBaseWidget = /** @class */ (function () {
        function TypedBaseWidget(widgetName) {
            var _this = this;
            this.updateState = function (state, isFirstRendering) {
                if (isFirstRendering) {
                    Promise.resolve().then(function () {
                        _this.state = state;
                    });
                }
                else {
                    _this.state = state;
                }
            };
            this.cx = bem(widgetName);
        }
        Object.defineProperty(TypedBaseWidget.prototype, "parent", {
            get: function () {
                if (this.parentIndex) {
                    return this.parentIndex;
                }
                return this.instantSearchInstance;
            },
            enumerable: false,
            configurable: true
        });
        TypedBaseWidget.prototype.createWidget = function (connector, options, additionalWidgetProperties) {
            if (additionalWidgetProperties === void 0) { additionalWidgetProperties = {}; }
            this.widget = Object.assign(Object.assign({}, connector(this.updateState, noop)(options)), additionalWidgetProperties);
        };
        TypedBaseWidget.prototype.ngOnInit = function () {
            this.parent.addWidgets([this.widget]);
        };
        TypedBaseWidget.prototype.ngOnDestroy = function () {
            if (common.isPlatformBrowser(this.instantSearchInstance.platformId)) {
                this.parent.removeWidgets([this.widget]);
            }
        };
        /**
         * Helper to generate class names for an item
         * @param item element to generate a class name for
         */
        TypedBaseWidget.prototype.getItemClass = function (item) {
            var className = this.cx('item');
            if (item.isRefined) {
                return className + " " + this.cx('item', 'selected');
            }
            return className;
        };
        return TypedBaseWidget;
    }());
    TypedBaseWidget.propDecorators = {
        autoHideContainer: [{ type: core.Input }]
    };

    var VERSION = '4.4.1';

    // this is needed for different webpack/typescript configurations
    var algoliasearch$1 = algoliasearchProxy__namespace.default || algoliasearchProxy__namespace;
    var NgAisInstantSearch = /** @class */ (function () {
        function NgAisInstantSearch(platformId) {
            var _this = this;
            this.platformId = platformId;
            this.instanceName = 'default';
            this.change = new core.EventEmitter();
            this.onRender = function () {
                _this.change.emit({
                    results: _this.instantSearchInstance.helper.lastResults,
                    state: _this.instantSearchInstance.helper.state,
                });
            };
        }
        NgAisInstantSearch.prototype.ngOnInit = function () {
            if (typeof this.config.searchClient.addAlgoliaAgent === 'function') {
                this.config.searchClient.addAlgoliaAgent("angular (" + core.VERSION.full + ")");
                this.config.searchClient.addAlgoliaAgent("angular-instantsearch (" + VERSION + ")");
            }
            this.instantSearchInstance = instantsearch__default['default'](this.config);
            this.instantSearchInstance.on('render', this.onRender);
        };
        NgAisInstantSearch.prototype.ngAfterViewInit = function () {
            this.instantSearchInstance.start();
        };
        NgAisInstantSearch.prototype.ngOnDestroy = function () {
            if (this.instantSearchInstance) {
                this.instantSearchInstance.removeListener('render', this.onRender);
                this.instantSearchInstance.dispose();
            }
        };
        NgAisInstantSearch.prototype.addWidgets = function (widgets) {
            this.instantSearchInstance.addWidgets(widgets);
        };
        NgAisInstantSearch.prototype.removeWidgets = function (widgets) {
            this.instantSearchInstance.removeWidgets(widgets);
        };
        NgAisInstantSearch.prototype.refresh = function () {
            this.instantSearchInstance.refresh();
        };
        return NgAisInstantSearch;
    }());
    NgAisInstantSearch.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-instantsearch',
                    template: '<ng-content></ng-content>'
                },] }
    ];
    NgAisInstantSearch.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
    ]; };
    NgAisInstantSearch.propDecorators = {
        config: [{ type: core.Input }],
        instanceName: [{ type: core.Input }],
        change: [{ type: core.Output }]
    };

    var NgAisIndex = /** @class */ (function () {
        function NgAisIndex(
        // public API does not include SkipSelf, but the index widget should accept parents, avoiding itself.
        parentIndex, instantSearchInstance) {
            this.parentIndex = parentIndex;
            this.instantSearchInstance = instantSearchInstance;
        }
        Object.defineProperty(NgAisIndex.prototype, "parent", {
            get: function () {
                if (this.parentIndex) {
                    return this.parentIndex;
                }
                return this.instantSearchInstance;
            },
            enumerable: false,
            configurable: true
        });
        NgAisIndex.prototype.createWidget = function () {
            this.widget = Object.assign(Object.assign({}, indexWidget__default['default']({
                indexName: this.indexName,
                indexId: this.indexId,
            })), { $$widgetType: 'ais.index' });
        };
        NgAisIndex.prototype.addWidgets = function (widgets) {
            this.widget.addWidgets(widgets);
        };
        NgAisIndex.prototype.removeWidgets = function (widgets) {
            this.widget.removeWidgets(widgets);
        };
        NgAisIndex.prototype.ngOnInit = function () {
            this.createWidget();
            this.parent.addWidgets([this.widget]);
        };
        NgAisIndex.prototype.ngOnDestroy = function () {
            if (common.isPlatformBrowser(this.instantSearchInstance.platformId)) {
                this.parent.removeWidgets([this.widget]);
            }
        };
        return NgAisIndex;
    }());
    NgAisIndex.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-index',
                    template: "<ng-content></ng-content>"
                },] }
    ];
    NgAisIndex.ctorParameters = function () { return [
        { type: NgAisIndex, decorators: [{ type: core.SkipSelf }, { type: core.Inject, args: [core.forwardRef(function () { return NgAisIndex; }),] }, { type: core.Optional }] },
        { type: NgAisInstantSearch, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisIndex.propDecorators = {
        indexName: [{ type: core.Input }],
        indexId: [{ type: core.Input }]
    };

    var NgAisBreadcrumb = /** @class */ (function (_super) {
        __extends(NgAisBreadcrumb, _super);
        function NgAisBreadcrumb(parentIndex, instantSearchInstance) {
            var _this = _super.call(this, 'Breadcrumb') || this;
            _this.parentIndex = parentIndex;
            _this.instantSearchInstance = instantSearchInstance;
            _this.state = {
                createURL: function () { return '#'; },
                items: [],
                refine: noop,
                canRefine: false,
            };
            return _this;
        }
        Object.defineProperty(NgAisBreadcrumb.prototype, "isHidden", {
            get: function () {
                return this.state.items.length === 0 && this.autoHideContainer;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NgAisBreadcrumb.prototype, "items", {
            get: function () {
                var _this = this;
                return this.state.items.map(function (item, idx) { return (Object.assign(Object.assign({}, item), { separator: idx !== 0, isLast: idx === _this.state.items.length - 1 })); });
            },
            enumerable: false,
            configurable: true
        });
        NgAisBreadcrumb.prototype.ngOnInit = function () {
            this.createWidget(connectors.connectBreadcrumb, {
                attributes: this.attributes,
                rootPath: this.rootPath,
                separator: this.separator,
                transformItems: this.transformItems,
            }, {
                $$widgetType: 'ais.breadcrumb',
            });
            _super.prototype.ngOnInit.call(this);
        };
        NgAisBreadcrumb.prototype.handleClick = function (event, item) {
            event.preventDefault();
            event.stopPropagation();
            if (item.value) {
                this.state.refine(item.value);
            }
        };
        return NgAisBreadcrumb;
    }(TypedBaseWidget));
    NgAisBreadcrumb.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-breadcrumb',
                    template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <ul [class]=\"cx('list')\">\n        <li\n          *ngFor=\"let item of items\"\n          [ngClass]=\"[cx('item'), item.isLast ? cx('item', 'selected') : '']\"\n          (click)=\"handleClick($event, item)\"\n        >\n          <span\n            *ngIf=\"item.separator\"\n            [class]=\"cx('separator')\"\n            aria-hidden=\"true\"\n          >\n            >\n          </span>\n          <a\n            [class]=\"cx('link')\"\n            href=\"{{state.createURL(item.value)}}\"\n            *ngIf=\"!item.isLast\"\n            (click)=\"handleClick($event, item)\"\n          >\n            {{item.label}}\n          </a>\n\n          <span *ngIf=\"item.isLast\">\n            {{item.label}}\n          </span>\n        </li>\n      </ul>\n    </div>\n  "
                },] }
    ];
    NgAisBreadcrumb.ctorParameters = function () { return [
        { type: NgAisIndex, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisIndex; }),] }, { type: core.Optional }] },
        { type: NgAisInstantSearch, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisBreadcrumb.propDecorators = {
        attributes: [{ type: core.Input }],
        rootPath: [{ type: core.Input }],
        separator: [{ type: core.Input }],
        transformItems: [{ type: core.Input }]
    };

    var NgAisBreadcrumbModule = /** @class */ (function () {
        function NgAisBreadcrumbModule() {
        }
        return NgAisBreadcrumbModule;
    }());
    NgAisBreadcrumbModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisBreadcrumb],
                    entryComponents: [NgAisBreadcrumb],
                    exports: [NgAisBreadcrumb],
                    imports: [common.CommonModule],
                },] }
    ];

    var NgAisClearRefinements = /** @class */ (function (_super) {
        __extends(NgAisClearRefinements, _super);
        function NgAisClearRefinements(parentIndex, instantSearchInstance) {
            var _this = _super.call(this, 'ClearRefinements') || this;
            _this.parentIndex = parentIndex;
            _this.instantSearchInstance = instantSearchInstance;
            // rendering options
            _this.resetLabel = 'Clear refinements';
            _this.state = {
                hasRefinements: false,
                canRefine: false,
                refine: noop,
                createURL: function () { return '#'; },
            };
            return _this;
        }
        Object.defineProperty(NgAisClearRefinements.prototype, "isHidden", {
            get: function () {
                return !this.state.hasRefinements && this.autoHideContainer;
            },
            enumerable: false,
            configurable: true
        });
        NgAisClearRefinements.prototype.ngOnInit = function () {
            this.createWidget(connectors.connectClearRefinements, {
                includedAttributes: this.includedAttributes,
                excludedAttributes: this.excludedAttributes,
                transformItems: this.transformItems,
            }, {
                $$widgetType: 'ais.clearRefinements',
            });
            _super.prototype.ngOnInit.call(this);
        };
        NgAisClearRefinements.prototype.handleClick = function (event) {
            event.preventDefault();
            if (this.state.hasRefinements) {
                this.state.refine();
            }
        };
        return NgAisClearRefinements;
    }(TypedBaseWidget));
    NgAisClearRefinements.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-clear-refinements',
                    template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <button\n        [class]=\"cx('button') + (!state.hasRefinements ? (' ' + cx('button', 'disabled')) : '')\"\n        (click)=\"handleClick($event)\"\n        [disabled]=\"!state.hasRefinements\"\n      >\n        {{resetLabel}}\n      </button>\n    </div>\n  "
                },] }
    ];
    NgAisClearRefinements.ctorParameters = function () { return [
        { type: NgAisIndex, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisIndex; }),] }, { type: core.Optional }] },
        { type: NgAisInstantSearch, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisClearRefinements.propDecorators = {
        resetLabel: [{ type: core.Input }],
        includedAttributes: [{ type: core.Input }],
        excludedAttributes: [{ type: core.Input }],
        transformItems: [{ type: core.Input }]
    };

    var NgAisClearRefinementsModule = /** @class */ (function () {
        function NgAisClearRefinementsModule() {
        }
        return NgAisClearRefinementsModule;
    }());
    NgAisClearRefinementsModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisClearRefinements],
                    entryComponents: [NgAisClearRefinements],
                    exports: [NgAisClearRefinements],
                    imports: [common.CommonModule],
                },] }
    ];

    var NgAisCurrentRefinements = /** @class */ (function (_super) {
        __extends(NgAisCurrentRefinements, _super);
        function NgAisCurrentRefinements(parentIndex, instantSearchInstance) {
            var _this = _super.call(this, 'CurrentRefinements') || this;
            _this.parentIndex = parentIndex;
            _this.instantSearchInstance = instantSearchInstance;
            _this.state = {
                createURL: function () { return '#'; },
                refine: noop,
                items: [],
                canRefine: false,
            };
            return _this;
        }
        Object.defineProperty(NgAisCurrentRefinements.prototype, "isHidden", {
            get: function () {
                return this.state.items.length === 0 && this.autoHideContainer;
            },
            enumerable: false,
            configurable: true
        });
        NgAisCurrentRefinements.prototype.ngOnInit = function () {
            this.createWidget(connectors.connectCurrentRefinements, {
                includedAttributes: this.includedAttributes,
                excludedAttributes: this.excludedAttributes,
                transformItems: this.transformItems,
            }, {
                $$widgetType: 'ais.currentRefinements',
            });
            _super.prototype.ngOnInit.call(this);
        };
        NgAisCurrentRefinements.prototype.handleClick = function (event, refinement) {
            event.preventDefault();
            this.state.refine(refinement);
        };
        return NgAisCurrentRefinements;
    }(TypedBaseWidget));
    NgAisCurrentRefinements.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-current-refinements',
                    template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <ul\n        [class]=\"cx('list')\"\n        *ngFor=\"let item of state.items\"\n      >\n        <li [class]=\"cx('item')\">\n          <span [class]=\"cx('label')\">{{item.label | titlecase}}:</span>\n\n          <span\n            [class]=\"cx('category')\"\n            *ngFor=\"let refinement of item.refinements\"\n          >\n            <span [class]=\"cx('categoryLabel')\">{{refinement.label}}</span>\n            <button [class]=\"cx('delete')\" (click)=\"handleClick($event, refinement)\">\u2715</button>\n          </span>\n        </li>\n      </ul>\n    </div>\n  "
                },] }
    ];
    NgAisCurrentRefinements.ctorParameters = function () { return [
        { type: NgAisIndex, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisIndex; }),] }, { type: core.Optional }] },
        { type: NgAisInstantSearch, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisCurrentRefinements.propDecorators = {
        includedAttributes: [{ type: core.Input }],
        excludedAttributes: [{ type: core.Input }],
        transformItems: [{ type: core.Input }]
    };

    var NgAisCurrentRefinementsModule = /** @class */ (function () {
        function NgAisCurrentRefinementsModule() {
        }
        return NgAisCurrentRefinementsModule;
    }());
    NgAisCurrentRefinementsModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisCurrentRefinements],
                    entryComponents: [NgAisCurrentRefinements],
                    exports: [NgAisCurrentRefinements],
                    imports: [common.CommonModule],
                },] }
    ];

    var NgAisHierarchicalMenu = /** @class */ (function (_super) {
        __extends(NgAisHierarchicalMenu, _super);
        function NgAisHierarchicalMenu(parentIndex, instantSearchInstance) {
            var _this = _super.call(this, 'HierarchicalMenu') || this;
            _this.parentIndex = parentIndex;
            _this.instantSearchInstance = instantSearchInstance;
            _this.state = {
                createURL: function () { return '#'; },
                items: [],
                refine: noop,
                canRefine: false,
                isShowingMore: false,
                toggleShowMore: noop,
                canToggleShowMore: false,
                sendEvent: noop,
            };
            return _this;
        }
        Object.defineProperty(NgAisHierarchicalMenu.prototype, "isHidden", {
            get: function () {
                return this.state.items.length === 0 && this.autoHideContainer;
            },
            enumerable: false,
            configurable: true
        });
        NgAisHierarchicalMenu.prototype.ngOnInit = function () {
            this.createWidget(connectors.connectHierarchicalMenu, {
                limit: parseNumberInput(this.limit),
                attributes: this.attributes,
                rootPath: this.rootPath,
                separator: this.separator,
                showParentLevel: this.showParentLevel,
                sortBy: this.sortBy,
                transformItems: this.transformItems,
            }, {
                $$widgetType: 'ais.hierarchicalMenu',
            });
            _super.prototype.ngOnInit.call(this);
        };
        return NgAisHierarchicalMenu;
    }(TypedBaseWidget));
    NgAisHierarchicalMenu.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-hierarchical-menu',
                    template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <ul [class]=\"cx('list') + ' ' + cx('list', 'lvl0')\">\n        <ais-hierarchical-menu-item\n          *ngFor=\"let item of state.items\"\n          [item]=\"item\"\n          [createURL]=\"state.createURL\"\n          [refine]=\"state.refine\"\n        >\n        </ais-hierarchical-menu-item>\n      </ul>\n    </div>\n  "
                },] }
    ];
    NgAisHierarchicalMenu.ctorParameters = function () { return [
        { type: NgAisIndex, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisIndex; }),] }, { type: core.Optional }] },
        { type: NgAisInstantSearch, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisHierarchicalMenu.propDecorators = {
        attributes: [{ type: core.Input }],
        separator: [{ type: core.Input }],
        rootPath: [{ type: core.Input }],
        showParentLevel: [{ type: core.Input }],
        limit: [{ type: core.Input }],
        sortBy: [{ type: core.Input }],
        transformItems: [{ type: core.Input }]
    };

    var NgAisHierarchicalMenuItem = /** @class */ (function () {
        function NgAisHierarchicalMenuItem() {
            this.lvl = 1;
            this.cx = bem('HierarchicalMenu');
        }
        NgAisHierarchicalMenuItem.prototype.getItemClass = function (item) {
            var className = this.cx('item');
            if (item.isRefined) {
                className = className + " " + this.cx('item', 'selected');
            }
            if (this.isArray(item.data) && item.data.length > 0) {
                className = className + " " + this.cx('item', 'parent');
            }
            return className;
        };
        NgAisHierarchicalMenuItem.prototype.getListClass = function () {
            return this.cx('list') + " " + this.cx('list', 'child') + " " + this.cx('list', "lvl" + this.lvl);
        };
        NgAisHierarchicalMenuItem.prototype.isArray = function (potentialArray) {
            return Array.isArray(potentialArray);
        };
        NgAisHierarchicalMenuItem.prototype.handleClick = function (event, item) {
            event.preventDefault();
            event.stopPropagation();
            this.refine(item.value);
        };
        return NgAisHierarchicalMenuItem;
    }());
    NgAisHierarchicalMenuItem.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-hierarchical-menu-item',
                    template: "\n    <li\n      [class]=\"getItemClass(item)\"\n      (click)=\"handleClick($event, item)\"\n    >\n      <a\n        [class]=\"cx('link')\"\n        href=\"{{createURL(item.value)}}\"\n        (click)=\"handleClick($event, item)\"\n      >\n        <span [class]=\"cx('label')\">{{item.label}}</span>\n        <span [class]=\"cx('count')\">{{item.count}}</span>\n      </a>\n\n      <ul\n        [class]=\"getListClass()\"\n        *ngIf=\"item.isRefined && isArray(item.data) && item.data.length > 0\"\n      >\n        <ais-hierarchical-menu-item\n          *ngFor=\"let child of item.data\"\n          [item]=\"child\"\n          [createURL]=\"createURL\"\n          [refine]=\"refine\"\n          [lvl]=\"lvl + 1\"\n        >\n        </ais-hierarchical-menu-item>\n      </ul>\n    </li>\n  "
                },] }
    ];
    NgAisHierarchicalMenuItem.propDecorators = {
        lvl: [{ type: core.Input }],
        refine: [{ type: core.Input }],
        createURL: [{ type: core.Input }],
        item: [{ type: core.Input }]
    };

    var NgAisHierarchicalMenuModule = /** @class */ (function () {
        function NgAisHierarchicalMenuModule() {
        }
        return NgAisHierarchicalMenuModule;
    }());
    NgAisHierarchicalMenuModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisHierarchicalMenu, NgAisHierarchicalMenuItem],
                    entryComponents: [NgAisHierarchicalMenu],
                    exports: [NgAisHierarchicalMenu],
                    imports: [common.CommonModule],
                },] }
    ];

    var NgAisHitsPerPage = /** @class */ (function (_super) {
        __extends(NgAisHitsPerPage, _super);
        function NgAisHitsPerPage(parentIndex, instantSearchInstance) {
            var _this = _super.call(this, 'HitsPerPage') || this;
            _this.parentIndex = parentIndex;
            _this.instantSearchInstance = instantSearchInstance;
            _this.state = {
                items: [],
                refine: noop,
                hasNoResults: true,
                canRefine: false,
            };
            return _this;
        }
        Object.defineProperty(NgAisHitsPerPage.prototype, "isHidden", {
            get: function () {
                return this.state.items.length === 0 && this.autoHideContainer;
            },
            enumerable: false,
            configurable: true
        });
        NgAisHitsPerPage.prototype.ngOnInit = function () {
            this.createWidget(connectors.connectHitsPerPage, {
                items: this.items,
                transformItems: this.transformItems,
            }, {
                $$widgetType: 'ais.hitsPerPage',
            });
            _super.prototype.ngOnInit.call(this);
        };
        return NgAisHitsPerPage;
    }(TypedBaseWidget));
    NgAisHitsPerPage.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-hits-per-page',
                    template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <select\n        [class]=\"cx('select')\"\n        (change)=\"state.refine($event.target.value)\"\n      >\n        <option\n          [class]=\"cx('option')\"\n          *ngFor=\"let item of state.items\"\n          [value]=\"item.value\"\n          [selected]=\"item.isRefined\"\n        >\n          {{item.label}}\n        </option>\n      </select>\n    </div>\n  "
                },] }
    ];
    NgAisHitsPerPage.ctorParameters = function () { return [
        { type: NgAisIndex, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisIndex; }),] }, { type: core.Optional }] },
        { type: NgAisInstantSearch, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisHitsPerPage.propDecorators = {
        items: [{ type: core.Input }],
        transformItems: [{ type: core.Input }]
    };

    var NgAisHitsPerPageModule = /** @class */ (function () {
        function NgAisHitsPerPageModule() {
        }
        return NgAisHitsPerPageModule;
    }());
    NgAisHitsPerPageModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisHitsPerPage],
                    entryComponents: [NgAisHitsPerPage],
                    exports: [NgAisHitsPerPage],
                    imports: [common.CommonModule],
                },] }
    ];

    var NgAisHighlight = /** @class */ (function () {
        function NgAisHighlight() {
            this.tagName = 'mark';
        }
        Object.defineProperty(NgAisHighlight.prototype, "content", {
            get: function () {
                var highlightAttributeResult = utils.getPropertyByPath(this.hit._highlightResult, this.attribute);
                var fallback = utils.getPropertyByPath(this.hit, this.attribute);
                // @MAJOR drop this custom fallback once it is implemented directly in instantsearch.js v5
                if (!highlightAttributeResult && fallback) {
                    return fallback;
                }
                return helpers.highlight({
                    attribute: this.attribute,
                    highlightedTagName: this.tagName,
                    hit: this.hit,
                });
            },
            enumerable: false,
            configurable: true
        });
        return NgAisHighlight;
    }());
    NgAisHighlight.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-highlight',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: "<span class=\"ais-Highlight\" [innerHtml]=\"content\"></span>"
                },] }
    ];
    NgAisHighlight.propDecorators = {
        attribute: [{ type: core.Input }],
        hit: [{ type: core.Input }],
        tagName: [{ type: core.Input }]
    };

    var NgAisHighlightModule = /** @class */ (function () {
        function NgAisHighlightModule() {
        }
        return NgAisHighlightModule;
    }());
    NgAisHighlightModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisHighlight],
                    entryComponents: [NgAisHighlight],
                    exports: [NgAisHighlight],
                    imports: [common.CommonModule],
                },] }
    ];

    var NgAisHits = /** @class */ (function (_super) {
        __extends(NgAisHits, _super);
        function NgAisHits(parentIndex, instantSearchInstance) {
            var _this = _super.call(this, 'Hits') || this;
            _this.parentIndex = parentIndex;
            _this.instantSearchInstance = instantSearchInstance;
            _this.state = {
                hits: [],
                results: undefined,
                bindEvent: undefined,
                sendEvent: undefined,
            };
            _this.updateState = function (state, isFirstRendering) {
                if (isFirstRendering)
                    return;
                _this.state = state;
            };
            return _this;
        }
        NgAisHits.prototype.ngOnInit = function () {
            this.createWidget(connectors.connectHitsWithInsights, {
                escapeHTML: this.escapeHTML,
                transformItems: this.transformItems,
            }, {
                $$widgetType: 'ais.hits',
            });
            _super.prototype.ngOnInit.call(this);
        };
        return NgAisHits;
    }(TypedBaseWidget));
    NgAisHits.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-hits',
                    template: "\n    <div [class]=\"cx()\">\n      <ng-container *ngTemplateOutlet=\"template; context: state\"></ng-container>\n\n      <!-- default rendering if no template specified -->\n      <div *ngIf=\"!template\">\n        <ul [class]=\"cx('list')\">\n          <li\n            [class]=\"cx('item')\"\n            *ngFor=\"let hit of state.hits\"\n          >\n            <ais-highlight attribute=\"name\" [hit]=\"hit\">\n            </ais-highlight>\n          </li>\n        </ul>\n      </div>\n    </div>\n  "
                },] }
    ];
    NgAisHits.ctorParameters = function () { return [
        { type: NgAisIndex, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisIndex; }),] }, { type: core.Optional }] },
        { type: NgAisInstantSearch, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisHits.propDecorators = {
        template: [{ type: core.ContentChild, args: [core.TemplateRef, { static: false },] }],
        escapeHTML: [{ type: core.Input }],
        transformItems: [{ type: core.Input }]
    };

    var NgAisHitsModule = /** @class */ (function () {
        function NgAisHitsModule() {
        }
        return NgAisHitsModule;
    }());
    NgAisHitsModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisHits],
                    entryComponents: [NgAisHits],
                    exports: [NgAisHits],
                    imports: [common.CommonModule, NgAisHighlightModule],
                },] }
    ];

    var NgAisIndexModule = /** @class */ (function () {
        function NgAisIndexModule() {
        }
        NgAisIndexModule.forRoot = function () {
            return {
                ngModule: NgAisIndexModule,
                providers: [],
            };
        };
        return NgAisIndexModule;
    }());
    NgAisIndexModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisIndex],
                    entryComponents: [NgAisIndex],
                    exports: [NgAisIndex],
                    imports: [common.CommonModule],
                },] }
    ];

    var NgAisInfiniteHits = /** @class */ (function (_super) {
        __extends(NgAisInfiniteHits, _super);
        function NgAisInfiniteHits(parentIndex, instantSearchInstance) {
            var _this = _super.call(this, 'InfiniteHits') || this;
            _this.parentIndex = parentIndex;
            _this.instantSearchInstance = instantSearchInstance;
            _this.showPrevious = false;
            _this.showPreviousLabel = 'Show previous results';
            _this.showMoreLabel = 'Show more results';
            _this.state = {
                hits: [],
                results: undefined,
                currentPageHits: [],
                isFirstPage: false,
                isLastPage: false,
                showMore: noop,
                showPrevious: noop,
                sendEvent: noop,
                bindEvent: function () { return ''; },
            };
            _this.updateState = function (state, isFirstRendering) {
                if (isFirstRendering)
                    return;
                _this.state = state;
            };
            return _this;
        }
        NgAisInfiniteHits.prototype.ngOnInit = function () {
            this.createWidget(connectors.connectInfiniteHitsWithInsights, {
                escapeHTML: this.escapeHTML,
                transformItems: this.transformItems,
            }, {
                $$widgetType: 'ais.infiniteHits',
            });
            _super.prototype.ngOnInit.call(this);
        };
        NgAisInfiniteHits.prototype.showMoreHandler = function (event) {
            event.preventDefault();
            this.state.showMore();
        };
        NgAisInfiniteHits.prototype.showPreviousHandler = function (event) {
            event.preventDefault();
            this.state.showPrevious();
        };
        return NgAisInfiniteHits;
    }(TypedBaseWidget));
    NgAisInfiniteHits.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-infinite-hits',
                    template: "\n    <div [class]=\"cx()\">\n      <ng-container *ngTemplateOutlet=\"template; context: state\"></ng-container>\n\n      <!-- default rendering if no template specified -->\n      <button\n        [ngClass]=\"[cx('loadPrevious'), this.state.isFirstPage ? cx('loadPrevious', 'disabled') : '']\"\n        (click)=\"showPreviousHandler($event)\"\n        [disabled]=\"state.isFirstPage\"\n        *ngIf=\"showPrevious && !template\"\n      >\n        {{showPreviousLabel}}\n      </button>\n\n      <div *ngIf=\"!template\">\n        <ul [class]=\"cx('list')\">\n          <li\n            [class]=\"cx('item')\"\n            *ngFor=\"let hit of state.hits\"\n          >\n            <ais-highlight attribute=\"name\" [hit]=\"hit\">\n            </ais-highlight>\n          </li>\n        </ul>\n      </div>\n\n      <button\n        [ngClass]=\"[cx('loadMore'), this.state.isLastPage ? cx('loadMore', 'disabled') : '']\"\n        (click)=\"showMoreHandler($event)\"\n        [disabled]=\"state.isLastPage\"\n        *ngIf=\"!template\"\n      >\n        {{showMoreLabel}}\n      </button>\n    </div>\n  "
                },] }
    ];
    NgAisInfiniteHits.ctorParameters = function () { return [
        { type: NgAisIndex, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisIndex; }),] }, { type: core.Optional }] },
        { type: NgAisInstantSearch, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisInfiniteHits.propDecorators = {
        template: [{ type: core.ContentChild, args: [core.TemplateRef, { static: false },] }],
        escapeHTML: [{ type: core.Input }],
        showPrevious: [{ type: core.Input }],
        showPreviousLabel: [{ type: core.Input }],
        showMoreLabel: [{ type: core.Input }],
        transformItems: [{ type: core.Input }]
    };

    var NgAisInfiniteHitsModule = /** @class */ (function () {
        function NgAisInfiniteHitsModule() {
        }
        return NgAisInfiniteHitsModule;
    }());
    NgAisInfiniteHitsModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisInfiniteHits],
                    entryComponents: [NgAisInfiniteHits],
                    exports: [NgAisInfiniteHits],
                    imports: [common.CommonModule, NgAisHighlightModule],
                },] }
    ];

    var NgAisInstantSearchModule = /** @class */ (function () {
        function NgAisInstantSearchModule() {
        }
        NgAisInstantSearchModule.forRoot = function () {
            return {
                ngModule: NgAisInstantSearchModule,
                providers: [],
            };
        };
        return NgAisInstantSearchModule;
    }());
    NgAisInstantSearchModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisInstantSearch],
                    entryComponents: [NgAisInstantSearch],
                    exports: [NgAisInstantSearch],
                    imports: [common.CommonModule],
                },] }
    ];

    var NgAisMenu = /** @class */ (function (_super) {
        __extends(NgAisMenu, _super);
        function NgAisMenu(parentIndex, instantSearchInstance) {
            var _this = _super.call(this, 'Menu') || this;
            _this.parentIndex = parentIndex;
            _this.instantSearchInstance = instantSearchInstance;
            // rendering options
            _this.showMoreLabel = 'Show more';
            _this.showLessLabel = 'Show less';
            _this.state = {
                items: [],
                refine: noop,
                createURL: function () { return '#'; },
                canRefine: false,
                isShowingMore: false,
                canToggleShowMore: false,
                toggleShowMore: noop,
                sendEvent: noop,
            };
            return _this;
        }
        Object.defineProperty(NgAisMenu.prototype, "isHidden", {
            get: function () {
                return this.state.items.length === 0 && this.autoHideContainer;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NgAisMenu.prototype, "showMoreClass", {
            get: function () {
                var className = this.cx('showMore');
                if (!this.state.canToggleShowMore) {
                    className = className + " " + this.cx('showMore', 'disabled');
                }
                return className;
            },
            enumerable: false,
            configurable: true
        });
        NgAisMenu.prototype.ngOnInit = function () {
            this.createWidget(connectors.connectMenu, {
                attribute: this.attribute,
                showMore: this.showMore,
                limit: this.limit,
                showMoreLimit: this.showMoreLimit,
                sortBy: this.sortBy,
                transformItems: this.transformItems,
            }, {
                $$widgetType: 'ais.menu',
            });
            _super.prototype.ngOnInit.call(this);
        };
        NgAisMenu.prototype.handleClick = function (event, value) {
            event.preventDefault();
            event.stopPropagation();
            this.state.refine(value);
        };
        return NgAisMenu;
    }(TypedBaseWidget));
    NgAisMenu.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-menu',
                    template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <ul [class]=\"cx('list')\">\n        <li\n          [class]=\"getItemClass(item)\"\n          *ngFor=\"let item of state.items\"\n          (click)=\"handleClick($event, item.value)\"\n        >\n          <a\n            href=\"{{state.createURL(item.value)}}\"\n            [class]=\"cx('link')\"\n            (click)=\"handleClick($event, item.value)\"\n          >\n            <span [class]=\"cx('label')\">{{item.label}}</span>\n            <span [class]=\"cx('count')\">{{item.count}}</span>\n          </a>\n        </li>\n      </ul>\n\n      <button\n        *ngIf=\"showMore\"\n        (click)=\"state.toggleShowMore()\"\n        [class]=\"showMoreClass\"\n        [disabled]=\"!state.canToggleShowMore\"\n      >\n        {{state.isShowingMore ? showLessLabel : showMoreLabel}}\n      </button>\n    </div>\n  "
                },] }
    ];
    NgAisMenu.ctorParameters = function () { return [
        { type: NgAisIndex, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisIndex; }),] }, { type: core.Optional }] },
        { type: NgAisInstantSearch, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisMenu.propDecorators = {
        showMoreLabel: [{ type: core.Input }],
        showLessLabel: [{ type: core.Input }],
        attribute: [{ type: core.Input }],
        showMore: [{ type: core.Input }],
        limit: [{ type: core.Input }],
        showMoreLimit: [{ type: core.Input }],
        sortBy: [{ type: core.Input }],
        transformItems: [{ type: core.Input }]
    };

    var NgAisMenuModule = /** @class */ (function () {
        function NgAisMenuModule() {
        }
        return NgAisMenuModule;
    }());
    NgAisMenuModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisMenu],
                    entryComponents: [NgAisMenu],
                    exports: [NgAisMenu],
                    imports: [common.CommonModule],
                },] }
    ];

    var NgAisNumericMenu = /** @class */ (function (_super) {
        __extends(NgAisNumericMenu, _super);
        function NgAisNumericMenu(parentIndex, instantSearchInstance) {
            var _this = _super.call(this, 'NumericMenu') || this;
            _this.parentIndex = parentIndex;
            _this.instantSearchInstance = instantSearchInstance;
            _this.state = {
                items: [],
                refine: noop,
                createURL: function () { return '#'; },
                hasNoResults: true,
                sendEvent: noop,
                canRefine: false,
            };
            return _this;
        }
        Object.defineProperty(NgAisNumericMenu.prototype, "isHidden", {
            get: function () {
                return this.state.items.length === 0 && this.autoHideContainer;
            },
            enumerable: false,
            configurable: true
        });
        NgAisNumericMenu.prototype.ngOnInit = function () {
            this.createWidget(connectors.connectNumericMenu, {
                attribute: this.attribute,
                items: this.items,
                transformItems: this.transformItems,
            }, {
                $$widgetType: 'ais.numericMenu',
            });
            _super.prototype.ngOnInit.call(this);
        };
        NgAisNumericMenu.prototype.refine = function (event, item) {
            event.preventDefault();
            event.stopPropagation();
            this.state.refine(item.value);
        };
        return NgAisNumericMenu;
    }(TypedBaseWidget));
    NgAisNumericMenu.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-numeric-menu',
                    template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <ul [class]=\"cx('list')\">\n        <li\n          [class]=\"getItemClass(item)\"\n          *ngFor=\"let item of state.items\"\n        >\n          <label [class]=\"cx('label')\">\n            <input\n              [class]=\"cx('radio')\"\n              type=\"radio\"\n              name=\"NumericMenu\"\n              [checked]=\"item.isRefined\"\n              (change)=\"refine($event, item)\"\n            />\n            <span [class]=\"cx('labelText')\">{{item.label}}</span>\n          </label>\n        </li>\n      </ul>\n    </div>\n  "
                },] }
    ];
    NgAisNumericMenu.ctorParameters = function () { return [
        { type: NgAisIndex, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisIndex; }),] }, { type: core.Optional }] },
        { type: NgAisInstantSearch, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisNumericMenu.propDecorators = {
        attribute: [{ type: core.Input }],
        items: [{ type: core.Input }],
        transformItems: [{ type: core.Input }]
    };

    var NgAisNumericMenuModule = /** @class */ (function () {
        function NgAisNumericMenuModule() {
        }
        return NgAisNumericMenuModule;
    }());
    NgAisNumericMenuModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisNumericMenu],
                    entryComponents: [NgAisNumericMenu],
                    exports: [NgAisNumericMenu],
                    imports: [common.CommonModule],
                },] }
    ];

    var NgAisPagination = /** @class */ (function (_super) {
        __extends(NgAisPagination, _super);
        function NgAisPagination(parentIndex, instantSearchInstance) {
            var _this = _super.call(this, 'Pagination') || this;
            _this.parentIndex = parentIndex;
            _this.instantSearchInstance = instantSearchInstance;
            // rendering options
            _this.showFirst = true;
            _this.showLast = true;
            _this.showPrevious = true;
            _this.showNext = true;
            // TODO: check if this works, padding and totalPages are most likely strings when passed to the template
            _this.state = {
                createURL: function () { return '#'; },
                currentRefinement: 0,
                nbHits: 0,
                nbPages: 0,
                refine: noop,
                pages: [],
                canRefine: false,
                isFirstPage: false,
                isLastPage: false,
            };
            return _this;
        }
        NgAisPagination.prototype.ngOnInit = function () {
            this.createWidget(connectors.connectPagination, {
                padding: parseNumberInput(this.padding),
                totalPages: parseNumberInput(this.totalPages),
            }, {
                $$widgetType: 'ais.pagination',
            });
            _super.prototype.ngOnInit.call(this);
        };
        NgAisPagination.prototype.refine = function (event, page) {
            event.stopPropagation();
            event.preventDefault();
            if (page < 0 ||
                page === this.state.currentRefinement ||
                page >= this.state.nbPages) {
                return;
            }
            this.state.refine(page);
        };
        return NgAisPagination;
    }(TypedBaseWidget));
    NgAisPagination.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-pagination',
                    template: "\n    <div [ngClass]=\"[cx(), state.nbPages <= 1 ? cx('', 'noRefinement') : '']\">\n      <ul [class]=\"cx('list')\">\n        <li\n          *ngIf=\"showFirst\"\n          (click)=\"refine($event, 0)\"\n          [class]=\"\n            cx('item') +\n            ' ' +\n            cx('item', 'firstPage') +\n            (state.currentRefinement === 0 ? ' ' + cx('item', 'disabled') : '')\n          \"\n        >\n          <a\n            [href]=\"state.createURL(0)\"\n            [class]=\"cx('link')\"\n          >\n            \u2039\u2039\n          </a>\n        </li>\n\n        <li\n          *ngIf=\"showPrevious\"\n          (click)=\"refine($event, state.currentRefinement - 1)\"\n          [class]=\"\n            cx('item') +\n            ' ' +\n            cx('item', 'previousPage') +\n            (state.currentRefinement === 0 ? ' ' + cx('item', 'disabled') : '')\n          \"\n        >\n          <a\n            [href]=\"state.createURL(state.currentRefinement - 1)\"\n            [class]=\"cx('link')\"\n          >\n            \u2039\n          </a>\n        </li>\n\n        <li\n          [class]=\"\n            cx('item') +\n            ' ' +\n            cx('item', 'page') +\n            (state.currentRefinement === page ? ' ' + cx('item', 'selected') : '')\n          \"\n          *ngFor=\"let page of state.pages\"\n          (click)=\"refine($event, page)\"\n        >\n          <a\n            [class]=\"cx('link')\"\n            [href]=\"state.createURL(page)\"\n          >\n            {{page + 1}}\n          </a>\n        </li>\n\n        <li\n          *ngIf=\"showNext\"\n          (click)=\"refine($event, state.currentRefinement + 1)\"\n          [class]=\"\n            cx('item') +\n            ' ' +\n            cx('item', 'nextPage') +\n            (state.currentRefinement + 1 === state.nbPages ? ' ' + cx('item', 'disabled') : '')\n          \"\n        >\n          <a\n            [href]=\"state.createURL(state.currentRefinement + 1)\"\n            [class]=\"cx('link')\"\n          >\n            \u203A\n          </a>\n        </li>\n\n        <li\n          *ngIf=\"showLast\"\n          (click)=\"refine($event, state.nbPages - 1)\"\n          [class]=\"\n            cx('item') +\n            ' ' +\n            cx('item', 'lastPage') +\n            (state.currentRefinement + 1 === state.nbPages ? ' ' + cx('item', 'disabled') : '')\n          \"\n        >\n          <a\n            [href]=\"state.createURL(state.nbPages - 1)\"\n            [class]=\"cx('link')\"\n          >\n            \u203A\u203A\n          </a>\n        </li>\n      </ul>\n    </div>\n  "
                },] }
    ];
    NgAisPagination.ctorParameters = function () { return [
        { type: NgAisIndex, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisIndex; }),] }, { type: core.Optional }] },
        { type: NgAisInstantSearch, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisPagination.propDecorators = {
        showFirst: [{ type: core.Input }],
        showLast: [{ type: core.Input }],
        showPrevious: [{ type: core.Input }],
        showNext: [{ type: core.Input }],
        padding: [{ type: core.Input }],
        totalPages: [{ type: core.Input }]
    };

    var NgAisPaginationModule = /** @class */ (function () {
        function NgAisPaginationModule() {
        }
        return NgAisPaginationModule;
    }());
    NgAisPaginationModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisPagination],
                    entryComponents: [NgAisPagination],
                    exports: [NgAisPagination],
                    imports: [common.CommonModule],
                },] }
    ];

    var NgAisRangeSlider = /** @class */ (function (_super) {
        __extends(NgAisRangeSlider, _super);
        function NgAisRangeSlider(parentIndex, instantSearchInstance) {
            var _this = _super.call(this, 'RangeSlider') || this;
            _this.parentIndex = parentIndex;
            _this.instantSearchInstance = instantSearchInstance;
            // rendering options
            _this.pips = true;
            _this.tooltips = true;
            _this.state = {
                canRefine: false,
                format: {
                    from: function () { return ''; },
                    to: function () { return ''; },
                },
                range: { min: 0, max: 1 },
                refine: noop,
                start: [0, 1],
                sendEvent: noop,
            };
            _this.updateState = function (state, isFirstRendering) {
                if (isFirstRendering) {
                    // create slider
                    var config = {
                        animate: false,
                        behaviour: 'snap',
                        connect: true,
                        range: { min: 0, max: 1 },
                        start: [0, 1],
                        step: _this.step,
                        tooltips: _this.tooltips && [
                            { to: _this.formatTooltip },
                            { to: _this.formatTooltip },
                        ],
                    };
                    // tslint:disable-next-line: no-boolean-literal-compare (pips is @Input, so could be not a boolean)
                    if (_this.pips === true || typeof _this.pips === 'undefined') {
                        Object.assign(config, {
                            pips: {
                                density: 3,
                                mode: 'positions',
                                stepped: true,
                                values: [0, 50, 100],
                            },
                        });
                    }
                    else if (_this.pips !== undefined) {
                        Object.assign(config, { pips: _this.pips });
                    }
                    _this.slider = noUiSlider__namespace.create(_this.sliderContainer.nativeElement, config);
                    // register listen events
                    _this.sliderContainer.nativeElement.noUiSlider.on('change', _this.handleChange);
                }
                // update component inner state
                _this.state = state;
                // update the slider state
                var _a = state.range, min = _a.min, max = _a.max, start = state.start;
                var disabled = min === max;
                var range = disabled ? { min: min, max: max + 0.0001 } : { min: min, max: max };
                // TODO: test this as we're nolonger passing disable
                // it seems the API has changed: slider.setAttribute('disabled', true) / slider.removeAttribute('disabled');
                // see: https://refreshless.com/nouislider/more/#section-disable
                _this.slider.updateOptions({ range: range, start: start });
            };
            _this.handleChange = function (values) {
                _this.state.refine(values);
            };
            _this.formatTooltip = function (value) {
                return value.toFixed(parseNumberInput(_this.precision));
            };
            return _this;
        }
        Object.defineProperty(NgAisRangeSlider.prototype, "step", {
            get: function () {
                // compute step from the precision value
                var precision = parseNumberInput(this.precision) || 2;
                return 1 / Math.pow(10, precision);
            },
            enumerable: false,
            configurable: true
        });
        NgAisRangeSlider.prototype.ngOnInit = function () {
            this.createWidget(connectors.connectRange, {
                attribute: this.attribute,
                max: parseNumberInput(this.max),
                min: parseNumberInput(this.min),
                precision: parseNumberInput(this.precision),
            }, {
                $$widgetType: 'ais.rangeSlider',
            });
            _super.prototype.ngOnInit.call(this);
        };
        return NgAisRangeSlider;
    }(TypedBaseWidget));
    NgAisRangeSlider.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-range-slider',
                    template: "\n    <div [class]=\"cx()\">\n      <div [class]=\"cx('body')\">\n        <div #sliderContainer></div>\n      </div>\n    </div>\n  "
                },] }
    ];
    NgAisRangeSlider.ctorParameters = function () { return [
        { type: NgAisIndex, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisIndex; }),] }, { type: core.Optional }] },
        { type: NgAisInstantSearch, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisRangeSlider.propDecorators = {
        sliderContainer: [{ type: core.ViewChild, args: ['sliderContainer', { static: false },] }],
        pips: [{ type: core.Input }],
        tooltips: [{ type: core.Input }],
        attribute: [{ type: core.Input }],
        min: [{ type: core.Input }],
        max: [{ type: core.Input }],
        precision: [{ type: core.Input }]
    };

    var NgAisRangeSliderModule = /** @class */ (function () {
        function NgAisRangeSliderModule() {
        }
        return NgAisRangeSliderModule;
    }());
    NgAisRangeSliderModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisRangeSlider],
                    entryComponents: [NgAisRangeSlider],
                    exports: [NgAisRangeSlider],
                    imports: [common.CommonModule],
                },] }
    ];

    var NgAisRefinementList = /** @class */ (function (_super) {
        __extends(NgAisRefinementList, _super);
        function NgAisRefinementList(parentIndex, instantSearchInstance) {
            var _this = _super.call(this, 'RefinementList') || this;
            _this.parentIndex = parentIndex;
            _this.instantSearchInstance = instantSearchInstance;
            // rendering options
            _this.showMoreLabel = 'Show more';
            _this.showLessLabel = 'Show less';
            _this.searchPlaceholder = 'Search here...';
            _this.state = {
                canRefine: false,
                canToggleShowMore: false,
                createURL: function () { return ''; },
                isShowingMore: false,
                items: [],
                refine: noop,
                toggleShowMore: noop,
                searchForItems: noop,
                isFromSearch: false,
                hasExhaustiveItems: false,
                sendEvent: noop,
            };
            return _this;
        }
        Object.defineProperty(NgAisRefinementList.prototype, "isHidden", {
            get: function () {
                return this.state.items.length === 0 && this.autoHideContainer;
            },
            enumerable: false,
            configurable: true
        });
        NgAisRefinementList.prototype.ngOnInit = function () {
            this.createWidget(connectors.connectRefinementList, {
                showMore: this.showMore,
                limit: parseNumberInput(this.limit),
                showMoreLimit: parseNumberInput(this.showMoreLimit),
                attribute: this.attribute,
                operator: this.operator,
                sortBy: this.sortBy,
                escapeFacetValues: true,
                transformItems: this.transformItems,
            }, {
                $$widgetType: 'ais.refinementList',
            });
            _super.prototype.ngOnInit.call(this);
        };
        NgAisRefinementList.prototype.refine = function (event, item) {
            event.preventDefault();
            event.stopPropagation();
            if (this.state.canRefine) {
                // update UI directly, it will update the checkbox state
                item.isRefined = !item.isRefined;
                // refine through Algolia API
                this.state.refine(item.value);
            }
        };
        return NgAisRefinementList;
    }(TypedBaseWidget));
    NgAisRefinementList.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-refinement-list',
                    template: "\n    <div\n      [class]=\"cx()\"\n      *ngIf=\"!isHidden\"\n    >\n      <div\n        *ngIf=\"searchable\"\n        [class]=\"cx('searchBox')\"\n      >\n        <ais-facets-search\n          [search]=\"state.searchForItems\"\n          [searchPlaceholder]=\"searchPlaceholder\"\n        >\n        </ais-facets-search>\n      </div>\n\n      <ul [class]=\"cx('list')\">\n        <li\n          [class]=\"getItemClass(item)\"\n          *ngFor=\"let item of state.items\"\n          (click)=\"refine($event, item)\"\n        >\n          <label [class]=\"cx('label')\">\n            <input\n              [class]=\"cx('checkbox')\"\n              type=\"checkbox\"\n              value=\"{{item.value}}\"\n              [checked]=\"item.isRefined\"\n            />\n            <span [class]=\"cx('labelText')\">\n              <ais-highlight attribute=\"highlighted\" [hit]=\"item\"></ais-highlight>\n            </span>\n            <span [class]=\"cx('count')\">{{item.count}}</span>\n          </label>\n        </li>\n      </ul>\n\n      <button\n        [class]=\"cx('showMore')\"\n        *ngIf=\"showMore\"\n        (click)=\"state.toggleShowMore()\"\n        [disabled]=\"!state.canToggleShowMore\"\n      >\n        {{state.isShowingMore ? showLessLabel : showMoreLabel}}\n      </button>\n    </div>\n  "
                },] }
    ];
    NgAisRefinementList.ctorParameters = function () { return [
        { type: NgAisIndex, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisIndex; }),] }, { type: core.Optional }] },
        { type: NgAisInstantSearch, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisRefinementList.propDecorators = {
        showMoreLabel: [{ type: core.Input }],
        showLessLabel: [{ type: core.Input }],
        searchable: [{ type: core.Input }],
        searchPlaceholder: [{ type: core.Input }],
        attribute: [{ type: core.Input }],
        operator: [{ type: core.Input }],
        limit: [{ type: core.Input }],
        showMore: [{ type: core.Input }],
        showMoreLimit: [{ type: core.Input }],
        sortBy: [{ type: core.Input }],
        transformItems: [{ type: core.Input }]
    };

    var NgAisFacetsSearch = /** @class */ (function () {
        function NgAisFacetsSearch() {
            this.cx = bem('SearchBox');
            this.searchQuery = '';
        }
        NgAisFacetsSearch.prototype.handleChange = function (value) {
            this.searchQuery = value;
            this.search(value);
        };
        NgAisFacetsSearch.prototype.handleSubmit = function (event) {
            event.preventDefault();
            this.search(this.searchQuery);
        };
        return NgAisFacetsSearch;
    }());
    NgAisFacetsSearch.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-facets-search',
                    template: "\n    <div [class]=\"cx()\">\n      <form\n        [class]=\"cx('form')\"\n        (submit)=\"handleSubmit($event)\"\n        novalidate\n      >\n        <input\n          [class]=\"cx('input')\"\n          autocapitalize=\"off\"\n          autocorrect=\"off\"\n          placeholder=\"{{searchPlaceholder}}\"\n          role=\"textbox\"\n          spellcheck=\"false\"\n          type=\"text\"\n          [value]=\"searchQuery\"\n          (input)=\"handleChange($event.target.value)\"\n        />\n\n        <button\n          [class]=\"cx('submit')\"\n          title=\"Submit the search query.\"\n          type=\"submit\"\n        >\n          <svg\n            [ngClass]=\"cx('submitIcon')\"\n            viewBox=\"0 0 40 40\"\n            width=\"10\"\n            height=\"10\"\n          >\n            <path d=\"M26.804 29.01c-2.832 2.34-6.465 3.746-10.426 3.746C7.333 32.756 0 25.424 0 16.378 0 7.333 7.333 0 16.378 0c9.046 0 16.378 7.333 16.378 16.378 0 3.96-1.406 7.594-3.746 10.426l10.534 10.534c.607.607.61 1.59-.004 2.202-.61.61-1.597.61-2.202.004L26.804 29.01zm-10.426.627c7.323 0 13.26-5.936 13.26-13.26 0-7.32-5.937-13.257-13.26-13.257C9.056 3.12 3.12 9.056 3.12 16.378c0 7.323 5.936 13.26 13.258 13.26z\"></path>\n          </svg>\n        </button>\n\n        <button\n          [class]=\"cx('reset')\"\n          type=\"reset\"\n          title=\"Clear the search query.\"\n          hidden\n        >\n          <svg\n            [ngClass]=\"cx('resetIcon')\"\n            viewBox=\"0 0 20 20\"\n            width=\"10\"\n            height=\"10\"\n          >\n            <path d=\"M8.114 10L.944 2.83 0 1.885 1.886 0l.943.943L10 8.113l7.17-7.17.944-.943L20 1.886l-.943.943-7.17 7.17 7.17 7.17.943.944L18.114 20l-.943-.943-7.17-7.17-7.17 7.17-.944.943L0 18.114l.943-.943L8.113 10z\"></path>\n          </svg>\n        </button>\n      </form>\n    </div>\n  "
                },] }
    ];
    NgAisFacetsSearch.propDecorators = {
        searchPlaceholder: [{ type: core.Input }],
        search: [{ type: core.Input }]
    };

    var NgAisRefinementListModule = /** @class */ (function () {
        function NgAisRefinementListModule() {
        }
        return NgAisRefinementListModule;
    }());
    NgAisRefinementListModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisRefinementList, NgAisFacetsSearch],
                    entryComponents: [NgAisRefinementList],
                    exports: [NgAisRefinementList],
                    imports: [common.CommonModule, NgAisHighlightModule],
                },] }
    ];

    var NgAisSearchBox = /** @class */ (function (_super) {
        __extends(NgAisSearchBox, _super);
        function NgAisSearchBox(parentIndex, instantSearchInstance, injectedDocument) {
            var _this = _super.call(this, 'SearchBox') || this;
            _this.parentIndex = parentIndex;
            _this.instantSearchInstance = instantSearchInstance;
            _this.injectedDocument = injectedDocument;
            _this.placeholder = 'Search';
            _this.submitTitle = 'Submit';
            _this.resetTitle = 'Reset';
            _this.searchAsYouType = true;
            _this.autofocus = false;
            _this.showLoadingIndicator = true;
            // Output events
            // form
            _this.submit = new core.EventEmitter();
            _this.reset = new core.EventEmitter();
            // input
            _this.change = new core.EventEmitter();
            _this.focus = new core.EventEmitter();
            _this.blur = new core.EventEmitter();
            _this.query = '';
            _this.state = {
                query: '',
                refine: noop,
                clear: noop,
                isSearchStalled: false,
            };
            _this.createWidget(connectors.connectSearchBox, {}, {
                $$widgetType: 'ais.searchBox',
            });
            _this.document = injectedDocument;
            return _this;
        }
        NgAisSearchBox.prototype.ngAfterViewInit = function () {
            if (this.autofocus) {
                this.searchBox.nativeElement.focus();
            }
        };
        NgAisSearchBox.prototype.ngDoCheck = function () {
            // We bypass the state update if the input is focused to avoid concurrent
            // updates when typing.
            if (this.query !== this.state.query &&
                this.searchBox &&
                this.searchBox.nativeElement &&
                this.document.activeElement !== this.searchBox.nativeElement) {
                this.query = this.state.query;
            }
        };
        NgAisSearchBox.prototype.handleChange = function (query) {
            this.change.emit(query);
            if (this.searchAsYouType) {
                this.state.refine(query);
            }
        };
        NgAisSearchBox.prototype.handleSubmit = function (event) {
            // send submit event to parent component
            this.submit.emit(event);
            event.preventDefault();
            if (!this.searchAsYouType) {
                this.state.refine(this.searchBox.nativeElement.value);
            }
        };
        NgAisSearchBox.prototype.handleReset = function (event) {
            // send reset event to parent component
            this.reset.emit(event);
            // reset search
            this.state.refine('');
        };
        return NgAisSearchBox;
    }(TypedBaseWidget));
    NgAisSearchBox.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-search-box',
                    template: "\n    <div [class]=\"cx()\">\n      <form\n        [class]=\"cx('form')\"\n        novalidate\n        (submit)=\"handleSubmit($event)\"\n      >\n        <input\n          [class]=\"cx('input')\"\n          autocapitalize=\"off\"\n          autocorrect=\"off\"\n          placeholder=\"{{placeholder}}\"\n          role=\"textbox\"\n          spellcheck=\"false\"\n          type=\"text\"\n          [value]=\"query\"\n          (input)=\"handleChange($event.target.value)\"\n          (focus)=\"focus.emit($event)\"\n          (blur)=\"blur.emit($event)\"\n          #searchBox\n        />\n\n        <button\n          [class]=\"cx('submit')\"\n          type=\"submit\"\n          title=\"{{submitTitle}}\"\n        >\n          <svg\n            [ngClass]=\"cx('submitIcon')\"\n            viewBox=\"0 0 40 40\"\n            width=\"40\"\n            height=\"40\"\n          >\n            <path d=\"M26.804 29.01c-2.832 2.34-6.465 3.746-10.426 3.746C7.333 32.756 0 25.424 0 16.378 0 7.333 7.333 0 16.378 0c9.046 0 16.378 7.333 16.378 16.378 0 3.96-1.406 7.594-3.746 10.426l10.534 10.534c.607.607.61 1.59-.004 2.202-.61.61-1.597.61-2.202.004L26.804 29.01zm-10.426.627c7.323 0 13.26-5.936 13.26-13.26 0-7.32-5.937-13.257-13.26-13.257C9.056 3.12 3.12 9.056 3.12 16.378c0 7.323 5.936 13.26 13.258 13.26z\"></path>\n          </svg>\n        </button>\n\n        <button\n          [class]=\"cx('reset')\"\n          type=\"reset\"\n          title=\"{{resetTitle}}\"\n          (click)=\"handleReset($event)\"\n          [hidden]=\"!state.query || (state.query && !state.query.trim()) || (state.isSearchStalled && showLoadingIndicator)\">\n          <svg\n            [ngClass]=\"cx('resetIcon')\"\n            viewBox=\"0 0 20 20\"\n            width=\"20\"\n            height=\"20\"\n          >\n            <path d=\"M8.114 10L.944 2.83 0 1.885 1.886 0l.943.943L10 8.113l7.17-7.17.944-.943L20 1.886l-.943.943-7.17 7.17 7.17 7.17.943.944L18.114 20l-.943-.943-7.17-7.17-7.17 7.17-.944.943L0 18.114l.943-.943L8.113 10z\"></path>\n          </svg>\n        </button>\n\n        <span\n          [class]=\"cx('loadingIndicator')\"\n          [hidden]=\"!showLoadingIndicator || !state.isSearchStalled\"\n        >\n          <svg\n            width=\"16\"\n            height=\"16\"\n            viewBox=\"0 0 38 38\"\n            stroke=\"#444\"\n            [ngClass]=\"cx('loadingIcon')\"\n          >\n            <g fill=\"none\" fillRule=\"evenodd\">\n              <g transform=\"translate(1 1)\" strokeWidth=\"2\">\n                <circle strokeOpacity=\".5\" cx=\"18\" cy=\"18\" r=\"18\" />\n                <path d=\"M36 18c0-9.94-8.06-18-18-18\">\n                  <animateTransform\n                    attributeName=\"transform\"\n                    type=\"rotate\"\n                    from=\"0 18 18\"\n                    to=\"360 18 18\"\n                    dur=\"1s\"\n                    repeatCount=\"indefinite\"\n                  />\n                </path>\n              </g>\n            </g>\n          </svg>\n        </span>\n      </form>\n    </div>\n  "
                },] }
    ];
    NgAisSearchBox.ctorParameters = function () { return [
        { type: NgAisIndex, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisIndex; }),] }, { type: core.Optional }] },
        { type: NgAisInstantSearch, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] },
        { type: Document, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] }
    ]; };
    NgAisSearchBox.propDecorators = {
        searchBox: [{ type: core.ViewChild, args: ['searchBox', { static: false },] }],
        placeholder: [{ type: core.Input }],
        submitTitle: [{ type: core.Input }],
        resetTitle: [{ type: core.Input }],
        searchAsYouType: [{ type: core.Input }],
        autofocus: [{ type: core.Input }],
        showLoadingIndicator: [{ type: core.Input }],
        submit: [{ type: core.Output }],
        reset: [{ type: core.Output }],
        change: [{ type: core.Output }],
        focus: [{ type: core.Output }],
        blur: [{ type: core.Output }]
    };

    var NgAisSearchBoxModule = /** @class */ (function () {
        function NgAisSearchBoxModule() {
        }
        return NgAisSearchBoxModule;
    }());
    NgAisSearchBoxModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisSearchBox],
                    entryComponents: [NgAisSearchBox],
                    exports: [NgAisSearchBox],
                    imports: [common.CommonModule],
                },] }
    ];

    var NgAisSortBy = /** @class */ (function (_super) {
        __extends(NgAisSortBy, _super);
        function NgAisSortBy(parentIndex, instantSearchInstance) {
            var _this = _super.call(this, 'SortBy') || this;
            _this.parentIndex = parentIndex;
            _this.instantSearchInstance = instantSearchInstance;
            _this.state = {
                currentRefinement: null,
                options: [],
                refine: noop,
                hasNoResults: false,
                canRefine: false,
            };
            return _this;
        }
        NgAisSortBy.prototype.ngOnInit = function () {
            this.createWidget(connectors.connectSortBy, {
                items: this.items,
                transformItems: this.transformItems,
            }, {
                $$widgetType: 'ais.sortBy',
            });
            _super.prototype.ngOnInit.call(this);
        };
        return NgAisSortBy;
    }(TypedBaseWidget));
    NgAisSortBy.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-sort-by',
                    template: "\n    <div [class]=\"cx()\">\n      <select\n        [class]=\"cx('select')\"\n        (change)=\"state.refine($event.target.value)\"\n      >\n        <option\n          [class]=\"cx('option')\"\n          *ngFor=\"let item of state.options\"\n          [value]=\"item.value\"\n          [selected]=\"item.value === state.currentRefinement\"\n        >\n          {{item.label}}\n        </option>\n      </select>\n    </div>\n  "
                },] }
    ];
    NgAisSortBy.ctorParameters = function () { return [
        { type: NgAisIndex, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisIndex; }),] }, { type: core.Optional }] },
        { type: NgAisInstantSearch, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisSortBy.propDecorators = {
        items: [{ type: core.Input }],
        transformItems: [{ type: core.Input }]
    };

    var NgAisSortByModule = /** @class */ (function () {
        function NgAisSortByModule() {
        }
        return NgAisSortByModule;
    }());
    NgAisSortByModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisSortBy],
                    entryComponents: [NgAisSortBy],
                    exports: [NgAisSortBy],
                    imports: [common.CommonModule],
                },] }
    ];

    var NgAisRatingMenu = /** @class */ (function (_super) {
        __extends(NgAisRatingMenu, _super);
        function NgAisRatingMenu(parentIndex, instantSearchInstance) {
            var _this = _super.call(this, 'RatingMenu') || this;
            _this.parentIndex = parentIndex;
            _this.instantSearchInstance = instantSearchInstance;
            // rendering options
            _this.andUpLabel = '& Up';
            _this.state = {
                createURL: function () { return '#'; },
                hasNoResults: false,
                items: [],
                refine: noop,
                canRefine: false,
                sendEvent: noop,
            };
            return _this;
        }
        Object.defineProperty(NgAisRatingMenu.prototype, "isHidden", {
            get: function () {
                return this.state.items.length === 0 && this.autoHideContainer;
            },
            enumerable: false,
            configurable: true
        });
        NgAisRatingMenu.prototype.ngOnInit = function () {
            this.createWidget(connectors.connectRatingMenu, {
                attribute: this.attribute,
                max: parseNumberInput(this.max),
            }, {
                $$widgetType: 'ais.ratingMenu',
            });
            _super.prototype.ngOnInit.call(this);
        };
        NgAisRatingMenu.prototype.handleClick = function (event, value) {
            event.preventDefault();
            event.stopPropagation();
            this.state.refine(value);
        };
        return NgAisRatingMenu;
    }(TypedBaseWidget));
    NgAisRatingMenu.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-rating-menu',
                    template: "\n    <div\n      [ngClass]=\"[\n        cx(),\n        state.items.length === 0 ? cx('', 'noRefinement') : ''\n      ]\"\n      *ngIf=\"!isHidden\"\n    >\n      <svg style=\"display:none;\">\n        <symbol\n          id=\"ais-StarRating-starSymbol\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path d=\"M12 .288l2.833 8.718h9.167l-7.417 5.389 2.833 8.718-7.416-5.388-7.417 5.388 2.833-8.718-7.416-5.389h9.167z\"/>\n        </symbol>\n        <symbol\n          id=\"ais-StarRating-starEmptySymbol\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path d=\"M12 6.76l1.379 4.246h4.465l-3.612 2.625 1.379 4.246-3.611-2.625-3.612 2.625 1.379-4.246-3.612-2.625h4.465l1.38-4.246zm0-6.472l-2.833 8.718h-9.167l7.416 5.389-2.833 8.718 7.417-5.388 7.416 5.388-2.833-8.718 7.417-5.389h-9.167l-2.833-8.718z\"/>\n        </symbol>\n      </svg>\n\n      <ul [class]=\"cx('list')\">\n        <li\n          *ngFor=\"let item of state.items\"\n          [class]=\"getItemClass(item)\"\n          (click)=\"handleClick($event, item.value)\"\n        >\n          <a\n            href=\"{{state.createURL(item.value)}}\"\n            [class]=\"cx('link')\"\n            (click)=\"handleClick($event, item.value)\"\n          >\n            <svg\n              width=\"24\"\n              height=\"24\"\n              *ngFor=\"let star of item.stars\"\n              [ngClass]=\"cx('starIcon') + ' ' + (star ? cx('starIcon', 'full') : cx('starIcon', 'empty'))\"\n              aria-hidden=\"true\"\n            >\n              <use\n                *ngIf=\"star\"\n                xlink:href=\"#ais-StarRating-starSymbol\"\n              >\n              </use>\n\n              <use\n                *ngIf=\"!star\"\n                xlink:href=\"#ais-StarRating-starEmptySymbol\"\n              >\n              </use>\n            </svg>\n\n            <span [class]=\"cx('label')\" aria-hidden=\"true\">{{andUpLabel}}</span>\n            <span [class]=\"cx('count')\">{{item.count}}</span>\n          </a>\n        </li>\n      </ul>\n    </div>\n  "
                },] }
    ];
    NgAisRatingMenu.ctorParameters = function () { return [
        { type: NgAisIndex, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisIndex; }),] }, { type: core.Optional }] },
        { type: NgAisInstantSearch, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisRatingMenu.propDecorators = {
        andUpLabel: [{ type: core.Input }],
        attribute: [{ type: core.Input }],
        max: [{ type: core.Input }]
    };

    var NgAisRatingMenuModule = /** @class */ (function () {
        function NgAisRatingMenuModule() {
        }
        return NgAisRatingMenuModule;
    }());
    NgAisRatingMenuModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisRatingMenu],
                    entryComponents: [NgAisRatingMenu],
                    exports: [NgAisRatingMenu],
                    imports: [common.CommonModule],
                },] }
    ];

    var NgAisStats = /** @class */ (function (_super) {
        __extends(NgAisStats, _super);
        function NgAisStats(parentIndex, instantSearchInstance) {
            var _this = _super.call(this, 'Stats') || this;
            _this.parentIndex = parentIndex;
            _this.instantSearchInstance = instantSearchInstance;
            _this.state = {
                nbHits: 0,
                nbPages: 0,
                page: 0,
                processingTimeMS: 0,
                query: '',
                areHitsSorted: false,
            };
            _this.createWidget(connectors.connectStats, {}, {
                $$widgetType: 'ais.stats',
            });
            return _this;
        }
        Object.defineProperty(NgAisStats.prototype, "templateContext", {
            get: function () {
                return { state: this.state };
            },
            enumerable: false,
            configurable: true
        });
        return NgAisStats;
    }(TypedBaseWidget));
    NgAisStats.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-stats',
                    template: "\n    <div [class]=\"cx()\">\n      <ng-container *ngTemplateOutlet=\"template; context: templateContext\">\n      </ng-container>\n\n      <span *ngIf=\"!template\" [class]=\"cx('text')\">\n        {{state.nbHits}} results found in {{state.processingTimeMS}}ms.\n      </span>\n    </div>\n  "
                },] }
    ];
    NgAisStats.ctorParameters = function () { return [
        { type: NgAisIndex, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisIndex; }),] }, { type: core.Optional }] },
        { type: NgAisInstantSearch, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisStats.propDecorators = {
        template: [{ type: core.ContentChild, args: [core.TemplateRef, { static: false },] }]
    };

    var NgAisStatsModule = /** @class */ (function () {
        function NgAisStatsModule() {
        }
        return NgAisStatsModule;
    }());
    NgAisStatsModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisStats],
                    entryComponents: [NgAisStats],
                    exports: [NgAisStats],
                    imports: [common.CommonModule],
                },] }
    ];

    var NgAisToggle = /** @class */ (function (_super) {
        __extends(NgAisToggle, _super);
        function NgAisToggle(parentIndex, instantSearchInstance) {
            var _this = _super.call(this, 'ToggleRefinement') || this;
            _this.parentIndex = parentIndex;
            _this.instantSearchInstance = instantSearchInstance;
            _this.state = {
                canRefine: false,
                sendEvent: undefined,
                value: {
                    count: undefined,
                    isRefined: false,
                    name: '',
                    offFacetValue: undefined,
                    onFacetValue: undefined,
                },
                createURL: function () { return '#'; },
                refine: noop,
            };
            return _this;
        }
        NgAisToggle.prototype.ngOnInit = function () {
            this.createWidget(connectors.connectToggleRefinement, {
                attribute: this.attribute,
                on: this.on,
                off: this.off,
            }, {
                $$widgetType: 'ais.toggleRefinement',
            });
            _super.prototype.ngOnInit.call(this);
        };
        NgAisToggle.prototype.handleChange = function (event) {
            event.preventDefault();
            event.stopPropagation();
            this.state.refine(this.state.value);
        };
        return NgAisToggle;
    }(TypedBaseWidget));
    NgAisToggle.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-toggle',
                    template: "\n    <div [class]='cx()'>\n      <label [class]=\"cx('label')\">\n        <input\n          [class]=\"cx('checkbox')\"\n          type='checkbox'\n          value='{{state.value.name}}'\n          [checked]='state.value.isRefined'\n          (change)='handleChange($event)'\n        />\n\n        <span [class]=\"cx('labelText')\">\n          {{label || state.value.name}}\n        </span>\n\n        <span [class]=\"cx('count')\">{{state.value.count}}</span>\n      </label>\n    </div>\n  "
                },] }
    ];
    NgAisToggle.ctorParameters = function () { return [
        { type: NgAisIndex, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisIndex; }),] }, { type: core.Optional }] },
        { type: NgAisInstantSearch, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisToggle.propDecorators = {
        label: [{ type: core.Input }],
        attribute: [{ type: core.Input }],
        on: [{ type: core.Input }],
        off: [{ type: core.Input }]
    };

    var NgAisToggleModule = /** @class */ (function () {
        function NgAisToggleModule() {
        }
        return NgAisToggleModule;
    }());
    NgAisToggleModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisToggle],
                    entryComponents: [NgAisToggle],
                    exports: [NgAisToggle],
                    imports: [common.CommonModule],
                },] }
    ];

    var NgAisReverseHighlight = /** @class */ (function () {
        function NgAisReverseHighlight() {
            this.highlightedTagName = 'mark';
        }
        Object.defineProperty(NgAisReverseHighlight.prototype, "content", {
            get: function () {
                return helpers.reverseHighlight({
                    attribute: this.attribute,
                    hit: this.hit,
                    highlightedTagName: this.highlightedTagName,
                });
            },
            enumerable: false,
            configurable: true
        });
        return NgAisReverseHighlight;
    }());
    NgAisReverseHighlight.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-reverse-highlight',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: "<span class=\"ais-ReverseHighlight\" [innerHtml]=\"content\"></span>"
                },] }
    ];
    NgAisReverseHighlight.propDecorators = {
        attribute: [{ type: core.Input }],
        hit: [{ type: core.Input }],
        highlightedTagName: [{ type: core.Input }]
    };

    var NgAisReverseHighlightModule = /** @class */ (function () {
        function NgAisReverseHighlightModule() {
        }
        return NgAisReverseHighlightModule;
    }());
    NgAisReverseHighlightModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisReverseHighlight],
                    exports: [NgAisReverseHighlight],
                },] }
    ];

    var NgAisSnippet = /** @class */ (function () {
        function NgAisSnippet() {
            this.highlightedTagName = 'mark';
        }
        Object.defineProperty(NgAisSnippet.prototype, "content", {
            get: function () {
                return helpers.snippet({
                    attribute: this.attribute,
                    hit: this.hit,
                    highlightedTagName: this.highlightedTagName,
                });
            },
            enumerable: false,
            configurable: true
        });
        return NgAisSnippet;
    }());
    NgAisSnippet.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-snippet',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: "<span class=\"ais-Snippet\" [innerHtml]=\"content\"></span>"
                },] }
    ];
    NgAisSnippet.propDecorators = {
        attribute: [{ type: core.Input }],
        hit: [{ type: core.Input }],
        highlightedTagName: [{ type: core.Input }]
    };

    var NgAisSnippetModule = /** @class */ (function () {
        function NgAisSnippetModule() {
        }
        return NgAisSnippetModule;
    }());
    NgAisSnippetModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisSnippet],
                    exports: [NgAisSnippet],
                },] }
    ];

    var NgAisReverseSnippet = /** @class */ (function () {
        function NgAisReverseSnippet() {
            this.highlightedTagName = 'mark';
        }
        Object.defineProperty(NgAisReverseSnippet.prototype, "content", {
            get: function () {
                return helpers.reverseSnippet({
                    attribute: this.attribute,
                    hit: this.hit,
                    highlightedTagName: this.highlightedTagName,
                });
            },
            enumerable: false,
            configurable: true
        });
        return NgAisReverseSnippet;
    }());
    NgAisReverseSnippet.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-reverse-snippet',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: "<span class=\"ais-ReverseSnippet\" [innerHtml]=\"content\"></span>"
                },] }
    ];
    NgAisReverseSnippet.propDecorators = {
        attribute: [{ type: core.Input }],
        hit: [{ type: core.Input }],
        highlightedTagName: [{ type: core.Input }]
    };

    var NgAisReverseSnippetModule = /** @class */ (function () {
        function NgAisReverseSnippetModule() {
        }
        return NgAisReverseSnippetModule;
    }());
    NgAisReverseSnippetModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisReverseSnippet],
                    exports: [NgAisReverseSnippet],
                },] }
    ];

    var NgAisRangeInput = /** @class */ (function (_super) {
        __extends(NgAisRangeInput, _super);
        function NgAisRangeInput(parentIndex, instantSearchInstance) {
            var _this = _super.call(this, 'RangeInput') || this;
            _this.parentIndex = parentIndex;
            _this.instantSearchInstance = instantSearchInstance;
            // rendering options
            _this.currency = '$';
            _this.separator = 'to';
            _this.submitLabel = 'Go';
            _this.precision = 0;
            _this.state = {
                range: { min: undefined, max: undefined },
                refine: noop,
                start: [0, 0],
                // TODO: use canRefine & format
                canRefine: false,
                format: {
                    from: function () { return ''; },
                    to: function () { return ''; },
                },
                sendEvent: undefined,
            };
            return _this;
        }
        Object.defineProperty(NgAisRangeInput.prototype, "step", {
            get: function () {
                var precision = parseNumberInput(this.precision);
                return 1 / Math.pow(10, precision);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NgAisRangeInput.prototype, "canRefine", {
            get: function () {
                return this.state.range.min !== this.state.range.max;
            },
            enumerable: false,
            configurable: true
        });
        NgAisRangeInput.prototype.ngOnInit = function () {
            this.createWidget(connectors.connectRange, {
                attribute: this.attribute,
                max: parseNumberInput(this.max),
                min: parseNumberInput(this.min),
                precision: parseNumberInput(this.precision),
            }, {
                $$widgetType: 'ais.rangeInput',
            });
            _super.prototype.ngOnInit.call(this);
        };
        NgAisRangeInput.prototype.handleChange = function (event, type) {
            var value = parseNumberInput(event.target.value);
            if (type === 'min') {
                this.minInputValue = value;
            }
            else {
                this.maxInputValue = value;
            }
        };
        NgAisRangeInput.prototype.handleSubmit = function (event) {
            event.preventDefault();
            this.state.refine([this.minInputValue, this.maxInputValue]);
        };
        return NgAisRangeInput;
    }(TypedBaseWidget));
    NgAisRangeInput.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-range-input',
                    template: "\n    <div [ngClass]=\"[\n        cx(),\n        !canRefine ? cx('', 'noRefinement') : ''\n      ]\">\n      <form\n        [class]=\"cx('form')\"\n        (submit)=\"handleSubmit($event)\"\n        novalidate\n      >\n        <label [class]=\"cx('label')\">\n          <span [class]=\"cx('currency')\">{{currency}}</span>\n          <input\n            [ngClass]=\"[\n              cx('input'),\n              cx('input', 'min')\n            ]\"\n            type=\"number\"\n            [min]=\"state.range.min\"\n            [max]=\"state.range.max\"\n            [placeholder]=\"state.range.min\"\n            [value]=\"minInputValue\"\n            [step]=\"step\"\n            (change)=\"handleChange($event, 'min')\"\n          />\n        </label>\n\n        <span [class]=\"cx('separator')\">{{separator}}</span>\n\n        <label [class]=\"cx('label')\">\n          <span [class]=\"cx('currency')\">{{currency}}</span>\n          <input\n            [ngClass]=\"[\n              cx('input'),\n              cx('input', 'max')\n            ]\"\n            type=\"number\"\n            [min]=\"state.range.min\"\n            [max]=\"state.range.max\"\n            [placeholder]=\"state.range.max\"\n            [value]=\"maxInputValue\"\n            [step]=\"step\"\n            (change)=\"handleChange($event, 'max')\"\n          />\n        </label>\n\n        <button\n          [class]=\"cx('submit')\"\n          (click)=\"handleSubmit($event)\"\n        >\n          {{submitLabel}}\n        </button>\n      </form>\n    </div>\n  "
                },] }
    ];
    NgAisRangeInput.ctorParameters = function () { return [
        { type: NgAisIndex, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisIndex; }),] }, { type: core.Optional }] },
        { type: NgAisInstantSearch, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisRangeInput.propDecorators = {
        currency: [{ type: core.Input }],
        separator: [{ type: core.Input }],
        submitLabel: [{ type: core.Input }],
        attribute: [{ type: core.Input }],
        min: [{ type: core.Input }],
        max: [{ type: core.Input }],
        precision: [{ type: core.Input }]
    };

    var NgAisRangeInputModule = /** @class */ (function () {
        function NgAisRangeInputModule() {
        }
        return NgAisRangeInputModule;
    }());
    NgAisRangeInputModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisRangeInput],
                    entryComponents: [NgAisRangeInput],
                    exports: [NgAisRangeInput],
                    imports: [common.CommonModule],
                },] }
    ];

    var NgAisPanel = /** @class */ (function () {
        function NgAisPanel() {
        }
        return NgAisPanel;
    }());
    NgAisPanel.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-panel',
                    template: "\n    <div class=\"ais-Panel\">\n      <div *ngIf=\"header\" class=\"ais-Panel-header\">\n        {{header}}\n      </div>\n\n      <div class=\"ais-Panel-body\">\n        <ng-content></ng-content>\n      </div>\n\n      <div *ngIf=\"footer\" class=\"ais-Panel-footer\">\n        {{footer}}\n      </div>\n    </div>\n  "
                },] }
    ];
    NgAisPanel.propDecorators = {
        header: [{ type: core.Input }],
        footer: [{ type: core.Input }]
    };

    var NgAisPanelModule = /** @class */ (function () {
        function NgAisPanelModule() {
        }
        return NgAisPanelModule;
    }());
    NgAisPanelModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisPanel],
                    entryComponents: [NgAisPanel],
                    exports: [NgAisPanel],
                    imports: [common.CommonModule],
                },] }
    ];

    var NgAisConfigure = /** @class */ (function (_super) {
        __extends(NgAisConfigure, _super);
        function NgAisConfigure(differs, parentIndex, instantSearchInstance) {
            var _this = _super.call(this, 'Configure') || this;
            _this.differs = differs;
            _this.parentIndex = parentIndex;
            _this.instantSearchInstance = instantSearchInstance;
            _this.state = {
                refine: noop,
            };
            return _this;
        }
        Object.defineProperty(NgAisConfigure.prototype, "searchParameters", {
            set: function (values) {
                this.internalSearchParameters = values;
                if (!this.differ && values) {
                    this.differ = this.differs.find(values).create();
                }
            },
            enumerable: false,
            configurable: true
        });
        NgAisConfigure.prototype.ngOnInit = function () {
            this.createWidget(connectors.connectConfigure, {
                searchParameters: this.internalSearchParameters,
            }, {
                $$widgetType: 'ais.configure',
            });
            _super.prototype.ngOnInit.call(this);
        };
        NgAisConfigure.prototype.ngDoCheck = function () {
            if (this.differ) {
                var changes = this.differ.diff(this.internalSearchParameters);
                if (changes) {
                    this.state.refine(this.internalSearchParameters);
                }
            }
        };
        return NgAisConfigure;
    }(TypedBaseWidget));
    NgAisConfigure.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-configure',
                    template: ''
                },] }
    ];
    NgAisConfigure.ctorParameters = function () { return [
        { type: core.KeyValueDiffers },
        { type: NgAisIndex, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisIndex; }),] }, { type: core.Optional }] },
        { type: NgAisInstantSearch, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisConfigure.propDecorators = {
        searchParameters: [{ type: core.Input }]
    };

    var NgAisConfigureModule = /** @class */ (function () {
        function NgAisConfigureModule() {
        }
        return NgAisConfigureModule;
    }());
    NgAisConfigureModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisConfigure],
                    entryComponents: [NgAisConfigure],
                    exports: [NgAisConfigure],
                    imports: [common.CommonModule],
                },] }
    ];

    var NgAisConfigureRelatedItems = /** @class */ (function (_super) {
        __extends(NgAisConfigureRelatedItems, _super);
        function NgAisConfigureRelatedItems(parentIndex, instantSearchInstance) {
            var _this = _super.call(this, 'ExperimentalConfigureRelatedItems') || this;
            _this.parentIndex = parentIndex;
            _this.instantSearchInstance = instantSearchInstance;
            return _this;
        }
        NgAisConfigureRelatedItems.prototype.ngOnInit = function () {
            this.createWidget(connectors.EXPERIMENTAL_connectConfigureRelatedItems, {
                hit: this.hit,
                matchingPatterns: this.matchingPatterns,
                transformSearchParameters: this.transformSearchParameters,
            }, {
                $$widgetType: 'ais.configureRelatedItems',
            });
            _super.prototype.ngOnInit.call(this);
        };
        return NgAisConfigureRelatedItems;
    }(TypedBaseWidget));
    NgAisConfigureRelatedItems.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-experimental-configure-related-items',
                    template: ''
                },] }
    ];
    NgAisConfigureRelatedItems.ctorParameters = function () { return [
        { type: NgAisIndex, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisIndex; }),] }, { type: core.Optional }] },
        { type: NgAisInstantSearch, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisConfigureRelatedItems.propDecorators = {
        hit: [{ type: core.Input }],
        matchingPatterns: [{ type: core.Input }],
        transformSearchParameters: [{ type: core.Input }]
    };

    var NgAisConfigureRelatedItemsModule = /** @class */ (function () {
        function NgAisConfigureRelatedItemsModule() {
        }
        return NgAisConfigureRelatedItemsModule;
    }());
    NgAisConfigureRelatedItemsModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisConfigureRelatedItems],
                    entryComponents: [NgAisConfigureRelatedItems],
                    exports: [NgAisConfigureRelatedItems],
                    imports: [common.CommonModule],
                },] }
    ];

    var NgAisQueryRuleCustomData = /** @class */ (function (_super) {
        __extends(NgAisQueryRuleCustomData, _super);
        function NgAisQueryRuleCustomData(parentIndex, instantSearchInstance) {
            var _this = _super.call(this, 'QueryRuleCustomData') || this;
            _this.parentIndex = parentIndex;
            _this.instantSearchInstance = instantSearchInstance;
            _this.state = {
                items: [],
            };
            return _this;
        }
        Object.defineProperty(NgAisQueryRuleCustomData.prototype, "templateContext", {
            get: function () {
                return {
                    items: this.state.items,
                };
            },
            enumerable: false,
            configurable: true
        });
        NgAisQueryRuleCustomData.prototype.ngOnInit = function () {
            this.createWidget(connectors.connectQueryRules, {
                transformItems: this.transformItems,
            }, {
                $$widgetType: 'ais.queryRuleCustomData',
            });
            _super.prototype.ngOnInit.call(this);
        };
        return NgAisQueryRuleCustomData;
    }(TypedBaseWidget));
    NgAisQueryRuleCustomData.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-query-rule-custom-data',
                    template: "\n    <div [class]='cx()'>\n      <ng-container *ngTemplateOutlet='template; context: templateContext'>\n      </ng-container>\n\n      <div *ngIf='!template'>\n        <div *ngFor='let item of state.items'>\n          <pre>{{ item | json }}</pre>\n        </div>\n      </div>\n    </div>\n  "
                },] }
    ];
    NgAisQueryRuleCustomData.ctorParameters = function () { return [
        { type: NgAisIndex, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisIndex; }),] }, { type: core.Optional }] },
        { type: NgAisInstantSearch, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisQueryRuleCustomData.propDecorators = {
        template: [{ type: core.ContentChild, args: [core.TemplateRef, { static: false },] }],
        transformItems: [{ type: core.Input }]
    };

    var NgAisQueryRuleCustomDataModule = /** @class */ (function () {
        function NgAisQueryRuleCustomDataModule() {
        }
        return NgAisQueryRuleCustomDataModule;
    }());
    NgAisQueryRuleCustomDataModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisQueryRuleCustomData],
                    entryComponents: [NgAisQueryRuleCustomData],
                    exports: [NgAisQueryRuleCustomData],
                    imports: [common.CommonModule],
                },] }
    ];

    var NgAisQueryRuleContext = /** @class */ (function (_super) {
        __extends(NgAisQueryRuleContext, _super);
        function NgAisQueryRuleContext(parentIndex, instantSearchInstance) {
            var _this = _super.call(this, 'QueryRuleContext') || this;
            _this.parentIndex = parentIndex;
            _this.instantSearchInstance = instantSearchInstance;
            return _this;
        }
        NgAisQueryRuleContext.prototype.ngOnInit = function () {
            this.createWidget(connectors.connectQueryRules, {
                trackedFilters: this.trackedFilters,
                transformRuleContexts: this.transformRuleContexts,
            }, {
                $$widgetType: 'ais.queryRuleContext',
            });
            _super.prototype.ngOnInit.call(this);
        };
        return NgAisQueryRuleContext;
    }(TypedBaseWidget));
    NgAisQueryRuleContext.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-query-rule-context',
                    template: ''
                },] }
    ];
    NgAisQueryRuleContext.ctorParameters = function () { return [
        { type: NgAisIndex, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisIndex; }),] }, { type: core.Optional }] },
        { type: NgAisInstantSearch, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] }
    ]; };
    NgAisQueryRuleContext.propDecorators = {
        trackedFilters: [{ type: core.Input }],
        transformRuleContexts: [{ type: core.Input }]
    };

    var NgAisQueryRuleContextModule = /** @class */ (function () {
        function NgAisQueryRuleContextModule() {
        }
        return NgAisQueryRuleContextModule;
    }());
    NgAisQueryRuleContextModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisQueryRuleContext],
                    entryComponents: [NgAisQueryRuleContext],
                    exports: [NgAisQueryRuleContext],
                    imports: [common.CommonModule],
                },] }
    ];

    var NgAisVoiceSearch = /** @class */ (function (_super) {
        __extends(NgAisVoiceSearch, _super);
        function NgAisVoiceSearch(parentIndex, instantSearchInstance, zone) {
            var _this = _super.call(this, 'VoiceSearch') || this;
            _this.parentIndex = parentIndex;
            _this.instantSearchInstance = instantSearchInstance;
            _this.zone = zone;
            // rendering options
            _this.buttonTitle = 'Search by voice';
            _this.disabledButtonTitle = 'Search by voice (not supported on this browser)';
            _this.state = {
                isBrowserSupported: undefined,
                isListening: undefined,
                toggleListening: noop,
                voiceListeningState: {
                    status: 'initial',
                    transcript: '',
                    isSpeechFinal: false,
                    errorCode: undefined,
                },
            };
            _this.templateContext = {
                status: 'initial',
                errorCode: undefined,
                transcript: '',
                isSpeechFinal: false,
                isListening: false,
                isBrowserSupported: false,
            };
            _this.handleClick = function (event) {
                event.currentTarget.blur();
                _this.state.toggleListening();
            };
            _this.isNotAllowedError = function () { return _this.state.voiceListeningState.status === 'error' &&
                _this.state.voiceListeningState.errorCode === 'not-allowed'; };
            _this.updateState = function (state) {
                _this.zone.run(function () {
                    _this.templateContext = {
                        status: state.voiceListeningState.status,
                        errorCode: state.voiceListeningState.errorCode,
                        transcript: state.voiceListeningState.transcript,
                        isSpeechFinal: state.voiceListeningState.isSpeechFinal,
                        isListening: state.isListening,
                        isBrowserSupported: state.isBrowserSupported,
                    };
                    _this.state = state;
                });
            };
            return _this;
        }
        NgAisVoiceSearch.prototype.ngOnInit = function () {
            this.createWidget(connectors.connectVoiceSearch, {
                searchAsYouSpeak: this.searchAsYouSpeak,
            }, {
                $$widgetType: 'ais.voiceSearch',
            });
            _super.prototype.ngOnInit.call(this);
        };
        return NgAisVoiceSearch;
    }(TypedBaseWidget));
    NgAisVoiceSearch.decorators = [
        { type: core.Component, args: [{
                    selector: 'ais-voice-search',
                    template: "\n    <div [class]=\"cx()\">\n      <button\n        type=\"button\"\n        [class]=\"cx('button')\"\n        [title]=\"state.isBrowserSupported ? buttonTitle : disabledButtonTitle\"\n        [disabled]=\"!state.isBrowserSupported\"\n        (click)=\"handleClick($event)\"\n      >\n        <ng-container *ngTemplateOutlet=\"button ? button : defaultButton; context: templateContext\"></ng-container>\n      </button>\n      <div [class]=\"cx('status')\">\n        <ng-container *ngTemplateOutlet=\"status ? status : defaultStatus; context: templateContext\"></ng-container>\n      </div>\n    </div>\n\n    <ng-template #defaultButton let-status=\"status\" let-errorCode=\"errorCode\" let-isListening=\"isListening\">\n      <svg\n        xmlns='http://www.w3.org/2000/svg'\n        width='16'\n        height='16'\n        viewBox='0 0 24 24'\n        fill='none'\n        stroke='currentColor'\n        strokeWidth='2'\n        strokeLinecap='round'\n        strokeLinejoin='round'\n      >\n        <ng-container *ngIf=\"isNotAllowedError(); then errorSvgContent else normalSvgContent\">\n        </ng-container>\n        <ng-template #errorSvgContent>\n          <line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\"></line>\n          <path d=\"M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6\"></path>\n          <path d=\"M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23\"></path>\n          <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"23\"></line>\n          <line x1=\"8\" y1=\"23\" x2=\"16\" y2=\"23\"></line>\n        </ng-template>\n        <ng-template #normalSvgContent>\n          <path\n            d=\"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z\"\n            [attr.fill]=\"isListening ? 'currentColor' : 'none'\"\n          ></path>\n          <path d=\"M19 10v2a7 7 0 0 1-14 0v-2\"></path>\n          <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"23\"></line>\n          <line x1=\"8\" y1=\"23\" x2=\"16\" y2=\"23\"></line>\n        </ng-template>\n      </svg>\n    </ng-template>\n    <ng-template #defaultStatus let-transcript=\"transcript\">\n      <p>{{transcript}}</p>\n    </ng-template>\n  "
                },] }
    ];
    NgAisVoiceSearch.ctorParameters = function () { return [
        { type: NgAisIndex, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisIndex; }),] }, { type: core.Optional }] },
        { type: NgAisInstantSearch, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgAisInstantSearch; }),] }] },
        { type: core.NgZone }
    ]; };
    NgAisVoiceSearch.propDecorators = {
        button: [{ type: core.ContentChild, args: ['button', { static: false },] }],
        status: [{ type: core.ContentChild, args: ['status', { static: false },] }],
        buttonTitle: [{ type: core.Input }],
        disabledButtonTitle: [{ type: core.Input }],
        searchAsYouSpeak: [{ type: core.Input }]
    };

    var NgAisVoiceSearchModule = /** @class */ (function () {
        function NgAisVoiceSearchModule() {
        }
        return NgAisVoiceSearchModule;
    }());
    NgAisVoiceSearchModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgAisVoiceSearch],
                    entryComponents: [NgAisVoiceSearch],
                    exports: [NgAisVoiceSearch],
                    imports: [common.CommonModule],
                },] }
    ];

    // compatibility with different typescript settings:
    // - esModuleInterop
    // - allowSyntheticDefaultImports
    var algoliasearch = (typeof algoliasearchProxy__namespace.default === 'function'
        ? algoliasearchProxy__namespace.default
        : algoliasearchProxy__namespace);
    var encode = encodeProxy__namespace.default || encodeProxy__namespace;
    function createSSRSearchClient(_a) {
        var appId = _a.appId, apiKey = _a.apiKey, httpClient = _a.httpClient, HttpHeaders = _a.HttpHeaders, transferState = _a.transferState, makeStateKey = _a.makeStateKey, _b = _a.options, options = _b === void 0 ? {} : _b;
        // A custom network request needs to be done, using TransferState of Angular.
        // This is done to make sure the request done backend for SSR doesn't get
        // made again frontend during hydration.
        // For compatibility with both v3 and v4 of algoliasearch, we are overriding the
        // network request function in two places:
        // v4: custom "requester"
        // v3: override "_request" on the prototype
        // since neither v3 uses the requester argument, and v4 use the _request, we
        // can safely do this without checking the version
        var searchClient = algoliasearch(appId, apiKey, Object.assign(Object.assign({}, options), { requester: {
                send: function (_a) {
                    var headers = _a.headers, method = _a.method, url = _a.url, data = _a.data;
                    var transferStateKey = makeStateKey("ngais(" + data + ")");
                    if (transferState.hasKey(transferStateKey)) {
                        var response = JSON.parse(transferState.get(transferStateKey, JSON.stringify({})));
                        return Promise.resolve({
                            status: response.status,
                            content: JSON.stringify(response.body),
                            isTimedOut: false,
                        });
                    }
                    return new Promise(function (resolve, reject) {
                        httpClient
                            .request(method, url, {
                            headers: headers,
                            body: data,
                            observe: 'response',
                        })
                            .subscribe(function (response) {
                            transferState.set(transferStateKey, JSON.stringify(response));
                            resolve({
                                status: response.status,
                                content: JSON.stringify(response.body),
                                isTimedOut: false,
                            });
                        }, function (response) { return reject({
                            status: response.status,
                            body: response.body,
                        }); });
                    });
                },
            } }));
        searchClient.addAlgoliaAgent("angular (" + core.VERSION.full + ")");
        searchClient.addAlgoliaAgent("angular-instantsearch (" + VERSION + ")");
        searchClient.addAlgoliaAgent("angular-instantsearch-server (" + VERSION + ")");
        searchClient._request = function (rawUrl, options) {
            var headers = new HttpHeaders();
            headers = headers.set('content-type', options.method === 'POST'
                ? 'application/x-www-form-urlencoded'
                : 'application/json');
            headers = headers.set('accept', 'application/json');
            var url = rawUrl + (rawUrl.includes('?') ? '&' : '?') + encode(options.headers);
            var transferStateKey = makeStateKey("ngais(" + options.body + ")");
            if (transferState.hasKey(transferStateKey)) {
                var response = JSON.parse(transferState.get(transferStateKey, JSON.stringify({})));
                return Promise.resolve({
                    statusCode: response.status,
                    body: response.body,
                    headers: response.headers,
                });
            }
            return new Promise(function (resolve, reject) {
                httpClient
                    .request(options.method, url, {
                    headers: headers,
                    body: options.body,
                    observe: 'response',
                })
                    .subscribe(function (response) {
                    transferState.set(transferStateKey, JSON.stringify(response));
                    resolve({
                        statusCode: response.status,
                        body: response.body,
                        headers: response.headers,
                    });
                }, function (response) { return reject({
                    statusCode: response.status,
                    body: response.body,
                    headers: response.headers,
                }); });
            });
        };
        return searchClient;
    }

    var BaseWidget = /** @class */ (function () {
        function BaseWidget(widgetName) {
            var _this = this;
            this.state = {};
            this.updateState = function (state, isFirstRendering) {
                if (isFirstRendering) {
                    return Promise.resolve().then(function () {
                        _this.state = state;
                    });
                }
                _this.state = state;
            };
            this.cx = bem(widgetName);
        }
        Object.defineProperty(BaseWidget.prototype, "parent", {
            get: function () {
                if (this.parentIndex) {
                    return this.parentIndex;
                }
                return this.instantSearchInstance;
            },
            enumerable: false,
            configurable: true
        });
        BaseWidget.prototype.createWidget = function (connector, options, additionalWidgetProperties) {
            if (options === void 0) { options = {}; }
            if (additionalWidgetProperties === void 0) { additionalWidgetProperties = {}; }
            this.widget = Object.assign(Object.assign({}, connector(this.updateState, noop)(options)), additionalWidgetProperties);
        };
        BaseWidget.prototype.ngOnInit = function () {
            this.parent.addWidgets([this.widget]);
        };
        BaseWidget.prototype.ngOnDestroy = function () {
            if (common.isPlatformBrowser(this.instantSearchInstance.platformId)) {
                this.parent.removeWidgets([this.widget]);
            }
        };
        /**
         * Helper to generate class names for an item
         * @param item element to generate a class name for
         */
        BaseWidget.prototype.getItemClass = function (item) {
            var className = this.cx('item');
            if (item.isRefined) {
                return className + " " + this.cx('item', 'selected');
            }
            return className;
        };
        return BaseWidget;
    }());
    BaseWidget.propDecorators = {
        autoHideContainer: [{ type: core.Input }]
    };

    var NGIS_MODULES = [
        NgAisInstantSearchModule,
        NgAisIndexModule,
        NgAisHitsModule,
        NgAisSearchBoxModule,
        NgAisClearRefinementsModule,
        NgAisMenuModule,
        NgAisPaginationModule,
        NgAisRefinementListModule,
        NgAisHitsPerPageModule,
        NgAisSortByModule,
        NgAisNumericMenuModule,
        NgAisStatsModule,
        NgAisToggleModule,
        NgAisInfiniteHitsModule,
        NgAisCurrentRefinementsModule,
        NgAisHierarchicalMenuModule,
        NgAisRatingMenuModule,
        NgAisRangeSliderModule,
        NgAisBreadcrumbModule,
        NgAisHighlightModule,
        NgAisReverseHighlightModule,
        NgAisSnippetModule,
        NgAisReverseSnippetModule,
        NgAisRangeInputModule,
        NgAisPanelModule,
        NgAisConfigureModule,
        NgAisConfigureRelatedItemsModule,
        NgAisQueryRuleCustomDataModule,
        NgAisQueryRuleContextModule,
        NgAisVoiceSearchModule,
    ];
    var NgAisRootModule = /** @class */ (function () {
        function NgAisRootModule() {
        }
        return NgAisRootModule;
    }());
    NgAisRootModule.decorators = [
        { type: core.NgModule, args: [{
                    exports: NGIS_MODULES,
                    imports: [NgAisInstantSearchModule.forRoot()],
                },] }
    ];
    var NgAisModule = /** @class */ (function () {
        function NgAisModule() {
        }
        NgAisModule.forRoot = function () {
            return { ngModule: NgAisRootModule };
        };
        return NgAisModule;
    }());
    NgAisModule.decorators = [
        { type: core.NgModule, args: [{ imports: NGIS_MODULES, exports: NGIS_MODULES },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.BaseWidget = BaseWidget;
    exports.NgAisBreadcrumbModule = NgAisBreadcrumbModule;
    exports.NgAisClearRefinementsModule = NgAisClearRefinementsModule;
    exports.NgAisConfigureModule = NgAisConfigureModule;
    exports.NgAisConfigureRelatedItemsModule = NgAisConfigureRelatedItemsModule;
    exports.NgAisCurrentRefinementsModule = NgAisCurrentRefinementsModule;
    exports.NgAisHierarchicalMenuModule = NgAisHierarchicalMenuModule;
    exports.NgAisHighlightModule = NgAisHighlightModule;
    exports.NgAisHitsModule = NgAisHitsModule;
    exports.NgAisHitsPerPageModule = NgAisHitsPerPageModule;
    exports.NgAisIndex = NgAisIndex;
    exports.NgAisIndexModule = NgAisIndexModule;
    exports.NgAisInfiniteHitsModule = NgAisInfiniteHitsModule;
    exports.NgAisInstantSearch = NgAisInstantSearch;
    exports.NgAisInstantSearchModule = NgAisInstantSearchModule;
    exports.NgAisMenuModule = NgAisMenuModule;
    exports.NgAisModule = NgAisModule;
    exports.NgAisNumericMenuModule = NgAisNumericMenuModule;
    exports.NgAisPaginationModule = NgAisPaginationModule;
    exports.NgAisPanelModule = NgAisPanelModule;
    exports.NgAisQueryRuleContextModule = NgAisQueryRuleContextModule;
    exports.NgAisQueryRuleCustomDataModule = NgAisQueryRuleCustomDataModule;
    exports.NgAisRangeInputModule = NgAisRangeInputModule;
    exports.NgAisRangeSliderModule = NgAisRangeSliderModule;
    exports.NgAisRatingMenuModule = NgAisRatingMenuModule;
    exports.NgAisRefinementListModule = NgAisRefinementListModule;
    exports.NgAisReverseHighlightModule = NgAisReverseHighlightModule;
    exports.NgAisReverseSnippetModule = NgAisReverseSnippetModule;
    exports.NgAisRootModule = NgAisRootModule;
    exports.NgAisSearchBoxModule = NgAisSearchBoxModule;
    exports.NgAisSnippetModule = NgAisSnippetModule;
    exports.NgAisSortByModule = NgAisSortByModule;
    exports.NgAisStatsModule = NgAisStatsModule;
    exports.NgAisToggleModule = NgAisToggleModule;
    exports.NgAisVoiceSearchModule = NgAisVoiceSearchModule;
    exports.TypedBaseWidget = TypedBaseWidget;
    exports.createSSRSearchClient = createSSRSearchClient;
    exports.ɵa = NgAisPanel;
    exports.ɵb = NgAisBreadcrumb;
    exports.ɵba = NgAisConfigureRelatedItems;
    exports.ɵbb = NgAisQueryRuleCustomData;
    exports.ɵbc = NgAisQueryRuleContext;
    exports.ɵbd = NgAisVoiceSearch;
    exports.ɵc = NgAisClearRefinements;
    exports.ɵd = NgAisCurrentRefinements;
    exports.ɵe = NgAisHierarchicalMenu;
    exports.ɵf = NgAisHierarchicalMenuItem;
    exports.ɵg = NgAisHitsPerPage;
    exports.ɵh = NgAisHits;
    exports.ɵi = NgAisHighlight;
    exports.ɵj = NgAisInfiniteHits;
    exports.ɵk = NgAisMenu;
    exports.ɵl = NgAisNumericMenu;
    exports.ɵm = NgAisPagination;
    exports.ɵn = NgAisRangeSlider;
    exports.ɵo = NgAisRefinementList;
    exports.ɵp = NgAisFacetsSearch;
    exports.ɵq = NgAisSearchBox;
    exports.ɵr = NgAisSortBy;
    exports.ɵs = NgAisRatingMenu;
    exports.ɵt = NgAisStats;
    exports.ɵu = NgAisToggle;
    exports.ɵv = NgAisReverseHighlight;
    exports.ɵw = NgAisSnippet;
    exports.ɵx = NgAisReverseSnippet;
    exports.ɵy = NgAisRangeInput;
    exports.ɵz = NgAisConfigure;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-instantsearch.umd.js.map
