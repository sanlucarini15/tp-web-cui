import { Component, forwardRef, Inject, Input, Optional } from '@angular/core';
import { EXPERIMENTAL_connectConfigureRelatedItems } from 'instantsearch.js/es/connectors';
import { TypedBaseWidget } from '../typed-base-widget';
import { NgAisInstantSearch } from '../instantsearch/instantsearch';
import { NgAisIndex } from '../index-widget/index-widget';
export class NgAisConfigureRelatedItems extends TypedBaseWidget {
    constructor(parentIndex, instantSearchInstance) {
        super('ExperimentalConfigureRelatedItems');
        this.parentIndex = parentIndex;
        this.instantSearchInstance = instantSearchInstance;
    }
    ngOnInit() {
        this.createWidget(EXPERIMENTAL_connectConfigureRelatedItems, {
            hit: this.hit,
            matchingPatterns: this.matchingPatterns,
            transformSearchParameters: this.transformSearchParameters,
        }, {
            $$widgetType: 'ais.configureRelatedItems',
        });
        super.ngOnInit();
    }
}
NgAisConfigureRelatedItems.decorators = [
    { type: Component, args: [{
                selector: 'ais-experimental-configure-related-items',
                template: ''
            },] }
];
NgAisConfigureRelatedItems.ctorParameters = () => [
    { type: NgAisIndex, decorators: [{ type: Inject, args: [forwardRef(() => NgAisIndex),] }, { type: Optional }] },
    { type: NgAisInstantSearch, decorators: [{ type: Inject, args: [forwardRef(() => NgAisInstantSearch),] }] }
];
NgAisConfigureRelatedItems.propDecorators = {
    hit: [{ type: Input }],
    matchingPatterns: [{ type: Input }],
    transformSearchParameters: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJlLXJlbGF0ZWQtaXRlbXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29uZmlndXJlLXJlbGF0ZWQtaXRlbXMvY29uZmlndXJlLXJlbGF0ZWQtaXRlbXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFL0UsT0FBTyxFQUFFLHlDQUF5QyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDM0YsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQVUxRCxNQUFNLE9BQU8sMEJBQTJCLFNBQVEsZUFHL0M7SUFPQyxZQUdTLFdBQXVCLEVBRXZCLHFCQUF5QztRQUVoRCxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQztRQUpwQyxnQkFBVyxHQUFYLFdBQVcsQ0FBWTtRQUV2QiwwQkFBcUIsR0FBckIscUJBQXFCLENBQW9CO0lBR2xELENBQUM7SUFFTSxRQUFRO1FBQ2IsSUFBSSxDQUFDLFlBQVksQ0FDZix5Q0FBeUMsRUFDekM7WUFDRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7WUFDYixnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCO1lBQ3ZDLHlCQUF5QixFQUFFLElBQUksQ0FBQyx5QkFBeUI7U0FDMUQsRUFDRDtZQUNFLFlBQVksRUFBRSwyQkFBMkI7U0FDMUMsQ0FDRixDQUFDO1FBRUYsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ25CLENBQUM7OztZQXRDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDBDQUEwQztnQkFDcEQsUUFBUSxFQUFFLEVBQUU7YUFDYjs7O1lBVFEsVUFBVSx1QkFxQmQsTUFBTSxTQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FDbkMsUUFBUTtZQXZCSixrQkFBa0IsdUJBeUJ0QixNQUFNLFNBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixDQUFDOzs7a0JBVjdDLEtBQUs7K0JBQ0wsS0FBSzt3Q0FFTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBmb3J3YXJkUmVmLCBJbmplY3QsIElucHV0LCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBFWFBFUklNRU5UQUxfY29ubmVjdENvbmZpZ3VyZVJlbGF0ZWRJdGVtcyB9IGZyb20gJ2luc3RhbnRzZWFyY2guanMvZXMvY29ubmVjdG9ycyc7XG5pbXBvcnQgeyBUeXBlZEJhc2VXaWRnZXQgfSBmcm9tICcuLi90eXBlZC1iYXNlLXdpZGdldCc7XG5pbXBvcnQgeyBOZ0Fpc0luc3RhbnRTZWFyY2ggfSBmcm9tICcuLi9pbnN0YW50c2VhcmNoL2luc3RhbnRzZWFyY2gnO1xuaW1wb3J0IHsgTmdBaXNJbmRleCB9IGZyb20gJy4uL2luZGV4LXdpZGdldC9pbmRleC13aWRnZXQnO1xuaW1wb3J0IHtcbiAgQ29uZmlndXJlUmVsYXRlZEl0ZW1zQ29ubmVjdG9yUGFyYW1zLFxuICBDb25maWd1cmVSZWxhdGVkSXRlbXNXaWRnZXREZXNjcmlwdGlvbixcbn0gZnJvbSAnaW5zdGFudHNlYXJjaC5qcy9lcy9jb25uZWN0b3JzL2NvbmZpZ3VyZS1yZWxhdGVkLWl0ZW1zL2Nvbm5lY3RDb25maWd1cmVSZWxhdGVkSXRlbXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhaXMtZXhwZXJpbWVudGFsLWNvbmZpZ3VyZS1yZWxhdGVkLWl0ZW1zJyxcbiAgdGVtcGxhdGU6ICcnLFxufSlcbmV4cG9ydCBjbGFzcyBOZ0Fpc0NvbmZpZ3VyZVJlbGF0ZWRJdGVtcyBleHRlbmRzIFR5cGVkQmFzZVdpZGdldDxcbiAgQ29uZmlndXJlUmVsYXRlZEl0ZW1zV2lkZ2V0RGVzY3JpcHRpb24sXG4gIENvbmZpZ3VyZVJlbGF0ZWRJdGVtc0Nvbm5lY3RvclBhcmFtc1xuPiB7XG4gIEBJbnB1dCgpIGhpdDogQ29uZmlndXJlUmVsYXRlZEl0ZW1zQ29ubmVjdG9yUGFyYW1zWydoaXQnXTtcbiAgQElucHV0KClcbiAgcHVibGljIG1hdGNoaW5nUGF0dGVybnM6IENvbmZpZ3VyZVJlbGF0ZWRJdGVtc0Nvbm5lY3RvclBhcmFtc1snbWF0Y2hpbmdQYXR0ZXJucyddO1xuICBASW5wdXQoKVxuICBwdWJsaWMgdHJhbnNmb3JtU2VhcmNoUGFyYW1ldGVyczogQ29uZmlndXJlUmVsYXRlZEl0ZW1zQ29ubmVjdG9yUGFyYW1zWyd0cmFuc2Zvcm1TZWFyY2hQYXJhbWV0ZXJzJ107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE5nQWlzSW5kZXgpKVxuICAgIEBPcHRpb25hbCgpXG4gICAgcHVibGljIHBhcmVudEluZGV4OiBOZ0Fpc0luZGV4LFxuICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBOZ0Fpc0luc3RhbnRTZWFyY2gpKVxuICAgIHB1YmxpYyBpbnN0YW50U2VhcmNoSW5zdGFuY2U6IE5nQWlzSW5zdGFudFNlYXJjaFxuICApIHtcbiAgICBzdXBlcignRXhwZXJpbWVudGFsQ29uZmlndXJlUmVsYXRlZEl0ZW1zJyk7XG4gIH1cblxuICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5jcmVhdGVXaWRnZXQoXG4gICAgICBFWFBFUklNRU5UQUxfY29ubmVjdENvbmZpZ3VyZVJlbGF0ZWRJdGVtcyxcbiAgICAgIHtcbiAgICAgICAgaGl0OiB0aGlzLmhpdCxcbiAgICAgICAgbWF0Y2hpbmdQYXR0ZXJuczogdGhpcy5tYXRjaGluZ1BhdHRlcm5zLFxuICAgICAgICB0cmFuc2Zvcm1TZWFyY2hQYXJhbWV0ZXJzOiB0aGlzLnRyYW5zZm9ybVNlYXJjaFBhcmFtZXRlcnMsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAkJHdpZGdldFR5cGU6ICdhaXMuY29uZmlndXJlUmVsYXRlZEl0ZW1zJyxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgc3VwZXIubmdPbkluaXQoKTtcbiAgfVxufVxuIl19