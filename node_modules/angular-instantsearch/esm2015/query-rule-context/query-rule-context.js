import { Component, Input, Inject, forwardRef, Optional } from '@angular/core';
import { connectQueryRules } from 'instantsearch.js/es/connectors';
import { TypedBaseWidget } from '../typed-base-widget';
import { NgAisInstantSearch } from '../instantsearch/instantsearch';
import { NgAisIndex } from '../index-widget/index-widget';
export class NgAisQueryRuleContext extends TypedBaseWidget {
    constructor(parentIndex, instantSearchInstance) {
        super('QueryRuleContext');
        this.parentIndex = parentIndex;
        this.instantSearchInstance = instantSearchInstance;
    }
    ngOnInit() {
        this.createWidget(connectQueryRules, {
            trackedFilters: this.trackedFilters,
            transformRuleContexts: this.transformRuleContexts,
        }, {
            $$widgetType: 'ais.queryRuleContext',
        });
        super.ngOnInit();
    }
}
NgAisQueryRuleContext.decorators = [
    { type: Component, args: [{
                selector: 'ais-query-rule-context',
                template: ''
            },] }
];
NgAisQueryRuleContext.ctorParameters = () => [
    { type: NgAisIndex, decorators: [{ type: Inject, args: [forwardRef(() => NgAisIndex),] }, { type: Optional }] },
    { type: NgAisInstantSearch, decorators: [{ type: Inject, args: [forwardRef(() => NgAisInstantSearch),] }] }
];
NgAisQueryRuleContext.propDecorators = {
    trackedFilters: [{ type: Input }],
    transformRuleContexts: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnktcnVsZS1jb250ZXh0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3F1ZXJ5LXJ1bGUtY29udGV4dC9xdWVyeS1ydWxlLWNvbnRleHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFL0UsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDbkUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQVUxRCxNQUFNLE9BQU8scUJBQXNCLFNBQVEsZUFHMUM7SUFLQyxZQUdTLFdBQXVCLEVBRXZCLHFCQUF5QztRQUVoRCxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUpuQixnQkFBVyxHQUFYLFdBQVcsQ0FBWTtRQUV2QiwwQkFBcUIsR0FBckIscUJBQXFCLENBQW9CO0lBR2xELENBQUM7SUFFTSxRQUFRO1FBQ2IsSUFBSSxDQUFDLFlBQVksQ0FDZixpQkFBaUIsRUFDakI7WUFDRSxjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7WUFDbkMscUJBQXFCLEVBQUUsSUFBSSxDQUFDLHFCQUFxQjtTQUNsRCxFQUNEO1lBQ0UsWUFBWSxFQUFFLHNCQUFzQjtTQUNyQyxDQUNGLENBQUM7UUFFRixLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbkIsQ0FBQzs7O1lBbkNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsd0JBQXdCO2dCQUNsQyxRQUFRLEVBQUUsRUFBRTthQUNiOzs7WUFUUSxVQUFVLHVCQW1CZCxNQUFNLFNBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUNuQyxRQUFRO1lBckJKLGtCQUFrQix1QkF1QnRCLE1BQU0sU0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsa0JBQWtCLENBQUM7Ozs2QkFSN0MsS0FBSztvQ0FDTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgSW5qZWN0LCBmb3J3YXJkUmVmLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb25uZWN0UXVlcnlSdWxlcyB9IGZyb20gJ2luc3RhbnRzZWFyY2guanMvZXMvY29ubmVjdG9ycyc7XG5pbXBvcnQgeyBUeXBlZEJhc2VXaWRnZXQgfSBmcm9tICcuLi90eXBlZC1iYXNlLXdpZGdldCc7XG5pbXBvcnQgeyBOZ0Fpc0luc3RhbnRTZWFyY2ggfSBmcm9tICcuLi9pbnN0YW50c2VhcmNoL2luc3RhbnRzZWFyY2gnO1xuaW1wb3J0IHsgTmdBaXNJbmRleCB9IGZyb20gJy4uL2luZGV4LXdpZGdldC9pbmRleC13aWRnZXQnO1xuaW1wb3J0IHtcbiAgUXVlcnlSdWxlc0Nvbm5lY3RvclBhcmFtcyxcbiAgUXVlcnlSdWxlc1dpZGdldERlc2NyaXB0aW9uLFxufSBmcm9tICdpbnN0YW50c2VhcmNoLmpzL2VzL2Nvbm5lY3RvcnMvcXVlcnktcnVsZXMvY29ubmVjdFF1ZXJ5UnVsZXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhaXMtcXVlcnktcnVsZS1jb250ZXh0JyxcbiAgdGVtcGxhdGU6ICcnLFxufSlcbmV4cG9ydCBjbGFzcyBOZ0Fpc1F1ZXJ5UnVsZUNvbnRleHQgZXh0ZW5kcyBUeXBlZEJhc2VXaWRnZXQ8XG4gIFF1ZXJ5UnVsZXNXaWRnZXREZXNjcmlwdGlvbixcbiAgUXVlcnlSdWxlc0Nvbm5lY3RvclBhcmFtc1xuPiB7XG4gIEBJbnB1dCgpIHB1YmxpYyB0cmFja2VkRmlsdGVyczogUXVlcnlSdWxlc0Nvbm5lY3RvclBhcmFtc1sndHJhY2tlZEZpbHRlcnMnXTtcbiAgQElucHV0KClcbiAgcHVibGljIHRyYW5zZm9ybVJ1bGVDb250ZXh0cz86IFF1ZXJ5UnVsZXNDb25uZWN0b3JQYXJhbXNbJ3RyYW5zZm9ybVJ1bGVDb250ZXh0cyddO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBOZ0Fpc0luZGV4KSlcbiAgICBAT3B0aW9uYWwoKVxuICAgIHB1YmxpYyBwYXJlbnRJbmRleDogTmdBaXNJbmRleCxcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTmdBaXNJbnN0YW50U2VhcmNoKSlcbiAgICBwdWJsaWMgaW5zdGFudFNlYXJjaEluc3RhbmNlOiBOZ0Fpc0luc3RhbnRTZWFyY2hcbiAgKSB7XG4gICAgc3VwZXIoJ1F1ZXJ5UnVsZUNvbnRleHQnKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmNyZWF0ZVdpZGdldChcbiAgICAgIGNvbm5lY3RRdWVyeVJ1bGVzLFxuICAgICAge1xuICAgICAgICB0cmFja2VkRmlsdGVyczogdGhpcy50cmFja2VkRmlsdGVycyxcbiAgICAgICAgdHJhbnNmb3JtUnVsZUNvbnRleHRzOiB0aGlzLnRyYW5zZm9ybVJ1bGVDb250ZXh0cyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICQkd2lkZ2V0VHlwZTogJ2Fpcy5xdWVyeVJ1bGVDb250ZXh0JyxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgc3VwZXIubmdPbkluaXQoKTtcbiAgfVxufVxuIl19