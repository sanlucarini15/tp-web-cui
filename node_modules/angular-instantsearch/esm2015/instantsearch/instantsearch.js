import { Component, Input, Output, EventEmitter, Inject, PLATFORM_ID, VERSION as AngularVersion, } from '@angular/core';
import * as algoliasearchProxy from 'algoliasearch/lite';
import instantsearch from 'instantsearch.js/es';
import { VERSION } from '../version';
// this is needed for different webpack/typescript configurations
const algoliasearch = algoliasearchProxy.default || algoliasearchProxy;
export class NgAisInstantSearch {
    constructor(platformId) {
        this.platformId = platformId;
        this.instanceName = 'default';
        this.change = new EventEmitter();
        this.onRender = () => {
            this.change.emit({
                results: this.instantSearchInstance.helper.lastResults,
                state: this.instantSearchInstance.helper.state,
            });
        };
    }
    ngOnInit() {
        if (typeof this.config.searchClient.addAlgoliaAgent === 'function') {
            this.config.searchClient.addAlgoliaAgent(`angular (${AngularVersion.full})`);
            this.config.searchClient.addAlgoliaAgent(`angular-instantsearch (${VERSION})`);
        }
        this.instantSearchInstance = instantsearch(this.config);
        this.instantSearchInstance.on('render', this.onRender);
    }
    ngAfterViewInit() {
        this.instantSearchInstance.start();
    }
    ngOnDestroy() {
        if (this.instantSearchInstance) {
            this.instantSearchInstance.removeListener('render', this.onRender);
            this.instantSearchInstance.dispose();
        }
    }
    addWidgets(widgets) {
        this.instantSearchInstance.addWidgets(widgets);
    }
    removeWidgets(widgets) {
        this.instantSearchInstance.removeWidgets(widgets);
    }
    refresh() {
        this.instantSearchInstance.refresh();
    }
}
NgAisInstantSearch.decorators = [
    { type: Component, args: [{
                selector: 'ais-instantsearch',
                template: '<ng-content></ng-content>'
            },] }
];
NgAisInstantSearch.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
NgAisInstantSearch.propDecorators = {
    config: [{ type: Input }],
    instanceName: [{ type: Input }],
    change: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFudHNlYXJjaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9pbnN0YW50c2VhcmNoL2luc3RhbnRzZWFyY2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCxLQUFLLEVBR0wsTUFBTSxFQUNOLFlBQVksRUFDWixNQUFNLEVBQ04sV0FBVyxFQUNYLE9BQU8sSUFBSSxjQUFjLEdBQzFCLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sS0FBSyxrQkFBa0IsTUFBTSxvQkFBb0IsQ0FBQztBQUN6RCxPQUFPLGFBQWEsTUFBTSxxQkFBcUIsQ0FBQztBQUdoRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBT3JDLGlFQUFpRTtBQUNqRSxNQUFNLGFBQWEsR0FBRyxrQkFBa0IsQ0FBQyxPQUFPLElBQUksa0JBQWtCLENBQUM7QUFrQnZFLE1BQU0sT0FBTyxrQkFBa0I7SUFZN0IsWUFBd0MsVUFBa0I7UUFBbEIsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQVYxQyxpQkFBWSxHQUFXLFNBQVMsQ0FBQztRQUdqRCxXQUFNLEdBQTZDLElBQUksWUFBWSxFQUcvRCxDQUFDO1FBMkNMLGFBQVEsR0FBRyxHQUFHLEVBQUU7WUFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztnQkFDZixPQUFPLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxXQUFXO2dCQUN0RCxLQUFLLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxLQUFLO2FBQy9DLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQztJQTVDMkQsQ0FBQztJQUV2RCxRQUFRO1FBQ2IsSUFBSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLGVBQWUsS0FBSyxVQUFVLEVBQUU7WUFDbEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUN0QyxZQUFZLGNBQWMsQ0FBQyxJQUFJLEdBQUcsQ0FDbkMsQ0FBQztZQUNGLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FDdEMsMEJBQTBCLE9BQU8sR0FBRyxDQUNyQyxDQUFDO1NBQ0g7UUFFRCxJQUFJLENBQUMscUJBQXFCLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMscUJBQXFCLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVNLGVBQWU7UUFDcEIsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFFTSxXQUFXO1FBQ2hCLElBQUksSUFBSSxDQUFDLHFCQUFxQixFQUFFO1lBQzlCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNuRSxJQUFJLENBQUMscUJBQXFCLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDdEM7SUFDSCxDQUFDO0lBRU0sVUFBVSxDQUFDLE9BQWlCO1FBQ2pDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVNLGFBQWEsQ0FBQyxPQUFpQjtRQUNwQyxJQUFJLENBQUMscUJBQXFCLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFTSxPQUFPO1FBQ1osSUFBSSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3ZDLENBQUM7OztZQXJERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0IsUUFBUSxFQUFFLDJCQUEyQjthQUN0Qzs7O1lBYXFELE1BQU0sdUJBQTdDLE1BQU0sU0FBQyxXQUFXOzs7cUJBWDlCLEtBQUs7MkJBQ0wsS0FBSztxQkFFTCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ29tcG9uZW50LFxuICBJbnB1dCxcbiAgT25Jbml0LFxuICBPbkRlc3Ryb3ksXG4gIE91dHB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbmplY3QsXG4gIFBMQVRGT1JNX0lELFxuICBWRVJTSU9OIGFzIEFuZ3VsYXJWZXJzaW9uLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0ICogYXMgYWxnb2xpYXNlYXJjaFByb3h5IGZyb20gJ2FsZ29saWFzZWFyY2gvbGl0ZSc7XG5pbXBvcnQgaW5zdGFudHNlYXJjaCBmcm9tICdpbnN0YW50c2VhcmNoLmpzL2VzJztcblxuaW1wb3J0IHsgV2lkZ2V0IH0gZnJvbSAnLi4vdHlwZWQtYmFzZS13aWRnZXQnO1xuaW1wb3J0IHsgVkVSU0lPTiB9IGZyb20gJy4uL3ZlcnNpb24nO1xuaW1wb3J0IHsgSW5zdGFudFNlYXJjaE9wdGlvbnMsIEluc3RhbnRTZWFyY2ggfSBmcm9tICdpbnN0YW50c2VhcmNoLmpzL2VzL3R5cGVzJztcbmV4cG9ydCB7IFNlYXJjaENsaWVudCwgSGl0IH0gZnJvbSAnaW5zdGFudHNlYXJjaC5qcy9lcy90eXBlcyc7XG5leHBvcnQge1xuICBQbGFpblNlYXJjaFBhcmFtZXRlcnMgYXMgU2VhcmNoUGFyYW1ldGVycyxcbn0gZnJvbSAnYWxnb2xpYXNlYXJjaC1oZWxwZXInO1xuXG4vLyB0aGlzIGlzIG5lZWRlZCBmb3IgZGlmZmVyZW50IHdlYnBhY2svdHlwZXNjcmlwdCBjb25maWd1cmF0aW9uc1xuY29uc3QgYWxnb2xpYXNlYXJjaCA9IGFsZ29saWFzZWFyY2hQcm94eS5kZWZhdWx0IHx8IGFsZ29saWFzZWFyY2hQcm94eTtcblxuZXhwb3J0IHR5cGUgRmFjZXRTb3J0QnlTdHJpbmdPcHRpb25zID1cbiAgfCAnY291bnQnXG4gIHwgJ2NvdW50OmFzYydcbiAgfCAnY291bnQ6ZGVzYydcbiAgfCAnbmFtZSdcbiAgfCAnbmFtZTphc2MnXG4gIHwgJ25hbWU6ZGVzYydcbiAgfCAnaXNSZWZpbmVkJztcblxuZXhwb3J0IHR5cGUgSW5zdGFudFNlYXJjaENvbmZpZyA9IEluc3RhbnRTZWFyY2hPcHRpb25zO1xuZXhwb3J0IHR5cGUgSW5zdGFudFNlYXJjaEluc3RhbmNlID0gSW5zdGFudFNlYXJjaDtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYWlzLWluc3RhbnRzZWFyY2gnLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxufSlcbmV4cG9ydCBjbGFzcyBOZ0Fpc0luc3RhbnRTZWFyY2ggaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkluaXQsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIHB1YmxpYyBjb25maWc6IEluc3RhbnRTZWFyY2hDb25maWc7XG4gIEBJbnB1dCgpIHB1YmxpYyBpbnN0YW5jZU5hbWU6IHN0cmluZyA9ICdkZWZhdWx0JztcblxuICBAT3V0cHV0KClcbiAgY2hhbmdlOiBFdmVudEVtaXR0ZXI8eyByZXN1bHRzOiB7fTsgc3RhdGU6IHt9IH0+ID0gbmV3IEV2ZW50RW1pdHRlcjx7XG4gICAgcmVzdWx0czoge307XG4gICAgc3RhdGU6IHt9O1xuICB9PigpO1xuXG4gIHB1YmxpYyBpbnN0YW50U2VhcmNoSW5zdGFuY2U6IEluc3RhbnRTZWFyY2hJbnN0YW5jZTtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KFBMQVRGT1JNX0lEKSBwdWJsaWMgcGxhdGZvcm1JZDogT2JqZWN0KSB7fVxuXG4gIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuY29uZmlnLnNlYXJjaENsaWVudC5hZGRBbGdvbGlhQWdlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuY29uZmlnLnNlYXJjaENsaWVudC5hZGRBbGdvbGlhQWdlbnQoXG4gICAgICAgIGBhbmd1bGFyICgke0FuZ3VsYXJWZXJzaW9uLmZ1bGx9KWBcbiAgICAgICk7XG4gICAgICB0aGlzLmNvbmZpZy5zZWFyY2hDbGllbnQuYWRkQWxnb2xpYUFnZW50KFxuICAgICAgICBgYW5ndWxhci1pbnN0YW50c2VhcmNoICgke1ZFUlNJT059KWBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5pbnN0YW50U2VhcmNoSW5zdGFuY2UgPSBpbnN0YW50c2VhcmNoKHRoaXMuY29uZmlnKTtcbiAgICB0aGlzLmluc3RhbnRTZWFyY2hJbnN0YW5jZS5vbigncmVuZGVyJywgdGhpcy5vblJlbmRlcik7XG4gIH1cblxuICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuaW5zdGFudFNlYXJjaEluc3RhbmNlLnN0YXJ0KCk7XG4gIH1cblxuICBwdWJsaWMgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuaW5zdGFudFNlYXJjaEluc3RhbmNlKSB7XG4gICAgICB0aGlzLmluc3RhbnRTZWFyY2hJbnN0YW5jZS5yZW1vdmVMaXN0ZW5lcigncmVuZGVyJywgdGhpcy5vblJlbmRlcik7XG4gICAgICB0aGlzLmluc3RhbnRTZWFyY2hJbnN0YW5jZS5kaXNwb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFkZFdpZGdldHMod2lkZ2V0czogV2lkZ2V0W10pIHtcbiAgICB0aGlzLmluc3RhbnRTZWFyY2hJbnN0YW5jZS5hZGRXaWRnZXRzKHdpZGdldHMpO1xuICB9XG5cbiAgcHVibGljIHJlbW92ZVdpZGdldHMod2lkZ2V0czogV2lkZ2V0W10pIHtcbiAgICB0aGlzLmluc3RhbnRTZWFyY2hJbnN0YW5jZS5yZW1vdmVXaWRnZXRzKHdpZGdldHMpO1xuICB9XG5cbiAgcHVibGljIHJlZnJlc2goKSB7XG4gICAgdGhpcy5pbnN0YW50U2VhcmNoSW5zdGFuY2UucmVmcmVzaCgpO1xuICB9XG5cbiAgb25SZW5kZXIgPSAoKSA9PiB7XG4gICAgdGhpcy5jaGFuZ2UuZW1pdCh7XG4gICAgICByZXN1bHRzOiB0aGlzLmluc3RhbnRTZWFyY2hJbnN0YW5jZS5oZWxwZXIubGFzdFJlc3VsdHMsXG4gICAgICBzdGF0ZTogdGhpcy5pbnN0YW50U2VhcmNoSW5zdGFuY2UuaGVscGVyLnN0YXRlLFxuICAgIH0pO1xuICB9O1xufVxuIl19